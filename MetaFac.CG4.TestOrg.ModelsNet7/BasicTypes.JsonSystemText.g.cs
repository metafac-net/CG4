#region Notices
// <auto-generated>
// Warning: This file was automatically generated. Changes to this file may
// cause incorrect behavior and will be lost when this file is regenerated.
// </auto-generated>
// <information>
// This file was generated using MetaFac.CG4 tools and user supplied metadata.
// Generator: JsonSystemText.2.6
// Metadata : MetaFac.CG4.TestOrg.Schema(.BasicTypes)
// </information>
#endregion
#nullable enable
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
#pragma warning disable CS8019 // Unnecessary using directive
using MetaFac.Mutability;
using MetaFac.CG4.Runtime;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Numerics;
using System.Text.Json.Serialization;
using MetaFac.CG4.TestOrg.ModelsNet7.BasicTypes.Contracts;
using MetaFac.Memory;

namespace MetaFac.CG4.TestOrg.ModelsNet7.BasicTypes.JsonSystemText
{


    public abstract class EntityBase : IFreezable, IEntityBase
    {
        public static EntityBase Empty => throw new NotSupportedException();
        public const int EntityTag = 0;
        public EntityBase() { }
        public EntityBase(EntityBase? source) { }
        public EntityBase(IEntityBase? source) { }
        public void CopyFrom(IEntityBase? source) { }
        protected abstract int OnGetEntityTag();
        public int GetEntityTag() => OnGetEntityTag();
        public bool Equals(EntityBase? other) => true;
        public override int GetHashCode() => 0;

        public bool IsFreezable() => false;
        public bool IsFrozen() => false;
        public void Freeze() { }
        public bool TryFreeze() => true;
    }


    public sealed class Basic_bool_Factory : IEntityFactory<IBasic_bool, Basic_bool>
    {
        private static readonly Basic_bool_Factory _instance = new Basic_bool_Factory();
        public static Basic_bool_Factory Instance => _instance;
        public Basic_bool? CreateFrom(IBasic_bool? source) => (source is null) ? null : new Basic_bool(source);
        public Basic_bool Empty => new Basic_bool();
    }
    public partial class Basic_bool : EntityBase, IBasic_bool, IEquatable<Basic_bool>
    {
        public new const int EntityTag = 1;
        protected override int OnGetEntityTag() => EntityTag;

        private Boolean field_ScalarRequired;
        Boolean IBasic_bool.ScalarRequired { get => field_ScalarRequired; }
        public Boolean ScalarRequired
        {
            get => field_ScalarRequired;
            set => field_ScalarRequired = value;
        }
        private Boolean? field_ScalarOptional;
        Boolean? IBasic_bool.ScalarOptional => field_ScalarOptional;
        public Boolean? ScalarOptional
        {
            get => field_ScalarOptional;
            set => field_ScalarOptional = value;
        }
        private ImmutableList<Boolean>? field_VectorRequired;
        IReadOnlyList<Boolean>? IBasic_bool.VectorRequired => field_VectorRequired is null
            ? null
            : new ListFacade<Boolean, Boolean>(field_VectorRequired, (x) => x.ToExternal());
        public ImmutableList<Boolean>? VectorRequired
        {
            get => field_VectorRequired;
            set => field_VectorRequired = value;
        }
        private ImmutableList<Boolean?>? field_VectorOptional;
        IReadOnlyList<Boolean?>? IBasic_bool.VectorOptional => field_VectorOptional is null
            ? null
            : new ListFacade<Boolean?, Boolean?>(field_VectorOptional, (x) => x.ToExternal());
        public ImmutableList<Boolean?>? VectorOptional
        {
            get => field_VectorOptional;
            set => field_VectorOptional = value;
        }
        private ImmutableDictionary<String, Boolean>? field_MapRequired;
        IReadOnlyDictionary<String, Boolean>? IBasic_bool.MapRequired => field_MapRequired is null
            ? null
            : new DictionaryFacade<String, Boolean, Boolean>(field_MapRequired, (x) => x.ToExternal());
        public ImmutableDictionary<String, Boolean>? MapRequired
        {
            get => field_MapRequired;
            set => field_MapRequired = value;
        }
        private ImmutableDictionary<String, Boolean?>? field_MapOptional;
        IReadOnlyDictionary<String, Boolean?>? IBasic_bool.MapOptional => field_MapOptional is null
            ? null
            : new DictionaryFacade<String, Boolean?, Boolean?>(field_MapOptional, (x) => x.ToExternal());
        public ImmutableDictionary<String, Boolean?>? MapOptional
        {
            get => field_MapOptional;
            set => field_MapOptional = value;
        }
        private ImmutableDictionary<Boolean, String?>? field_MapKey;
        IReadOnlyDictionary<Boolean, String?>? IBasic_bool.MapKey => field_MapKey;
        public ImmutableDictionary<Boolean, String?>? MapKey
        {
            get => field_MapKey;
            set => field_MapKey = value;
        }

        public Basic_bool() : base()
        {
        }

        public Basic_bool(Basic_bool? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired;
            field_VectorOptional = source.VectorOptional;
            field_MapRequired = source.MapRequired;
            field_MapOptional = source.MapOptional;
            field_MapKey = source.MapKey;
        }

        public Basic_bool(IBasic_bool? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<Boolean>.Empty.AddRange(source.VectorRequired
                    .Select(x => (Boolean)x));
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<Boolean?>.Empty.AddRange(source.VectorOptional
                    .Select(x => (Boolean?)x));
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, Boolean>.Empty.AddRange(source.MapRequired
                    .Select(x => new KeyValuePair<String, Boolean>(x.Key, x.Value)));
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, Boolean?>.Empty.AddRange(source.MapOptional
                    .Select(x => new KeyValuePair<String, Boolean?>(x.Key, x.Value)));
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<Boolean, String?>.Empty.AddRange(source.MapKey);
        }

        public void CopyFrom(IBasic_bool? source)
        {
            if (source is null) return;
            base.CopyFrom(source);
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<Boolean>.Empty.AddRange(source.VectorRequired
                    .Select(x => (Boolean)x));
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<Boolean?>.Empty.AddRange(source.VectorOptional
                    .Select(x => (Boolean?)x));
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, Boolean>.Empty.AddRange(source.MapRequired
                    .Select(x => new KeyValuePair<String, Boolean>(x.Key, x.Value)));
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, Boolean?>.Empty.AddRange(source.MapOptional
                    .Select(x => new KeyValuePair<String, Boolean?>(x.Key, x.Value)));
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<Boolean, String?>.Empty.AddRange(source.MapKey);
        }

        public bool Equals(Basic_bool? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!base.Equals(other)) return false;
            if (!ScalarRequired.ValueEquals(other.ScalarRequired)) return false;
            if (!ScalarOptional.ValueEquals(other.ScalarOptional)) return false;
            if (!VectorRequired.ArrayEquals(other.VectorRequired)) return false;
            if (!VectorOptional.ArrayEquals(other.VectorOptional)) return false;
            if (!MapRequired.IndexEquals(other.MapRequired)) return false;
            if (!MapOptional.IndexEquals(other.MapOptional)) return false;
            if (!MapKey.IndexEquals(other.MapKey)) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is Basic_bool other && Equals(other);

        public override int GetHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(base.GetHashCode());
            hc.Add(ScalarRequired.CalcHashUnary());
            hc.Add(ScalarOptional.CalcHashUnary());
            hc.Add(VectorRequired.CalcHashArray());
            hc.Add(VectorOptional.CalcHashArray());
            hc.Add(MapRequired.CalcHashIndex());
            hc.Add(MapOptional.CalcHashIndex());
            hc.Add(MapKey.CalcHashIndex());
            return hc.ToHashCode();
        }
    }

    public sealed class Basic_sbyte_Factory : IEntityFactory<IBasic_sbyte, Basic_sbyte>
    {
        private static readonly Basic_sbyte_Factory _instance = new Basic_sbyte_Factory();
        public static Basic_sbyte_Factory Instance => _instance;
        public Basic_sbyte? CreateFrom(IBasic_sbyte? source) => (source is null) ? null : new Basic_sbyte(source);
        public Basic_sbyte Empty => new Basic_sbyte();
    }
    public partial class Basic_sbyte : EntityBase, IBasic_sbyte, IEquatable<Basic_sbyte>
    {
        public new const int EntityTag = 2;
        protected override int OnGetEntityTag() => EntityTag;

        private SByte field_ScalarRequired;
        SByte IBasic_sbyte.ScalarRequired { get => field_ScalarRequired; }
        public SByte ScalarRequired
        {
            get => field_ScalarRequired;
            set => field_ScalarRequired = value;
        }
        private SByte? field_ScalarOptional;
        SByte? IBasic_sbyte.ScalarOptional => field_ScalarOptional;
        public SByte? ScalarOptional
        {
            get => field_ScalarOptional;
            set => field_ScalarOptional = value;
        }
        private ImmutableList<SByte>? field_VectorRequired;
        IReadOnlyList<SByte>? IBasic_sbyte.VectorRequired => field_VectorRequired is null
            ? null
            : new ListFacade<SByte, SByte>(field_VectorRequired, (x) => x.ToExternal());
        public ImmutableList<SByte>? VectorRequired
        {
            get => field_VectorRequired;
            set => field_VectorRequired = value;
        }
        private ImmutableList<SByte?>? field_VectorOptional;
        IReadOnlyList<SByte?>? IBasic_sbyte.VectorOptional => field_VectorOptional is null
            ? null
            : new ListFacade<SByte?, SByte?>(field_VectorOptional, (x) => x.ToExternal());
        public ImmutableList<SByte?>? VectorOptional
        {
            get => field_VectorOptional;
            set => field_VectorOptional = value;
        }
        private ImmutableDictionary<String, SByte>? field_MapRequired;
        IReadOnlyDictionary<String, SByte>? IBasic_sbyte.MapRequired => field_MapRequired is null
            ? null
            : new DictionaryFacade<String, SByte, SByte>(field_MapRequired, (x) => x.ToExternal());
        public ImmutableDictionary<String, SByte>? MapRequired
        {
            get => field_MapRequired;
            set => field_MapRequired = value;
        }
        private ImmutableDictionary<String, SByte?>? field_MapOptional;
        IReadOnlyDictionary<String, SByte?>? IBasic_sbyte.MapOptional => field_MapOptional is null
            ? null
            : new DictionaryFacade<String, SByte?, SByte?>(field_MapOptional, (x) => x.ToExternal());
        public ImmutableDictionary<String, SByte?>? MapOptional
        {
            get => field_MapOptional;
            set => field_MapOptional = value;
        }
        private ImmutableDictionary<SByte, String?>? field_MapKey;
        IReadOnlyDictionary<SByte, String?>? IBasic_sbyte.MapKey => field_MapKey;
        public ImmutableDictionary<SByte, String?>? MapKey
        {
            get => field_MapKey;
            set => field_MapKey = value;
        }

        public Basic_sbyte() : base()
        {
        }

        public Basic_sbyte(Basic_sbyte? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired;
            field_VectorOptional = source.VectorOptional;
            field_MapRequired = source.MapRequired;
            field_MapOptional = source.MapOptional;
            field_MapKey = source.MapKey;
        }

        public Basic_sbyte(IBasic_sbyte? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<SByte>.Empty.AddRange(source.VectorRequired
                    .Select(x => (SByte)x));
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<SByte?>.Empty.AddRange(source.VectorOptional
                    .Select(x => (SByte?)x));
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, SByte>.Empty.AddRange(source.MapRequired
                    .Select(x => new KeyValuePair<String, SByte>(x.Key, x.Value)));
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, SByte?>.Empty.AddRange(source.MapOptional
                    .Select(x => new KeyValuePair<String, SByte?>(x.Key, x.Value)));
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<SByte, String?>.Empty.AddRange(source.MapKey);
        }

        public void CopyFrom(IBasic_sbyte? source)
        {
            if (source is null) return;
            base.CopyFrom(source);
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<SByte>.Empty.AddRange(source.VectorRequired
                    .Select(x => (SByte)x));
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<SByte?>.Empty.AddRange(source.VectorOptional
                    .Select(x => (SByte?)x));
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, SByte>.Empty.AddRange(source.MapRequired
                    .Select(x => new KeyValuePair<String, SByte>(x.Key, x.Value)));
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, SByte?>.Empty.AddRange(source.MapOptional
                    .Select(x => new KeyValuePair<String, SByte?>(x.Key, x.Value)));
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<SByte, String?>.Empty.AddRange(source.MapKey);
        }

        public bool Equals(Basic_sbyte? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!base.Equals(other)) return false;
            if (!ScalarRequired.ValueEquals(other.ScalarRequired)) return false;
            if (!ScalarOptional.ValueEquals(other.ScalarOptional)) return false;
            if (!VectorRequired.ArrayEquals(other.VectorRequired)) return false;
            if (!VectorOptional.ArrayEquals(other.VectorOptional)) return false;
            if (!MapRequired.IndexEquals(other.MapRequired)) return false;
            if (!MapOptional.IndexEquals(other.MapOptional)) return false;
            if (!MapKey.IndexEquals(other.MapKey)) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is Basic_sbyte other && Equals(other);

        public override int GetHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(base.GetHashCode());
            hc.Add(ScalarRequired.CalcHashUnary());
            hc.Add(ScalarOptional.CalcHashUnary());
            hc.Add(VectorRequired.CalcHashArray());
            hc.Add(VectorOptional.CalcHashArray());
            hc.Add(MapRequired.CalcHashIndex());
            hc.Add(MapOptional.CalcHashIndex());
            hc.Add(MapKey.CalcHashIndex());
            return hc.ToHashCode();
        }
    }

    public sealed class Basic_byte_Factory : IEntityFactory<IBasic_byte, Basic_byte>
    {
        private static readonly Basic_byte_Factory _instance = new Basic_byte_Factory();
        public static Basic_byte_Factory Instance => _instance;
        public Basic_byte? CreateFrom(IBasic_byte? source) => (source is null) ? null : new Basic_byte(source);
        public Basic_byte Empty => new Basic_byte();
    }
    public partial class Basic_byte : EntityBase, IBasic_byte, IEquatable<Basic_byte>
    {
        public new const int EntityTag = 3;
        protected override int OnGetEntityTag() => EntityTag;

        private Byte field_ScalarRequired;
        Byte IBasic_byte.ScalarRequired { get => field_ScalarRequired; }
        public Byte ScalarRequired
        {
            get => field_ScalarRequired;
            set => field_ScalarRequired = value;
        }
        private Byte? field_ScalarOptional;
        Byte? IBasic_byte.ScalarOptional => field_ScalarOptional;
        public Byte? ScalarOptional
        {
            get => field_ScalarOptional;
            set => field_ScalarOptional = value;
        }
        private ImmutableList<Byte>? field_VectorRequired;
        IReadOnlyList<Byte>? IBasic_byte.VectorRequired => field_VectorRequired is null
            ? null
            : new ListFacade<Byte, Byte>(field_VectorRequired, (x) => x.ToExternal());
        public ImmutableList<Byte>? VectorRequired
        {
            get => field_VectorRequired;
            set => field_VectorRequired = value;
        }
        private ImmutableList<Byte?>? field_VectorOptional;
        IReadOnlyList<Byte?>? IBasic_byte.VectorOptional => field_VectorOptional is null
            ? null
            : new ListFacade<Byte?, Byte?>(field_VectorOptional, (x) => x.ToExternal());
        public ImmutableList<Byte?>? VectorOptional
        {
            get => field_VectorOptional;
            set => field_VectorOptional = value;
        }
        private ImmutableDictionary<String, Byte>? field_MapRequired;
        IReadOnlyDictionary<String, Byte>? IBasic_byte.MapRequired => field_MapRequired is null
            ? null
            : new DictionaryFacade<String, Byte, Byte>(field_MapRequired, (x) => x.ToExternal());
        public ImmutableDictionary<String, Byte>? MapRequired
        {
            get => field_MapRequired;
            set => field_MapRequired = value;
        }
        private ImmutableDictionary<String, Byte?>? field_MapOptional;
        IReadOnlyDictionary<String, Byte?>? IBasic_byte.MapOptional => field_MapOptional is null
            ? null
            : new DictionaryFacade<String, Byte?, Byte?>(field_MapOptional, (x) => x.ToExternal());
        public ImmutableDictionary<String, Byte?>? MapOptional
        {
            get => field_MapOptional;
            set => field_MapOptional = value;
        }
        private ImmutableDictionary<Byte, String?>? field_MapKey;
        IReadOnlyDictionary<Byte, String?>? IBasic_byte.MapKey => field_MapKey;
        public ImmutableDictionary<Byte, String?>? MapKey
        {
            get => field_MapKey;
            set => field_MapKey = value;
        }

        public Basic_byte() : base()
        {
        }

        public Basic_byte(Basic_byte? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired;
            field_VectorOptional = source.VectorOptional;
            field_MapRequired = source.MapRequired;
            field_MapOptional = source.MapOptional;
            field_MapKey = source.MapKey;
        }

        public Basic_byte(IBasic_byte? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<Byte>.Empty.AddRange(source.VectorRequired
                    .Select(x => (Byte)x));
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<Byte?>.Empty.AddRange(source.VectorOptional
                    .Select(x => (Byte?)x));
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, Byte>.Empty.AddRange(source.MapRequired
                    .Select(x => new KeyValuePair<String, Byte>(x.Key, x.Value)));
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, Byte?>.Empty.AddRange(source.MapOptional
                    .Select(x => new KeyValuePair<String, Byte?>(x.Key, x.Value)));
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<Byte, String?>.Empty.AddRange(source.MapKey);
        }

        public void CopyFrom(IBasic_byte? source)
        {
            if (source is null) return;
            base.CopyFrom(source);
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<Byte>.Empty.AddRange(source.VectorRequired
                    .Select(x => (Byte)x));
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<Byte?>.Empty.AddRange(source.VectorOptional
                    .Select(x => (Byte?)x));
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, Byte>.Empty.AddRange(source.MapRequired
                    .Select(x => new KeyValuePair<String, Byte>(x.Key, x.Value)));
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, Byte?>.Empty.AddRange(source.MapOptional
                    .Select(x => new KeyValuePair<String, Byte?>(x.Key, x.Value)));
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<Byte, String?>.Empty.AddRange(source.MapKey);
        }

        public bool Equals(Basic_byte? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!base.Equals(other)) return false;
            if (!ScalarRequired.ValueEquals(other.ScalarRequired)) return false;
            if (!ScalarOptional.ValueEquals(other.ScalarOptional)) return false;
            if (!VectorRequired.ArrayEquals(other.VectorRequired)) return false;
            if (!VectorOptional.ArrayEquals(other.VectorOptional)) return false;
            if (!MapRequired.IndexEquals(other.MapRequired)) return false;
            if (!MapOptional.IndexEquals(other.MapOptional)) return false;
            if (!MapKey.IndexEquals(other.MapKey)) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is Basic_byte other && Equals(other);

        public override int GetHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(base.GetHashCode());
            hc.Add(ScalarRequired.CalcHashUnary());
            hc.Add(ScalarOptional.CalcHashUnary());
            hc.Add(VectorRequired.CalcHashArray());
            hc.Add(VectorOptional.CalcHashArray());
            hc.Add(MapRequired.CalcHashIndex());
            hc.Add(MapOptional.CalcHashIndex());
            hc.Add(MapKey.CalcHashIndex());
            return hc.ToHashCode();
        }
    }

    public sealed class Basic_short_Factory : IEntityFactory<IBasic_short, Basic_short>
    {
        private static readonly Basic_short_Factory _instance = new Basic_short_Factory();
        public static Basic_short_Factory Instance => _instance;
        public Basic_short? CreateFrom(IBasic_short? source) => (source is null) ? null : new Basic_short(source);
        public Basic_short Empty => new Basic_short();
    }
    public partial class Basic_short : EntityBase, IBasic_short, IEquatable<Basic_short>
    {
        public new const int EntityTag = 4;
        protected override int OnGetEntityTag() => EntityTag;

        private Int16 field_ScalarRequired;
        Int16 IBasic_short.ScalarRequired { get => field_ScalarRequired; }
        public Int16 ScalarRequired
        {
            get => field_ScalarRequired;
            set => field_ScalarRequired = value;
        }
        private Int16? field_ScalarOptional;
        Int16? IBasic_short.ScalarOptional => field_ScalarOptional;
        public Int16? ScalarOptional
        {
            get => field_ScalarOptional;
            set => field_ScalarOptional = value;
        }
        private ImmutableList<Int16>? field_VectorRequired;
        IReadOnlyList<Int16>? IBasic_short.VectorRequired => field_VectorRequired is null
            ? null
            : new ListFacade<Int16, Int16>(field_VectorRequired, (x) => x.ToExternal());
        public ImmutableList<Int16>? VectorRequired
        {
            get => field_VectorRequired;
            set => field_VectorRequired = value;
        }
        private ImmutableList<Int16?>? field_VectorOptional;
        IReadOnlyList<Int16?>? IBasic_short.VectorOptional => field_VectorOptional is null
            ? null
            : new ListFacade<Int16?, Int16?>(field_VectorOptional, (x) => x.ToExternal());
        public ImmutableList<Int16?>? VectorOptional
        {
            get => field_VectorOptional;
            set => field_VectorOptional = value;
        }
        private ImmutableDictionary<String, Int16>? field_MapRequired;
        IReadOnlyDictionary<String, Int16>? IBasic_short.MapRequired => field_MapRequired is null
            ? null
            : new DictionaryFacade<String, Int16, Int16>(field_MapRequired, (x) => x.ToExternal());
        public ImmutableDictionary<String, Int16>? MapRequired
        {
            get => field_MapRequired;
            set => field_MapRequired = value;
        }
        private ImmutableDictionary<String, Int16?>? field_MapOptional;
        IReadOnlyDictionary<String, Int16?>? IBasic_short.MapOptional => field_MapOptional is null
            ? null
            : new DictionaryFacade<String, Int16?, Int16?>(field_MapOptional, (x) => x.ToExternal());
        public ImmutableDictionary<String, Int16?>? MapOptional
        {
            get => field_MapOptional;
            set => field_MapOptional = value;
        }
        private ImmutableDictionary<Int16, String?>? field_MapKey;
        IReadOnlyDictionary<Int16, String?>? IBasic_short.MapKey => field_MapKey;
        public ImmutableDictionary<Int16, String?>? MapKey
        {
            get => field_MapKey;
            set => field_MapKey = value;
        }

        public Basic_short() : base()
        {
        }

        public Basic_short(Basic_short? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired;
            field_VectorOptional = source.VectorOptional;
            field_MapRequired = source.MapRequired;
            field_MapOptional = source.MapOptional;
            field_MapKey = source.MapKey;
        }

        public Basic_short(IBasic_short? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<Int16>.Empty.AddRange(source.VectorRequired
                    .Select(x => (Int16)x));
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<Int16?>.Empty.AddRange(source.VectorOptional
                    .Select(x => (Int16?)x));
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, Int16>.Empty.AddRange(source.MapRequired
                    .Select(x => new KeyValuePair<String, Int16>(x.Key, x.Value)));
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, Int16?>.Empty.AddRange(source.MapOptional
                    .Select(x => new KeyValuePair<String, Int16?>(x.Key, x.Value)));
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<Int16, String?>.Empty.AddRange(source.MapKey);
        }

        public void CopyFrom(IBasic_short? source)
        {
            if (source is null) return;
            base.CopyFrom(source);
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<Int16>.Empty.AddRange(source.VectorRequired
                    .Select(x => (Int16)x));
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<Int16?>.Empty.AddRange(source.VectorOptional
                    .Select(x => (Int16?)x));
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, Int16>.Empty.AddRange(source.MapRequired
                    .Select(x => new KeyValuePair<String, Int16>(x.Key, x.Value)));
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, Int16?>.Empty.AddRange(source.MapOptional
                    .Select(x => new KeyValuePair<String, Int16?>(x.Key, x.Value)));
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<Int16, String?>.Empty.AddRange(source.MapKey);
        }

        public bool Equals(Basic_short? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!base.Equals(other)) return false;
            if (!ScalarRequired.ValueEquals(other.ScalarRequired)) return false;
            if (!ScalarOptional.ValueEquals(other.ScalarOptional)) return false;
            if (!VectorRequired.ArrayEquals(other.VectorRequired)) return false;
            if (!VectorOptional.ArrayEquals(other.VectorOptional)) return false;
            if (!MapRequired.IndexEquals(other.MapRequired)) return false;
            if (!MapOptional.IndexEquals(other.MapOptional)) return false;
            if (!MapKey.IndexEquals(other.MapKey)) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is Basic_short other && Equals(other);

        public override int GetHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(base.GetHashCode());
            hc.Add(ScalarRequired.CalcHashUnary());
            hc.Add(ScalarOptional.CalcHashUnary());
            hc.Add(VectorRequired.CalcHashArray());
            hc.Add(VectorOptional.CalcHashArray());
            hc.Add(MapRequired.CalcHashIndex());
            hc.Add(MapOptional.CalcHashIndex());
            hc.Add(MapKey.CalcHashIndex());
            return hc.ToHashCode();
        }
    }

    public sealed class Basic_ushort_Factory : IEntityFactory<IBasic_ushort, Basic_ushort>
    {
        private static readonly Basic_ushort_Factory _instance = new Basic_ushort_Factory();
        public static Basic_ushort_Factory Instance => _instance;
        public Basic_ushort? CreateFrom(IBasic_ushort? source) => (source is null) ? null : new Basic_ushort(source);
        public Basic_ushort Empty => new Basic_ushort();
    }
    public partial class Basic_ushort : EntityBase, IBasic_ushort, IEquatable<Basic_ushort>
    {
        public new const int EntityTag = 5;
        protected override int OnGetEntityTag() => EntityTag;

        private UInt16 field_ScalarRequired;
        UInt16 IBasic_ushort.ScalarRequired { get => field_ScalarRequired; }
        public UInt16 ScalarRequired
        {
            get => field_ScalarRequired;
            set => field_ScalarRequired = value;
        }
        private UInt16? field_ScalarOptional;
        UInt16? IBasic_ushort.ScalarOptional => field_ScalarOptional;
        public UInt16? ScalarOptional
        {
            get => field_ScalarOptional;
            set => field_ScalarOptional = value;
        }
        private ImmutableList<UInt16>? field_VectorRequired;
        IReadOnlyList<UInt16>? IBasic_ushort.VectorRequired => field_VectorRequired is null
            ? null
            : new ListFacade<UInt16, UInt16>(field_VectorRequired, (x) => x.ToExternal());
        public ImmutableList<UInt16>? VectorRequired
        {
            get => field_VectorRequired;
            set => field_VectorRequired = value;
        }
        private ImmutableList<UInt16?>? field_VectorOptional;
        IReadOnlyList<UInt16?>? IBasic_ushort.VectorOptional => field_VectorOptional is null
            ? null
            : new ListFacade<UInt16?, UInt16?>(field_VectorOptional, (x) => x.ToExternal());
        public ImmutableList<UInt16?>? VectorOptional
        {
            get => field_VectorOptional;
            set => field_VectorOptional = value;
        }
        private ImmutableDictionary<String, UInt16>? field_MapRequired;
        IReadOnlyDictionary<String, UInt16>? IBasic_ushort.MapRequired => field_MapRequired is null
            ? null
            : new DictionaryFacade<String, UInt16, UInt16>(field_MapRequired, (x) => x.ToExternal());
        public ImmutableDictionary<String, UInt16>? MapRequired
        {
            get => field_MapRequired;
            set => field_MapRequired = value;
        }
        private ImmutableDictionary<String, UInt16?>? field_MapOptional;
        IReadOnlyDictionary<String, UInt16?>? IBasic_ushort.MapOptional => field_MapOptional is null
            ? null
            : new DictionaryFacade<String, UInt16?, UInt16?>(field_MapOptional, (x) => x.ToExternal());
        public ImmutableDictionary<String, UInt16?>? MapOptional
        {
            get => field_MapOptional;
            set => field_MapOptional = value;
        }
        private ImmutableDictionary<UInt16, String?>? field_MapKey;
        IReadOnlyDictionary<UInt16, String?>? IBasic_ushort.MapKey => field_MapKey;
        public ImmutableDictionary<UInt16, String?>? MapKey
        {
            get => field_MapKey;
            set => field_MapKey = value;
        }

        public Basic_ushort() : base()
        {
        }

        public Basic_ushort(Basic_ushort? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired;
            field_VectorOptional = source.VectorOptional;
            field_MapRequired = source.MapRequired;
            field_MapOptional = source.MapOptional;
            field_MapKey = source.MapKey;
        }

        public Basic_ushort(IBasic_ushort? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<UInt16>.Empty.AddRange(source.VectorRequired
                    .Select(x => (UInt16)x));
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<UInt16?>.Empty.AddRange(source.VectorOptional
                    .Select(x => (UInt16?)x));
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, UInt16>.Empty.AddRange(source.MapRequired
                    .Select(x => new KeyValuePair<String, UInt16>(x.Key, x.Value)));
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, UInt16?>.Empty.AddRange(source.MapOptional
                    .Select(x => new KeyValuePair<String, UInt16?>(x.Key, x.Value)));
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<UInt16, String?>.Empty.AddRange(source.MapKey);
        }

        public void CopyFrom(IBasic_ushort? source)
        {
            if (source is null) return;
            base.CopyFrom(source);
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<UInt16>.Empty.AddRange(source.VectorRequired
                    .Select(x => (UInt16)x));
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<UInt16?>.Empty.AddRange(source.VectorOptional
                    .Select(x => (UInt16?)x));
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, UInt16>.Empty.AddRange(source.MapRequired
                    .Select(x => new KeyValuePair<String, UInt16>(x.Key, x.Value)));
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, UInt16?>.Empty.AddRange(source.MapOptional
                    .Select(x => new KeyValuePair<String, UInt16?>(x.Key, x.Value)));
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<UInt16, String?>.Empty.AddRange(source.MapKey);
        }

        public bool Equals(Basic_ushort? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!base.Equals(other)) return false;
            if (!ScalarRequired.ValueEquals(other.ScalarRequired)) return false;
            if (!ScalarOptional.ValueEquals(other.ScalarOptional)) return false;
            if (!VectorRequired.ArrayEquals(other.VectorRequired)) return false;
            if (!VectorOptional.ArrayEquals(other.VectorOptional)) return false;
            if (!MapRequired.IndexEquals(other.MapRequired)) return false;
            if (!MapOptional.IndexEquals(other.MapOptional)) return false;
            if (!MapKey.IndexEquals(other.MapKey)) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is Basic_ushort other && Equals(other);

        public override int GetHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(base.GetHashCode());
            hc.Add(ScalarRequired.CalcHashUnary());
            hc.Add(ScalarOptional.CalcHashUnary());
            hc.Add(VectorRequired.CalcHashArray());
            hc.Add(VectorOptional.CalcHashArray());
            hc.Add(MapRequired.CalcHashIndex());
            hc.Add(MapOptional.CalcHashIndex());
            hc.Add(MapKey.CalcHashIndex());
            return hc.ToHashCode();
        }
    }

    public sealed class Basic_char_Factory : IEntityFactory<IBasic_char, Basic_char>
    {
        private static readonly Basic_char_Factory _instance = new Basic_char_Factory();
        public static Basic_char_Factory Instance => _instance;
        public Basic_char? CreateFrom(IBasic_char? source) => (source is null) ? null : new Basic_char(source);
        public Basic_char Empty => new Basic_char();
    }
    public partial class Basic_char : EntityBase, IBasic_char, IEquatable<Basic_char>
    {
        public new const int EntityTag = 6;
        protected override int OnGetEntityTag() => EntityTag;

        private Char field_ScalarRequired;
        Char IBasic_char.ScalarRequired { get => field_ScalarRequired; }
        public Char ScalarRequired
        {
            get => field_ScalarRequired;
            set => field_ScalarRequired = value;
        }
        private Char? field_ScalarOptional;
        Char? IBasic_char.ScalarOptional => field_ScalarOptional;
        public Char? ScalarOptional
        {
            get => field_ScalarOptional;
            set => field_ScalarOptional = value;
        }
        private ImmutableList<Char>? field_VectorRequired;
        IReadOnlyList<Char>? IBasic_char.VectorRequired => field_VectorRequired is null
            ? null
            : new ListFacade<Char, Char>(field_VectorRequired, (x) => x.ToExternal());
        public ImmutableList<Char>? VectorRequired
        {
            get => field_VectorRequired;
            set => field_VectorRequired = value;
        }
        private ImmutableList<Char?>? field_VectorOptional;
        IReadOnlyList<Char?>? IBasic_char.VectorOptional => field_VectorOptional is null
            ? null
            : new ListFacade<Char?, Char?>(field_VectorOptional, (x) => x.ToExternal());
        public ImmutableList<Char?>? VectorOptional
        {
            get => field_VectorOptional;
            set => field_VectorOptional = value;
        }
        private ImmutableDictionary<String, Char>? field_MapRequired;
        IReadOnlyDictionary<String, Char>? IBasic_char.MapRequired => field_MapRequired is null
            ? null
            : new DictionaryFacade<String, Char, Char>(field_MapRequired, (x) => x.ToExternal());
        public ImmutableDictionary<String, Char>? MapRequired
        {
            get => field_MapRequired;
            set => field_MapRequired = value;
        }
        private ImmutableDictionary<String, Char?>? field_MapOptional;
        IReadOnlyDictionary<String, Char?>? IBasic_char.MapOptional => field_MapOptional is null
            ? null
            : new DictionaryFacade<String, Char?, Char?>(field_MapOptional, (x) => x.ToExternal());
        public ImmutableDictionary<String, Char?>? MapOptional
        {
            get => field_MapOptional;
            set => field_MapOptional = value;
        }
        private ImmutableDictionary<Char, String?>? field_MapKey;
        IReadOnlyDictionary<Char, String?>? IBasic_char.MapKey => field_MapKey;
        public ImmutableDictionary<Char, String?>? MapKey
        {
            get => field_MapKey;
            set => field_MapKey = value;
        }

        public Basic_char() : base()
        {
        }

        public Basic_char(Basic_char? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired;
            field_VectorOptional = source.VectorOptional;
            field_MapRequired = source.MapRequired;
            field_MapOptional = source.MapOptional;
            field_MapKey = source.MapKey;
        }

        public Basic_char(IBasic_char? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<Char>.Empty.AddRange(source.VectorRequired
                    .Select(x => (Char)x));
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<Char?>.Empty.AddRange(source.VectorOptional
                    .Select(x => (Char?)x));
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, Char>.Empty.AddRange(source.MapRequired
                    .Select(x => new KeyValuePair<String, Char>(x.Key, x.Value)));
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, Char?>.Empty.AddRange(source.MapOptional
                    .Select(x => new KeyValuePair<String, Char?>(x.Key, x.Value)));
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<Char, String?>.Empty.AddRange(source.MapKey);
        }

        public void CopyFrom(IBasic_char? source)
        {
            if (source is null) return;
            base.CopyFrom(source);
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<Char>.Empty.AddRange(source.VectorRequired
                    .Select(x => (Char)x));
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<Char?>.Empty.AddRange(source.VectorOptional
                    .Select(x => (Char?)x));
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, Char>.Empty.AddRange(source.MapRequired
                    .Select(x => new KeyValuePair<String, Char>(x.Key, x.Value)));
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, Char?>.Empty.AddRange(source.MapOptional
                    .Select(x => new KeyValuePair<String, Char?>(x.Key, x.Value)));
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<Char, String?>.Empty.AddRange(source.MapKey);
        }

        public bool Equals(Basic_char? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!base.Equals(other)) return false;
            if (!ScalarRequired.ValueEquals(other.ScalarRequired)) return false;
            if (!ScalarOptional.ValueEquals(other.ScalarOptional)) return false;
            if (!VectorRequired.ArrayEquals(other.VectorRequired)) return false;
            if (!VectorOptional.ArrayEquals(other.VectorOptional)) return false;
            if (!MapRequired.IndexEquals(other.MapRequired)) return false;
            if (!MapOptional.IndexEquals(other.MapOptional)) return false;
            if (!MapKey.IndexEquals(other.MapKey)) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is Basic_char other && Equals(other);

        public override int GetHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(base.GetHashCode());
            hc.Add(ScalarRequired.CalcHashUnary());
            hc.Add(ScalarOptional.CalcHashUnary());
            hc.Add(VectorRequired.CalcHashArray());
            hc.Add(VectorOptional.CalcHashArray());
            hc.Add(MapRequired.CalcHashIndex());
            hc.Add(MapOptional.CalcHashIndex());
            hc.Add(MapKey.CalcHashIndex());
            return hc.ToHashCode();
        }
    }

    public sealed class Basic_int_Factory : IEntityFactory<IBasic_int, Basic_int>
    {
        private static readonly Basic_int_Factory _instance = new Basic_int_Factory();
        public static Basic_int_Factory Instance => _instance;
        public Basic_int? CreateFrom(IBasic_int? source) => (source is null) ? null : new Basic_int(source);
        public Basic_int Empty => new Basic_int();
    }
    public partial class Basic_int : EntityBase, IBasic_int, IEquatable<Basic_int>
    {
        public new const int EntityTag = 7;
        protected override int OnGetEntityTag() => EntityTag;

        private Int32 field_ScalarRequired;
        Int32 IBasic_int.ScalarRequired { get => field_ScalarRequired; }
        public Int32 ScalarRequired
        {
            get => field_ScalarRequired;
            set => field_ScalarRequired = value;
        }
        private Int32? field_ScalarOptional;
        Int32? IBasic_int.ScalarOptional => field_ScalarOptional;
        public Int32? ScalarOptional
        {
            get => field_ScalarOptional;
            set => field_ScalarOptional = value;
        }
        private ImmutableList<Int32>? field_VectorRequired;
        IReadOnlyList<Int32>? IBasic_int.VectorRequired => field_VectorRequired is null
            ? null
            : new ListFacade<Int32, Int32>(field_VectorRequired, (x) => x.ToExternal());
        public ImmutableList<Int32>? VectorRequired
        {
            get => field_VectorRequired;
            set => field_VectorRequired = value;
        }
        private ImmutableList<Int32?>? field_VectorOptional;
        IReadOnlyList<Int32?>? IBasic_int.VectorOptional => field_VectorOptional is null
            ? null
            : new ListFacade<Int32?, Int32?>(field_VectorOptional, (x) => x.ToExternal());
        public ImmutableList<Int32?>? VectorOptional
        {
            get => field_VectorOptional;
            set => field_VectorOptional = value;
        }
        private ImmutableDictionary<String, Int32>? field_MapRequired;
        IReadOnlyDictionary<String, Int32>? IBasic_int.MapRequired => field_MapRequired is null
            ? null
            : new DictionaryFacade<String, Int32, Int32>(field_MapRequired, (x) => x.ToExternal());
        public ImmutableDictionary<String, Int32>? MapRequired
        {
            get => field_MapRequired;
            set => field_MapRequired = value;
        }
        private ImmutableDictionary<String, Int32?>? field_MapOptional;
        IReadOnlyDictionary<String, Int32?>? IBasic_int.MapOptional => field_MapOptional is null
            ? null
            : new DictionaryFacade<String, Int32?, Int32?>(field_MapOptional, (x) => x.ToExternal());
        public ImmutableDictionary<String, Int32?>? MapOptional
        {
            get => field_MapOptional;
            set => field_MapOptional = value;
        }
        private ImmutableDictionary<Int32, String?>? field_MapKey;
        IReadOnlyDictionary<Int32, String?>? IBasic_int.MapKey => field_MapKey;
        public ImmutableDictionary<Int32, String?>? MapKey
        {
            get => field_MapKey;
            set => field_MapKey = value;
        }

        public Basic_int() : base()
        {
        }

        public Basic_int(Basic_int? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired;
            field_VectorOptional = source.VectorOptional;
            field_MapRequired = source.MapRequired;
            field_MapOptional = source.MapOptional;
            field_MapKey = source.MapKey;
        }

        public Basic_int(IBasic_int? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<Int32>.Empty.AddRange(source.VectorRequired
                    .Select(x => (Int32)x));
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<Int32?>.Empty.AddRange(source.VectorOptional
                    .Select(x => (Int32?)x));
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, Int32>.Empty.AddRange(source.MapRequired
                    .Select(x => new KeyValuePair<String, Int32>(x.Key, x.Value)));
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, Int32?>.Empty.AddRange(source.MapOptional
                    .Select(x => new KeyValuePair<String, Int32?>(x.Key, x.Value)));
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<Int32, String?>.Empty.AddRange(source.MapKey);
        }

        public void CopyFrom(IBasic_int? source)
        {
            if (source is null) return;
            base.CopyFrom(source);
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<Int32>.Empty.AddRange(source.VectorRequired
                    .Select(x => (Int32)x));
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<Int32?>.Empty.AddRange(source.VectorOptional
                    .Select(x => (Int32?)x));
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, Int32>.Empty.AddRange(source.MapRequired
                    .Select(x => new KeyValuePair<String, Int32>(x.Key, x.Value)));
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, Int32?>.Empty.AddRange(source.MapOptional
                    .Select(x => new KeyValuePair<String, Int32?>(x.Key, x.Value)));
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<Int32, String?>.Empty.AddRange(source.MapKey);
        }

        public bool Equals(Basic_int? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!base.Equals(other)) return false;
            if (!ScalarRequired.ValueEquals(other.ScalarRequired)) return false;
            if (!ScalarOptional.ValueEquals(other.ScalarOptional)) return false;
            if (!VectorRequired.ArrayEquals(other.VectorRequired)) return false;
            if (!VectorOptional.ArrayEquals(other.VectorOptional)) return false;
            if (!MapRequired.IndexEquals(other.MapRequired)) return false;
            if (!MapOptional.IndexEquals(other.MapOptional)) return false;
            if (!MapKey.IndexEquals(other.MapKey)) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is Basic_int other && Equals(other);

        public override int GetHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(base.GetHashCode());
            hc.Add(ScalarRequired.CalcHashUnary());
            hc.Add(ScalarOptional.CalcHashUnary());
            hc.Add(VectorRequired.CalcHashArray());
            hc.Add(VectorOptional.CalcHashArray());
            hc.Add(MapRequired.CalcHashIndex());
            hc.Add(MapOptional.CalcHashIndex());
            hc.Add(MapKey.CalcHashIndex());
            return hc.ToHashCode();
        }
    }

    public sealed class Basic_uint_Factory : IEntityFactory<IBasic_uint, Basic_uint>
    {
        private static readonly Basic_uint_Factory _instance = new Basic_uint_Factory();
        public static Basic_uint_Factory Instance => _instance;
        public Basic_uint? CreateFrom(IBasic_uint? source) => (source is null) ? null : new Basic_uint(source);
        public Basic_uint Empty => new Basic_uint();
    }
    public partial class Basic_uint : EntityBase, IBasic_uint, IEquatable<Basic_uint>
    {
        public new const int EntityTag = 8;
        protected override int OnGetEntityTag() => EntityTag;

        private UInt32 field_ScalarRequired;
        UInt32 IBasic_uint.ScalarRequired { get => field_ScalarRequired; }
        public UInt32 ScalarRequired
        {
            get => field_ScalarRequired;
            set => field_ScalarRequired = value;
        }
        private UInt32? field_ScalarOptional;
        UInt32? IBasic_uint.ScalarOptional => field_ScalarOptional;
        public UInt32? ScalarOptional
        {
            get => field_ScalarOptional;
            set => field_ScalarOptional = value;
        }
        private ImmutableList<UInt32>? field_VectorRequired;
        IReadOnlyList<UInt32>? IBasic_uint.VectorRequired => field_VectorRequired is null
            ? null
            : new ListFacade<UInt32, UInt32>(field_VectorRequired, (x) => x.ToExternal());
        public ImmutableList<UInt32>? VectorRequired
        {
            get => field_VectorRequired;
            set => field_VectorRequired = value;
        }
        private ImmutableList<UInt32?>? field_VectorOptional;
        IReadOnlyList<UInt32?>? IBasic_uint.VectorOptional => field_VectorOptional is null
            ? null
            : new ListFacade<UInt32?, UInt32?>(field_VectorOptional, (x) => x.ToExternal());
        public ImmutableList<UInt32?>? VectorOptional
        {
            get => field_VectorOptional;
            set => field_VectorOptional = value;
        }
        private ImmutableDictionary<String, UInt32>? field_MapRequired;
        IReadOnlyDictionary<String, UInt32>? IBasic_uint.MapRequired => field_MapRequired is null
            ? null
            : new DictionaryFacade<String, UInt32, UInt32>(field_MapRequired, (x) => x.ToExternal());
        public ImmutableDictionary<String, UInt32>? MapRequired
        {
            get => field_MapRequired;
            set => field_MapRequired = value;
        }
        private ImmutableDictionary<String, UInt32?>? field_MapOptional;
        IReadOnlyDictionary<String, UInt32?>? IBasic_uint.MapOptional => field_MapOptional is null
            ? null
            : new DictionaryFacade<String, UInt32?, UInt32?>(field_MapOptional, (x) => x.ToExternal());
        public ImmutableDictionary<String, UInt32?>? MapOptional
        {
            get => field_MapOptional;
            set => field_MapOptional = value;
        }
        private ImmutableDictionary<UInt32, String?>? field_MapKey;
        IReadOnlyDictionary<UInt32, String?>? IBasic_uint.MapKey => field_MapKey;
        public ImmutableDictionary<UInt32, String?>? MapKey
        {
            get => field_MapKey;
            set => field_MapKey = value;
        }

        public Basic_uint() : base()
        {
        }

        public Basic_uint(Basic_uint? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired;
            field_VectorOptional = source.VectorOptional;
            field_MapRequired = source.MapRequired;
            field_MapOptional = source.MapOptional;
            field_MapKey = source.MapKey;
        }

        public Basic_uint(IBasic_uint? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<UInt32>.Empty.AddRange(source.VectorRequired
                    .Select(x => (UInt32)x));
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<UInt32?>.Empty.AddRange(source.VectorOptional
                    .Select(x => (UInt32?)x));
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, UInt32>.Empty.AddRange(source.MapRequired
                    .Select(x => new KeyValuePair<String, UInt32>(x.Key, x.Value)));
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, UInt32?>.Empty.AddRange(source.MapOptional
                    .Select(x => new KeyValuePair<String, UInt32?>(x.Key, x.Value)));
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<UInt32, String?>.Empty.AddRange(source.MapKey);
        }

        public void CopyFrom(IBasic_uint? source)
        {
            if (source is null) return;
            base.CopyFrom(source);
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<UInt32>.Empty.AddRange(source.VectorRequired
                    .Select(x => (UInt32)x));
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<UInt32?>.Empty.AddRange(source.VectorOptional
                    .Select(x => (UInt32?)x));
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, UInt32>.Empty.AddRange(source.MapRequired
                    .Select(x => new KeyValuePair<String, UInt32>(x.Key, x.Value)));
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, UInt32?>.Empty.AddRange(source.MapOptional
                    .Select(x => new KeyValuePair<String, UInt32?>(x.Key, x.Value)));
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<UInt32, String?>.Empty.AddRange(source.MapKey);
        }

        public bool Equals(Basic_uint? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!base.Equals(other)) return false;
            if (!ScalarRequired.ValueEquals(other.ScalarRequired)) return false;
            if (!ScalarOptional.ValueEquals(other.ScalarOptional)) return false;
            if (!VectorRequired.ArrayEquals(other.VectorRequired)) return false;
            if (!VectorOptional.ArrayEquals(other.VectorOptional)) return false;
            if (!MapRequired.IndexEquals(other.MapRequired)) return false;
            if (!MapOptional.IndexEquals(other.MapOptional)) return false;
            if (!MapKey.IndexEquals(other.MapKey)) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is Basic_uint other && Equals(other);

        public override int GetHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(base.GetHashCode());
            hc.Add(ScalarRequired.CalcHashUnary());
            hc.Add(ScalarOptional.CalcHashUnary());
            hc.Add(VectorRequired.CalcHashArray());
            hc.Add(VectorOptional.CalcHashArray());
            hc.Add(MapRequired.CalcHashIndex());
            hc.Add(MapOptional.CalcHashIndex());
            hc.Add(MapKey.CalcHashIndex());
            return hc.ToHashCode();
        }
    }

    public sealed class Basic_float_Factory : IEntityFactory<IBasic_float, Basic_float>
    {
        private static readonly Basic_float_Factory _instance = new Basic_float_Factory();
        public static Basic_float_Factory Instance => _instance;
        public Basic_float? CreateFrom(IBasic_float? source) => (source is null) ? null : new Basic_float(source);
        public Basic_float Empty => new Basic_float();
    }
    public partial class Basic_float : EntityBase, IBasic_float, IEquatable<Basic_float>
    {
        public new const int EntityTag = 9;
        protected override int OnGetEntityTag() => EntityTag;

        private Single field_ScalarRequired;
        Single IBasic_float.ScalarRequired { get => field_ScalarRequired; }
        public Single ScalarRequired
        {
            get => field_ScalarRequired;
            set => field_ScalarRequired = value;
        }
        private Single? field_ScalarOptional;
        Single? IBasic_float.ScalarOptional => field_ScalarOptional;
        public Single? ScalarOptional
        {
            get => field_ScalarOptional;
            set => field_ScalarOptional = value;
        }
        private ImmutableList<Single>? field_VectorRequired;
        IReadOnlyList<Single>? IBasic_float.VectorRequired => field_VectorRequired is null
            ? null
            : new ListFacade<Single, Single>(field_VectorRequired, (x) => x.ToExternal());
        public ImmutableList<Single>? VectorRequired
        {
            get => field_VectorRequired;
            set => field_VectorRequired = value;
        }
        private ImmutableList<Single?>? field_VectorOptional;
        IReadOnlyList<Single?>? IBasic_float.VectorOptional => field_VectorOptional is null
            ? null
            : new ListFacade<Single?, Single?>(field_VectorOptional, (x) => x.ToExternal());
        public ImmutableList<Single?>? VectorOptional
        {
            get => field_VectorOptional;
            set => field_VectorOptional = value;
        }
        private ImmutableDictionary<String, Single>? field_MapRequired;
        IReadOnlyDictionary<String, Single>? IBasic_float.MapRequired => field_MapRequired is null
            ? null
            : new DictionaryFacade<String, Single, Single>(field_MapRequired, (x) => x.ToExternal());
        public ImmutableDictionary<String, Single>? MapRequired
        {
            get => field_MapRequired;
            set => field_MapRequired = value;
        }
        private ImmutableDictionary<String, Single?>? field_MapOptional;
        IReadOnlyDictionary<String, Single?>? IBasic_float.MapOptional => field_MapOptional is null
            ? null
            : new DictionaryFacade<String, Single?, Single?>(field_MapOptional, (x) => x.ToExternal());
        public ImmutableDictionary<String, Single?>? MapOptional
        {
            get => field_MapOptional;
            set => field_MapOptional = value;
        }
        private ImmutableDictionary<Single, String?>? field_MapKey;
        IReadOnlyDictionary<Single, String?>? IBasic_float.MapKey => field_MapKey;
        public ImmutableDictionary<Single, String?>? MapKey
        {
            get => field_MapKey;
            set => field_MapKey = value;
        }

        public Basic_float() : base()
        {
        }

        public Basic_float(Basic_float? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired;
            field_VectorOptional = source.VectorOptional;
            field_MapRequired = source.MapRequired;
            field_MapOptional = source.MapOptional;
            field_MapKey = source.MapKey;
        }

        public Basic_float(IBasic_float? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<Single>.Empty.AddRange(source.VectorRequired
                    .Select(x => (Single)x));
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<Single?>.Empty.AddRange(source.VectorOptional
                    .Select(x => (Single?)x));
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, Single>.Empty.AddRange(source.MapRequired
                    .Select(x => new KeyValuePair<String, Single>(x.Key, x.Value)));
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, Single?>.Empty.AddRange(source.MapOptional
                    .Select(x => new KeyValuePair<String, Single?>(x.Key, x.Value)));
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<Single, String?>.Empty.AddRange(source.MapKey);
        }

        public void CopyFrom(IBasic_float? source)
        {
            if (source is null) return;
            base.CopyFrom(source);
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<Single>.Empty.AddRange(source.VectorRequired
                    .Select(x => (Single)x));
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<Single?>.Empty.AddRange(source.VectorOptional
                    .Select(x => (Single?)x));
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, Single>.Empty.AddRange(source.MapRequired
                    .Select(x => new KeyValuePair<String, Single>(x.Key, x.Value)));
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, Single?>.Empty.AddRange(source.MapOptional
                    .Select(x => new KeyValuePair<String, Single?>(x.Key, x.Value)));
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<Single, String?>.Empty.AddRange(source.MapKey);
        }

        public bool Equals(Basic_float? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!base.Equals(other)) return false;
            if (!ScalarRequired.ValueEquals(other.ScalarRequired)) return false;
            if (!ScalarOptional.ValueEquals(other.ScalarOptional)) return false;
            if (!VectorRequired.ArrayEquals(other.VectorRequired)) return false;
            if (!VectorOptional.ArrayEquals(other.VectorOptional)) return false;
            if (!MapRequired.IndexEquals(other.MapRequired)) return false;
            if (!MapOptional.IndexEquals(other.MapOptional)) return false;
            if (!MapKey.IndexEquals(other.MapKey)) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is Basic_float other && Equals(other);

        public override int GetHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(base.GetHashCode());
            hc.Add(ScalarRequired.CalcHashUnary());
            hc.Add(ScalarOptional.CalcHashUnary());
            hc.Add(VectorRequired.CalcHashArray());
            hc.Add(VectorOptional.CalcHashArray());
            hc.Add(MapRequired.CalcHashIndex());
            hc.Add(MapOptional.CalcHashIndex());
            hc.Add(MapKey.CalcHashIndex());
            return hc.ToHashCode();
        }
    }

    public sealed class Basic_long_Factory : IEntityFactory<IBasic_long, Basic_long>
    {
        private static readonly Basic_long_Factory _instance = new Basic_long_Factory();
        public static Basic_long_Factory Instance => _instance;
        public Basic_long? CreateFrom(IBasic_long? source) => (source is null) ? null : new Basic_long(source);
        public Basic_long Empty => new Basic_long();
    }
    public partial class Basic_long : EntityBase, IBasic_long, IEquatable<Basic_long>
    {
        public new const int EntityTag = 10;
        protected override int OnGetEntityTag() => EntityTag;

        private Int64 field_ScalarRequired;
        Int64 IBasic_long.ScalarRequired { get => field_ScalarRequired; }
        public Int64 ScalarRequired
        {
            get => field_ScalarRequired;
            set => field_ScalarRequired = value;
        }
        private Int64? field_ScalarOptional;
        Int64? IBasic_long.ScalarOptional => field_ScalarOptional;
        public Int64? ScalarOptional
        {
            get => field_ScalarOptional;
            set => field_ScalarOptional = value;
        }
        private ImmutableList<Int64>? field_VectorRequired;
        IReadOnlyList<Int64>? IBasic_long.VectorRequired => field_VectorRequired is null
            ? null
            : new ListFacade<Int64, Int64>(field_VectorRequired, (x) => x.ToExternal());
        public ImmutableList<Int64>? VectorRequired
        {
            get => field_VectorRequired;
            set => field_VectorRequired = value;
        }
        private ImmutableList<Int64?>? field_VectorOptional;
        IReadOnlyList<Int64?>? IBasic_long.VectorOptional => field_VectorOptional is null
            ? null
            : new ListFacade<Int64?, Int64?>(field_VectorOptional, (x) => x.ToExternal());
        public ImmutableList<Int64?>? VectorOptional
        {
            get => field_VectorOptional;
            set => field_VectorOptional = value;
        }
        private ImmutableDictionary<String, Int64>? field_MapRequired;
        IReadOnlyDictionary<String, Int64>? IBasic_long.MapRequired => field_MapRequired is null
            ? null
            : new DictionaryFacade<String, Int64, Int64>(field_MapRequired, (x) => x.ToExternal());
        public ImmutableDictionary<String, Int64>? MapRequired
        {
            get => field_MapRequired;
            set => field_MapRequired = value;
        }
        private ImmutableDictionary<String, Int64?>? field_MapOptional;
        IReadOnlyDictionary<String, Int64?>? IBasic_long.MapOptional => field_MapOptional is null
            ? null
            : new DictionaryFacade<String, Int64?, Int64?>(field_MapOptional, (x) => x.ToExternal());
        public ImmutableDictionary<String, Int64?>? MapOptional
        {
            get => field_MapOptional;
            set => field_MapOptional = value;
        }
        private ImmutableDictionary<Int64, String?>? field_MapKey;
        IReadOnlyDictionary<Int64, String?>? IBasic_long.MapKey => field_MapKey;
        public ImmutableDictionary<Int64, String?>? MapKey
        {
            get => field_MapKey;
            set => field_MapKey = value;
        }

        public Basic_long() : base()
        {
        }

        public Basic_long(Basic_long? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired;
            field_VectorOptional = source.VectorOptional;
            field_MapRequired = source.MapRequired;
            field_MapOptional = source.MapOptional;
            field_MapKey = source.MapKey;
        }

        public Basic_long(IBasic_long? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<Int64>.Empty.AddRange(source.VectorRequired
                    .Select(x => (Int64)x));
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<Int64?>.Empty.AddRange(source.VectorOptional
                    .Select(x => (Int64?)x));
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, Int64>.Empty.AddRange(source.MapRequired
                    .Select(x => new KeyValuePair<String, Int64>(x.Key, x.Value)));
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, Int64?>.Empty.AddRange(source.MapOptional
                    .Select(x => new KeyValuePair<String, Int64?>(x.Key, x.Value)));
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<Int64, String?>.Empty.AddRange(source.MapKey);
        }

        public void CopyFrom(IBasic_long? source)
        {
            if (source is null) return;
            base.CopyFrom(source);
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<Int64>.Empty.AddRange(source.VectorRequired
                    .Select(x => (Int64)x));
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<Int64?>.Empty.AddRange(source.VectorOptional
                    .Select(x => (Int64?)x));
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, Int64>.Empty.AddRange(source.MapRequired
                    .Select(x => new KeyValuePair<String, Int64>(x.Key, x.Value)));
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, Int64?>.Empty.AddRange(source.MapOptional
                    .Select(x => new KeyValuePair<String, Int64?>(x.Key, x.Value)));
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<Int64, String?>.Empty.AddRange(source.MapKey);
        }

        public bool Equals(Basic_long? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!base.Equals(other)) return false;
            if (!ScalarRequired.ValueEquals(other.ScalarRequired)) return false;
            if (!ScalarOptional.ValueEquals(other.ScalarOptional)) return false;
            if (!VectorRequired.ArrayEquals(other.VectorRequired)) return false;
            if (!VectorOptional.ArrayEquals(other.VectorOptional)) return false;
            if (!MapRequired.IndexEquals(other.MapRequired)) return false;
            if (!MapOptional.IndexEquals(other.MapOptional)) return false;
            if (!MapKey.IndexEquals(other.MapKey)) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is Basic_long other && Equals(other);

        public override int GetHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(base.GetHashCode());
            hc.Add(ScalarRequired.CalcHashUnary());
            hc.Add(ScalarOptional.CalcHashUnary());
            hc.Add(VectorRequired.CalcHashArray());
            hc.Add(VectorOptional.CalcHashArray());
            hc.Add(MapRequired.CalcHashIndex());
            hc.Add(MapOptional.CalcHashIndex());
            hc.Add(MapKey.CalcHashIndex());
            return hc.ToHashCode();
        }
    }

    public sealed class Basic_ulong_Factory : IEntityFactory<IBasic_ulong, Basic_ulong>
    {
        private static readonly Basic_ulong_Factory _instance = new Basic_ulong_Factory();
        public static Basic_ulong_Factory Instance => _instance;
        public Basic_ulong? CreateFrom(IBasic_ulong? source) => (source is null) ? null : new Basic_ulong(source);
        public Basic_ulong Empty => new Basic_ulong();
    }
    public partial class Basic_ulong : EntityBase, IBasic_ulong, IEquatable<Basic_ulong>
    {
        public new const int EntityTag = 11;
        protected override int OnGetEntityTag() => EntityTag;

        private UInt64 field_ScalarRequired;
        UInt64 IBasic_ulong.ScalarRequired { get => field_ScalarRequired; }
        public UInt64 ScalarRequired
        {
            get => field_ScalarRequired;
            set => field_ScalarRequired = value;
        }
        private UInt64? field_ScalarOptional;
        UInt64? IBasic_ulong.ScalarOptional => field_ScalarOptional;
        public UInt64? ScalarOptional
        {
            get => field_ScalarOptional;
            set => field_ScalarOptional = value;
        }
        private ImmutableList<UInt64>? field_VectorRequired;
        IReadOnlyList<UInt64>? IBasic_ulong.VectorRequired => field_VectorRequired is null
            ? null
            : new ListFacade<UInt64, UInt64>(field_VectorRequired, (x) => x.ToExternal());
        public ImmutableList<UInt64>? VectorRequired
        {
            get => field_VectorRequired;
            set => field_VectorRequired = value;
        }
        private ImmutableList<UInt64?>? field_VectorOptional;
        IReadOnlyList<UInt64?>? IBasic_ulong.VectorOptional => field_VectorOptional is null
            ? null
            : new ListFacade<UInt64?, UInt64?>(field_VectorOptional, (x) => x.ToExternal());
        public ImmutableList<UInt64?>? VectorOptional
        {
            get => field_VectorOptional;
            set => field_VectorOptional = value;
        }
        private ImmutableDictionary<String, UInt64>? field_MapRequired;
        IReadOnlyDictionary<String, UInt64>? IBasic_ulong.MapRequired => field_MapRequired is null
            ? null
            : new DictionaryFacade<String, UInt64, UInt64>(field_MapRequired, (x) => x.ToExternal());
        public ImmutableDictionary<String, UInt64>? MapRequired
        {
            get => field_MapRequired;
            set => field_MapRequired = value;
        }
        private ImmutableDictionary<String, UInt64?>? field_MapOptional;
        IReadOnlyDictionary<String, UInt64?>? IBasic_ulong.MapOptional => field_MapOptional is null
            ? null
            : new DictionaryFacade<String, UInt64?, UInt64?>(field_MapOptional, (x) => x.ToExternal());
        public ImmutableDictionary<String, UInt64?>? MapOptional
        {
            get => field_MapOptional;
            set => field_MapOptional = value;
        }
        private ImmutableDictionary<UInt64, String?>? field_MapKey;
        IReadOnlyDictionary<UInt64, String?>? IBasic_ulong.MapKey => field_MapKey;
        public ImmutableDictionary<UInt64, String?>? MapKey
        {
            get => field_MapKey;
            set => field_MapKey = value;
        }

        public Basic_ulong() : base()
        {
        }

        public Basic_ulong(Basic_ulong? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired;
            field_VectorOptional = source.VectorOptional;
            field_MapRequired = source.MapRequired;
            field_MapOptional = source.MapOptional;
            field_MapKey = source.MapKey;
        }

        public Basic_ulong(IBasic_ulong? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<UInt64>.Empty.AddRange(source.VectorRequired
                    .Select(x => (UInt64)x));
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<UInt64?>.Empty.AddRange(source.VectorOptional
                    .Select(x => (UInt64?)x));
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, UInt64>.Empty.AddRange(source.MapRequired
                    .Select(x => new KeyValuePair<String, UInt64>(x.Key, x.Value)));
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, UInt64?>.Empty.AddRange(source.MapOptional
                    .Select(x => new KeyValuePair<String, UInt64?>(x.Key, x.Value)));
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<UInt64, String?>.Empty.AddRange(source.MapKey);
        }

        public void CopyFrom(IBasic_ulong? source)
        {
            if (source is null) return;
            base.CopyFrom(source);
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<UInt64>.Empty.AddRange(source.VectorRequired
                    .Select(x => (UInt64)x));
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<UInt64?>.Empty.AddRange(source.VectorOptional
                    .Select(x => (UInt64?)x));
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, UInt64>.Empty.AddRange(source.MapRequired
                    .Select(x => new KeyValuePair<String, UInt64>(x.Key, x.Value)));
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, UInt64?>.Empty.AddRange(source.MapOptional
                    .Select(x => new KeyValuePair<String, UInt64?>(x.Key, x.Value)));
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<UInt64, String?>.Empty.AddRange(source.MapKey);
        }

        public bool Equals(Basic_ulong? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!base.Equals(other)) return false;
            if (!ScalarRequired.ValueEquals(other.ScalarRequired)) return false;
            if (!ScalarOptional.ValueEquals(other.ScalarOptional)) return false;
            if (!VectorRequired.ArrayEquals(other.VectorRequired)) return false;
            if (!VectorOptional.ArrayEquals(other.VectorOptional)) return false;
            if (!MapRequired.IndexEquals(other.MapRequired)) return false;
            if (!MapOptional.IndexEquals(other.MapOptional)) return false;
            if (!MapKey.IndexEquals(other.MapKey)) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is Basic_ulong other && Equals(other);

        public override int GetHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(base.GetHashCode());
            hc.Add(ScalarRequired.CalcHashUnary());
            hc.Add(ScalarOptional.CalcHashUnary());
            hc.Add(VectorRequired.CalcHashArray());
            hc.Add(VectorOptional.CalcHashArray());
            hc.Add(MapRequired.CalcHashIndex());
            hc.Add(MapOptional.CalcHashIndex());
            hc.Add(MapKey.CalcHashIndex());
            return hc.ToHashCode();
        }
    }

    public sealed class Basic_double_Factory : IEntityFactory<IBasic_double, Basic_double>
    {
        private static readonly Basic_double_Factory _instance = new Basic_double_Factory();
        public static Basic_double_Factory Instance => _instance;
        public Basic_double? CreateFrom(IBasic_double? source) => (source is null) ? null : new Basic_double(source);
        public Basic_double Empty => new Basic_double();
    }
    public partial class Basic_double : EntityBase, IBasic_double, IEquatable<Basic_double>
    {
        public new const int EntityTag = 12;
        protected override int OnGetEntityTag() => EntityTag;

        private Double field_ScalarRequired;
        Double IBasic_double.ScalarRequired { get => field_ScalarRequired; }
        public Double ScalarRequired
        {
            get => field_ScalarRequired;
            set => field_ScalarRequired = value;
        }
        private Double? field_ScalarOptional;
        Double? IBasic_double.ScalarOptional => field_ScalarOptional;
        public Double? ScalarOptional
        {
            get => field_ScalarOptional;
            set => field_ScalarOptional = value;
        }
        private ImmutableList<Double>? field_VectorRequired;
        IReadOnlyList<Double>? IBasic_double.VectorRequired => field_VectorRequired is null
            ? null
            : new ListFacade<Double, Double>(field_VectorRequired, (x) => x.ToExternal());
        public ImmutableList<Double>? VectorRequired
        {
            get => field_VectorRequired;
            set => field_VectorRequired = value;
        }
        private ImmutableList<Double?>? field_VectorOptional;
        IReadOnlyList<Double?>? IBasic_double.VectorOptional => field_VectorOptional is null
            ? null
            : new ListFacade<Double?, Double?>(field_VectorOptional, (x) => x.ToExternal());
        public ImmutableList<Double?>? VectorOptional
        {
            get => field_VectorOptional;
            set => field_VectorOptional = value;
        }
        private ImmutableDictionary<String, Double>? field_MapRequired;
        IReadOnlyDictionary<String, Double>? IBasic_double.MapRequired => field_MapRequired is null
            ? null
            : new DictionaryFacade<String, Double, Double>(field_MapRequired, (x) => x.ToExternal());
        public ImmutableDictionary<String, Double>? MapRequired
        {
            get => field_MapRequired;
            set => field_MapRequired = value;
        }
        private ImmutableDictionary<String, Double?>? field_MapOptional;
        IReadOnlyDictionary<String, Double?>? IBasic_double.MapOptional => field_MapOptional is null
            ? null
            : new DictionaryFacade<String, Double?, Double?>(field_MapOptional, (x) => x.ToExternal());
        public ImmutableDictionary<String, Double?>? MapOptional
        {
            get => field_MapOptional;
            set => field_MapOptional = value;
        }
        private ImmutableDictionary<Double, String?>? field_MapKey;
        IReadOnlyDictionary<Double, String?>? IBasic_double.MapKey => field_MapKey;
        public ImmutableDictionary<Double, String?>? MapKey
        {
            get => field_MapKey;
            set => field_MapKey = value;
        }

        public Basic_double() : base()
        {
        }

        public Basic_double(Basic_double? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired;
            field_VectorOptional = source.VectorOptional;
            field_MapRequired = source.MapRequired;
            field_MapOptional = source.MapOptional;
            field_MapKey = source.MapKey;
        }

        public Basic_double(IBasic_double? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<Double>.Empty.AddRange(source.VectorRequired
                    .Select(x => (Double)x));
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<Double?>.Empty.AddRange(source.VectorOptional
                    .Select(x => (Double?)x));
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, Double>.Empty.AddRange(source.MapRequired
                    .Select(x => new KeyValuePair<String, Double>(x.Key, x.Value)));
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, Double?>.Empty.AddRange(source.MapOptional
                    .Select(x => new KeyValuePair<String, Double?>(x.Key, x.Value)));
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<Double, String?>.Empty.AddRange(source.MapKey);
        }

        public void CopyFrom(IBasic_double? source)
        {
            if (source is null) return;
            base.CopyFrom(source);
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<Double>.Empty.AddRange(source.VectorRequired
                    .Select(x => (Double)x));
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<Double?>.Empty.AddRange(source.VectorOptional
                    .Select(x => (Double?)x));
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, Double>.Empty.AddRange(source.MapRequired
                    .Select(x => new KeyValuePair<String, Double>(x.Key, x.Value)));
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, Double?>.Empty.AddRange(source.MapOptional
                    .Select(x => new KeyValuePair<String, Double?>(x.Key, x.Value)));
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<Double, String?>.Empty.AddRange(source.MapKey);
        }

        public bool Equals(Basic_double? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!base.Equals(other)) return false;
            if (!ScalarRequired.ValueEquals(other.ScalarRequired)) return false;
            if (!ScalarOptional.ValueEquals(other.ScalarOptional)) return false;
            if (!VectorRequired.ArrayEquals(other.VectorRequired)) return false;
            if (!VectorOptional.ArrayEquals(other.VectorOptional)) return false;
            if (!MapRequired.IndexEquals(other.MapRequired)) return false;
            if (!MapOptional.IndexEquals(other.MapOptional)) return false;
            if (!MapKey.IndexEquals(other.MapKey)) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is Basic_double other && Equals(other);

        public override int GetHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(base.GetHashCode());
            hc.Add(ScalarRequired.CalcHashUnary());
            hc.Add(ScalarOptional.CalcHashUnary());
            hc.Add(VectorRequired.CalcHashArray());
            hc.Add(VectorOptional.CalcHashArray());
            hc.Add(MapRequired.CalcHashIndex());
            hc.Add(MapOptional.CalcHashIndex());
            hc.Add(MapKey.CalcHashIndex());
            return hc.ToHashCode();
        }
    }

    public sealed class Basic_DateTime_Factory : IEntityFactory<IBasic_DateTime, Basic_DateTime>
    {
        private static readonly Basic_DateTime_Factory _instance = new Basic_DateTime_Factory();
        public static Basic_DateTime_Factory Instance => _instance;
        public Basic_DateTime? CreateFrom(IBasic_DateTime? source) => (source is null) ? null : new Basic_DateTime(source);
        public Basic_DateTime Empty => new Basic_DateTime();
    }
    public partial class Basic_DateTime : EntityBase, IBasic_DateTime, IEquatable<Basic_DateTime>
    {
        public new const int EntityTag = 13;
        protected override int OnGetEntityTag() => EntityTag;

        private DateTime field_ScalarRequired;
        DateTime IBasic_DateTime.ScalarRequired { get => field_ScalarRequired; }
        public DateTime ScalarRequired
        {
            get => field_ScalarRequired;
            set => field_ScalarRequired = value;
        }
        private DateTime? field_ScalarOptional;
        DateTime? IBasic_DateTime.ScalarOptional => field_ScalarOptional;
        public DateTime? ScalarOptional
        {
            get => field_ScalarOptional;
            set => field_ScalarOptional = value;
        }
        private ImmutableList<DateTime>? field_VectorRequired;
        IReadOnlyList<DateTime>? IBasic_DateTime.VectorRequired => field_VectorRequired is null
            ? null
            : new ListFacade<DateTime, DateTime>(field_VectorRequired, (x) => x.ToExternal());
        public ImmutableList<DateTime>? VectorRequired
        {
            get => field_VectorRequired;
            set => field_VectorRequired = value;
        }
        private ImmutableList<DateTime?>? field_VectorOptional;
        IReadOnlyList<DateTime?>? IBasic_DateTime.VectorOptional => field_VectorOptional is null
            ? null
            : new ListFacade<DateTime?, DateTime?>(field_VectorOptional, (x) => x.ToExternal());
        public ImmutableList<DateTime?>? VectorOptional
        {
            get => field_VectorOptional;
            set => field_VectorOptional = value;
        }
        private ImmutableDictionary<String, DateTime>? field_MapRequired;
        IReadOnlyDictionary<String, DateTime>? IBasic_DateTime.MapRequired => field_MapRequired is null
            ? null
            : new DictionaryFacade<String, DateTime, DateTime>(field_MapRequired, (x) => x.ToExternal());
        public ImmutableDictionary<String, DateTime>? MapRequired
        {
            get => field_MapRequired;
            set => field_MapRequired = value;
        }
        private ImmutableDictionary<String, DateTime?>? field_MapOptional;
        IReadOnlyDictionary<String, DateTime?>? IBasic_DateTime.MapOptional => field_MapOptional is null
            ? null
            : new DictionaryFacade<String, DateTime?, DateTime?>(field_MapOptional, (x) => x.ToExternal());
        public ImmutableDictionary<String, DateTime?>? MapOptional
        {
            get => field_MapOptional;
            set => field_MapOptional = value;
        }
        private ImmutableDictionary<DateTime, String?>? field_MapKey;
        IReadOnlyDictionary<DateTime, String?>? IBasic_DateTime.MapKey => field_MapKey;
        public ImmutableDictionary<DateTime, String?>? MapKey
        {
            get => field_MapKey;
            set => field_MapKey = value;
        }

        public Basic_DateTime() : base()
        {
        }

        public Basic_DateTime(Basic_DateTime? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired;
            field_VectorOptional = source.VectorOptional;
            field_MapRequired = source.MapRequired;
            field_MapOptional = source.MapOptional;
            field_MapKey = source.MapKey;
        }

        public Basic_DateTime(IBasic_DateTime? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<DateTime>.Empty.AddRange(source.VectorRequired
                    .Select(x => (DateTime)x));
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<DateTime?>.Empty.AddRange(source.VectorOptional
                    .Select(x => (DateTime?)x));
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, DateTime>.Empty.AddRange(source.MapRequired
                    .Select(x => new KeyValuePair<String, DateTime>(x.Key, x.Value)));
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, DateTime?>.Empty.AddRange(source.MapOptional
                    .Select(x => new KeyValuePair<String, DateTime?>(x.Key, x.Value)));
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<DateTime, String?>.Empty.AddRange(source.MapKey);
        }

        public void CopyFrom(IBasic_DateTime? source)
        {
            if (source is null) return;
            base.CopyFrom(source);
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<DateTime>.Empty.AddRange(source.VectorRequired
                    .Select(x => (DateTime)x));
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<DateTime?>.Empty.AddRange(source.VectorOptional
                    .Select(x => (DateTime?)x));
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, DateTime>.Empty.AddRange(source.MapRequired
                    .Select(x => new KeyValuePair<String, DateTime>(x.Key, x.Value)));
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, DateTime?>.Empty.AddRange(source.MapOptional
                    .Select(x => new KeyValuePair<String, DateTime?>(x.Key, x.Value)));
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<DateTime, String?>.Empty.AddRange(source.MapKey);
        }

        public bool Equals(Basic_DateTime? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!base.Equals(other)) return false;
            if (!ScalarRequired.ValueEquals(other.ScalarRequired)) return false;
            if (!ScalarOptional.ValueEquals(other.ScalarOptional)) return false;
            if (!VectorRequired.ArrayEquals(other.VectorRequired)) return false;
            if (!VectorOptional.ArrayEquals(other.VectorOptional)) return false;
            if (!MapRequired.IndexEquals(other.MapRequired)) return false;
            if (!MapOptional.IndexEquals(other.MapOptional)) return false;
            if (!MapKey.IndexEquals(other.MapKey)) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is Basic_DateTime other && Equals(other);

        public override int GetHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(base.GetHashCode());
            hc.Add(ScalarRequired.CalcHashUnary());
            hc.Add(ScalarOptional.CalcHashUnary());
            hc.Add(VectorRequired.CalcHashArray());
            hc.Add(VectorOptional.CalcHashArray());
            hc.Add(MapRequired.CalcHashIndex());
            hc.Add(MapOptional.CalcHashIndex());
            hc.Add(MapKey.CalcHashIndex());
            return hc.ToHashCode();
        }
    }

    public sealed class Basic_TimeSpan_Factory : IEntityFactory<IBasic_TimeSpan, Basic_TimeSpan>
    {
        private static readonly Basic_TimeSpan_Factory _instance = new Basic_TimeSpan_Factory();
        public static Basic_TimeSpan_Factory Instance => _instance;
        public Basic_TimeSpan? CreateFrom(IBasic_TimeSpan? source) => (source is null) ? null : new Basic_TimeSpan(source);
        public Basic_TimeSpan Empty => new Basic_TimeSpan();
    }
    public partial class Basic_TimeSpan : EntityBase, IBasic_TimeSpan, IEquatable<Basic_TimeSpan>
    {
        public new const int EntityTag = 14;
        protected override int OnGetEntityTag() => EntityTag;

        private TimeSpan field_ScalarRequired;
        TimeSpan IBasic_TimeSpan.ScalarRequired { get => field_ScalarRequired; }
        public TimeSpan ScalarRequired
        {
            get => field_ScalarRequired;
            set => field_ScalarRequired = value;
        }
        private TimeSpan? field_ScalarOptional;
        TimeSpan? IBasic_TimeSpan.ScalarOptional => field_ScalarOptional;
        public TimeSpan? ScalarOptional
        {
            get => field_ScalarOptional;
            set => field_ScalarOptional = value;
        }
        private ImmutableList<TimeSpan>? field_VectorRequired;
        IReadOnlyList<TimeSpan>? IBasic_TimeSpan.VectorRequired => field_VectorRequired is null
            ? null
            : new ListFacade<TimeSpan, TimeSpan>(field_VectorRequired, (x) => x.ToExternal());
        public ImmutableList<TimeSpan>? VectorRequired
        {
            get => field_VectorRequired;
            set => field_VectorRequired = value;
        }
        private ImmutableList<TimeSpan?>? field_VectorOptional;
        IReadOnlyList<TimeSpan?>? IBasic_TimeSpan.VectorOptional => field_VectorOptional is null
            ? null
            : new ListFacade<TimeSpan?, TimeSpan?>(field_VectorOptional, (x) => x.ToExternal());
        public ImmutableList<TimeSpan?>? VectorOptional
        {
            get => field_VectorOptional;
            set => field_VectorOptional = value;
        }
        private ImmutableDictionary<String, TimeSpan>? field_MapRequired;
        IReadOnlyDictionary<String, TimeSpan>? IBasic_TimeSpan.MapRequired => field_MapRequired is null
            ? null
            : new DictionaryFacade<String, TimeSpan, TimeSpan>(field_MapRequired, (x) => x.ToExternal());
        public ImmutableDictionary<String, TimeSpan>? MapRequired
        {
            get => field_MapRequired;
            set => field_MapRequired = value;
        }
        private ImmutableDictionary<String, TimeSpan?>? field_MapOptional;
        IReadOnlyDictionary<String, TimeSpan?>? IBasic_TimeSpan.MapOptional => field_MapOptional is null
            ? null
            : new DictionaryFacade<String, TimeSpan?, TimeSpan?>(field_MapOptional, (x) => x.ToExternal());
        public ImmutableDictionary<String, TimeSpan?>? MapOptional
        {
            get => field_MapOptional;
            set => field_MapOptional = value;
        }
        private ImmutableDictionary<TimeSpan, String?>? field_MapKey;
        IReadOnlyDictionary<TimeSpan, String?>? IBasic_TimeSpan.MapKey => field_MapKey;
        public ImmutableDictionary<TimeSpan, String?>? MapKey
        {
            get => field_MapKey;
            set => field_MapKey = value;
        }

        public Basic_TimeSpan() : base()
        {
        }

        public Basic_TimeSpan(Basic_TimeSpan? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired;
            field_VectorOptional = source.VectorOptional;
            field_MapRequired = source.MapRequired;
            field_MapOptional = source.MapOptional;
            field_MapKey = source.MapKey;
        }

        public Basic_TimeSpan(IBasic_TimeSpan? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<TimeSpan>.Empty.AddRange(source.VectorRequired
                    .Select(x => (TimeSpan)x));
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<TimeSpan?>.Empty.AddRange(source.VectorOptional
                    .Select(x => (TimeSpan?)x));
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, TimeSpan>.Empty.AddRange(source.MapRequired
                    .Select(x => new KeyValuePair<String, TimeSpan>(x.Key, x.Value)));
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, TimeSpan?>.Empty.AddRange(source.MapOptional
                    .Select(x => new KeyValuePair<String, TimeSpan?>(x.Key, x.Value)));
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<TimeSpan, String?>.Empty.AddRange(source.MapKey);
        }

        public void CopyFrom(IBasic_TimeSpan? source)
        {
            if (source is null) return;
            base.CopyFrom(source);
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<TimeSpan>.Empty.AddRange(source.VectorRequired
                    .Select(x => (TimeSpan)x));
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<TimeSpan?>.Empty.AddRange(source.VectorOptional
                    .Select(x => (TimeSpan?)x));
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, TimeSpan>.Empty.AddRange(source.MapRequired
                    .Select(x => new KeyValuePair<String, TimeSpan>(x.Key, x.Value)));
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, TimeSpan?>.Empty.AddRange(source.MapOptional
                    .Select(x => new KeyValuePair<String, TimeSpan?>(x.Key, x.Value)));
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<TimeSpan, String?>.Empty.AddRange(source.MapKey);
        }

        public bool Equals(Basic_TimeSpan? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!base.Equals(other)) return false;
            if (!ScalarRequired.ValueEquals(other.ScalarRequired)) return false;
            if (!ScalarOptional.ValueEquals(other.ScalarOptional)) return false;
            if (!VectorRequired.ArrayEquals(other.VectorRequired)) return false;
            if (!VectorOptional.ArrayEquals(other.VectorOptional)) return false;
            if (!MapRequired.IndexEquals(other.MapRequired)) return false;
            if (!MapOptional.IndexEquals(other.MapOptional)) return false;
            if (!MapKey.IndexEquals(other.MapKey)) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is Basic_TimeSpan other && Equals(other);

        public override int GetHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(base.GetHashCode());
            hc.Add(ScalarRequired.CalcHashUnary());
            hc.Add(ScalarOptional.CalcHashUnary());
            hc.Add(VectorRequired.CalcHashArray());
            hc.Add(VectorOptional.CalcHashArray());
            hc.Add(MapRequired.CalcHashIndex());
            hc.Add(MapOptional.CalcHashIndex());
            hc.Add(MapKey.CalcHashIndex());
            return hc.ToHashCode();
        }
    }

    public sealed class Basic_decimal_Factory : IEntityFactory<IBasic_decimal, Basic_decimal>
    {
        private static readonly Basic_decimal_Factory _instance = new Basic_decimal_Factory();
        public static Basic_decimal_Factory Instance => _instance;
        public Basic_decimal? CreateFrom(IBasic_decimal? source) => (source is null) ? null : new Basic_decimal(source);
        public Basic_decimal Empty => new Basic_decimal();
    }
    public partial class Basic_decimal : EntityBase, IBasic_decimal, IEquatable<Basic_decimal>
    {
        public new const int EntityTag = 17;
        protected override int OnGetEntityTag() => EntityTag;

        private Decimal field_ScalarRequired;
        Decimal IBasic_decimal.ScalarRequired { get => field_ScalarRequired; }
        public Decimal ScalarRequired
        {
            get => field_ScalarRequired;
            set => field_ScalarRequired = value;
        }
        private Decimal? field_ScalarOptional;
        Decimal? IBasic_decimal.ScalarOptional => field_ScalarOptional;
        public Decimal? ScalarOptional
        {
            get => field_ScalarOptional;
            set => field_ScalarOptional = value;
        }
        private ImmutableList<Decimal>? field_VectorRequired;
        IReadOnlyList<Decimal>? IBasic_decimal.VectorRequired => field_VectorRequired is null
            ? null
            : new ListFacade<Decimal, Decimal>(field_VectorRequired, (x) => x.ToExternal());
        public ImmutableList<Decimal>? VectorRequired
        {
            get => field_VectorRequired;
            set => field_VectorRequired = value;
        }
        private ImmutableList<Decimal?>? field_VectorOptional;
        IReadOnlyList<Decimal?>? IBasic_decimal.VectorOptional => field_VectorOptional is null
            ? null
            : new ListFacade<Decimal?, Decimal?>(field_VectorOptional, (x) => x.ToExternal());
        public ImmutableList<Decimal?>? VectorOptional
        {
            get => field_VectorOptional;
            set => field_VectorOptional = value;
        }
        private ImmutableDictionary<String, Decimal>? field_MapRequired;
        IReadOnlyDictionary<String, Decimal>? IBasic_decimal.MapRequired => field_MapRequired is null
            ? null
            : new DictionaryFacade<String, Decimal, Decimal>(field_MapRequired, (x) => x.ToExternal());
        public ImmutableDictionary<String, Decimal>? MapRequired
        {
            get => field_MapRequired;
            set => field_MapRequired = value;
        }
        private ImmutableDictionary<String, Decimal?>? field_MapOptional;
        IReadOnlyDictionary<String, Decimal?>? IBasic_decimal.MapOptional => field_MapOptional is null
            ? null
            : new DictionaryFacade<String, Decimal?, Decimal?>(field_MapOptional, (x) => x.ToExternal());
        public ImmutableDictionary<String, Decimal?>? MapOptional
        {
            get => field_MapOptional;
            set => field_MapOptional = value;
        }
        private ImmutableDictionary<Decimal, String?>? field_MapKey;
        IReadOnlyDictionary<Decimal, String?>? IBasic_decimal.MapKey => field_MapKey;
        public ImmutableDictionary<Decimal, String?>? MapKey
        {
            get => field_MapKey;
            set => field_MapKey = value;
        }

        public Basic_decimal() : base()
        {
        }

        public Basic_decimal(Basic_decimal? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired;
            field_VectorOptional = source.VectorOptional;
            field_MapRequired = source.MapRequired;
            field_MapOptional = source.MapOptional;
            field_MapKey = source.MapKey;
        }

        public Basic_decimal(IBasic_decimal? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<Decimal>.Empty.AddRange(source.VectorRequired
                    .Select(x => (Decimal)x));
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<Decimal?>.Empty.AddRange(source.VectorOptional
                    .Select(x => (Decimal?)x));
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, Decimal>.Empty.AddRange(source.MapRequired
                    .Select(x => new KeyValuePair<String, Decimal>(x.Key, x.Value)));
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, Decimal?>.Empty.AddRange(source.MapOptional
                    .Select(x => new KeyValuePair<String, Decimal?>(x.Key, x.Value)));
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<Decimal, String?>.Empty.AddRange(source.MapKey);
        }

        public void CopyFrom(IBasic_decimal? source)
        {
            if (source is null) return;
            base.CopyFrom(source);
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<Decimal>.Empty.AddRange(source.VectorRequired
                    .Select(x => (Decimal)x));
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<Decimal?>.Empty.AddRange(source.VectorOptional
                    .Select(x => (Decimal?)x));
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, Decimal>.Empty.AddRange(source.MapRequired
                    .Select(x => new KeyValuePair<String, Decimal>(x.Key, x.Value)));
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, Decimal?>.Empty.AddRange(source.MapOptional
                    .Select(x => new KeyValuePair<String, Decimal?>(x.Key, x.Value)));
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<Decimal, String?>.Empty.AddRange(source.MapKey);
        }

        public bool Equals(Basic_decimal? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!base.Equals(other)) return false;
            if (!ScalarRequired.ValueEquals(other.ScalarRequired)) return false;
            if (!ScalarOptional.ValueEquals(other.ScalarOptional)) return false;
            if (!VectorRequired.ArrayEquals(other.VectorRequired)) return false;
            if (!VectorOptional.ArrayEquals(other.VectorOptional)) return false;
            if (!MapRequired.IndexEquals(other.MapRequired)) return false;
            if (!MapOptional.IndexEquals(other.MapOptional)) return false;
            if (!MapKey.IndexEquals(other.MapKey)) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is Basic_decimal other && Equals(other);

        public override int GetHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(base.GetHashCode());
            hc.Add(ScalarRequired.CalcHashUnary());
            hc.Add(ScalarOptional.CalcHashUnary());
            hc.Add(VectorRequired.CalcHashArray());
            hc.Add(VectorOptional.CalcHashArray());
            hc.Add(MapRequired.CalcHashIndex());
            hc.Add(MapOptional.CalcHashIndex());
            hc.Add(MapKey.CalcHashIndex());
            return hc.ToHashCode();
        }
    }

    public sealed class Basic_DateTimeOffset_Factory : IEntityFactory<IBasic_DateTimeOffset, Basic_DateTimeOffset>
    {
        private static readonly Basic_DateTimeOffset_Factory _instance = new Basic_DateTimeOffset_Factory();
        public static Basic_DateTimeOffset_Factory Instance => _instance;
        public Basic_DateTimeOffset? CreateFrom(IBasic_DateTimeOffset? source) => (source is null) ? null : new Basic_DateTimeOffset(source);
        public Basic_DateTimeOffset Empty => new Basic_DateTimeOffset();
    }
    public partial class Basic_DateTimeOffset : EntityBase, IBasic_DateTimeOffset, IEquatable<Basic_DateTimeOffset>
    {
        public new const int EntityTag = 18;
        protected override int OnGetEntityTag() => EntityTag;

        private DateTimeOffset field_ScalarRequired;
        DateTimeOffset IBasic_DateTimeOffset.ScalarRequired { get => field_ScalarRequired; }
        public DateTimeOffset ScalarRequired
        {
            get => field_ScalarRequired;
            set => field_ScalarRequired = value;
        }
        private DateTimeOffset? field_ScalarOptional;
        DateTimeOffset? IBasic_DateTimeOffset.ScalarOptional => field_ScalarOptional;
        public DateTimeOffset? ScalarOptional
        {
            get => field_ScalarOptional;
            set => field_ScalarOptional = value;
        }
        private ImmutableList<DateTimeOffset>? field_VectorRequired;
        IReadOnlyList<DateTimeOffset>? IBasic_DateTimeOffset.VectorRequired => field_VectorRequired is null
            ? null
            : new ListFacade<DateTimeOffset, DateTimeOffset>(field_VectorRequired, (x) => x.ToExternal());
        public ImmutableList<DateTimeOffset>? VectorRequired
        {
            get => field_VectorRequired;
            set => field_VectorRequired = value;
        }
        private ImmutableList<DateTimeOffset?>? field_VectorOptional;
        IReadOnlyList<DateTimeOffset?>? IBasic_DateTimeOffset.VectorOptional => field_VectorOptional is null
            ? null
            : new ListFacade<DateTimeOffset?, DateTimeOffset?>(field_VectorOptional, (x) => x.ToExternal());
        public ImmutableList<DateTimeOffset?>? VectorOptional
        {
            get => field_VectorOptional;
            set => field_VectorOptional = value;
        }
        private ImmutableDictionary<String, DateTimeOffset>? field_MapRequired;
        IReadOnlyDictionary<String, DateTimeOffset>? IBasic_DateTimeOffset.MapRequired => field_MapRequired is null
            ? null
            : new DictionaryFacade<String, DateTimeOffset, DateTimeOffset>(field_MapRequired, (x) => x.ToExternal());
        public ImmutableDictionary<String, DateTimeOffset>? MapRequired
        {
            get => field_MapRequired;
            set => field_MapRequired = value;
        }
        private ImmutableDictionary<String, DateTimeOffset?>? field_MapOptional;
        IReadOnlyDictionary<String, DateTimeOffset?>? IBasic_DateTimeOffset.MapOptional => field_MapOptional is null
            ? null
            : new DictionaryFacade<String, DateTimeOffset?, DateTimeOffset?>(field_MapOptional, (x) => x.ToExternal());
        public ImmutableDictionary<String, DateTimeOffset?>? MapOptional
        {
            get => field_MapOptional;
            set => field_MapOptional = value;
        }
        private ImmutableDictionary<DateTimeOffset, String?>? field_MapKey;
        IReadOnlyDictionary<DateTimeOffset, String?>? IBasic_DateTimeOffset.MapKey => field_MapKey;
        public ImmutableDictionary<DateTimeOffset, String?>? MapKey
        {
            get => field_MapKey;
            set => field_MapKey = value;
        }

        public Basic_DateTimeOffset() : base()
        {
        }

        public Basic_DateTimeOffset(Basic_DateTimeOffset? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired;
            field_VectorOptional = source.VectorOptional;
            field_MapRequired = source.MapRequired;
            field_MapOptional = source.MapOptional;
            field_MapKey = source.MapKey;
        }

        public Basic_DateTimeOffset(IBasic_DateTimeOffset? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<DateTimeOffset>.Empty.AddRange(source.VectorRequired
                    .Select(x => (DateTimeOffset)x));
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<DateTimeOffset?>.Empty.AddRange(source.VectorOptional
                    .Select(x => (DateTimeOffset?)x));
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, DateTimeOffset>.Empty.AddRange(source.MapRequired
                    .Select(x => new KeyValuePair<String, DateTimeOffset>(x.Key, x.Value)));
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, DateTimeOffset?>.Empty.AddRange(source.MapOptional
                    .Select(x => new KeyValuePair<String, DateTimeOffset?>(x.Key, x.Value)));
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<DateTimeOffset, String?>.Empty.AddRange(source.MapKey);
        }

        public void CopyFrom(IBasic_DateTimeOffset? source)
        {
            if (source is null) return;
            base.CopyFrom(source);
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<DateTimeOffset>.Empty.AddRange(source.VectorRequired
                    .Select(x => (DateTimeOffset)x));
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<DateTimeOffset?>.Empty.AddRange(source.VectorOptional
                    .Select(x => (DateTimeOffset?)x));
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, DateTimeOffset>.Empty.AddRange(source.MapRequired
                    .Select(x => new KeyValuePair<String, DateTimeOffset>(x.Key, x.Value)));
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, DateTimeOffset?>.Empty.AddRange(source.MapOptional
                    .Select(x => new KeyValuePair<String, DateTimeOffset?>(x.Key, x.Value)));
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<DateTimeOffset, String?>.Empty.AddRange(source.MapKey);
        }

        public bool Equals(Basic_DateTimeOffset? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!base.Equals(other)) return false;
            if (!ScalarRequired.ValueEquals(other.ScalarRequired)) return false;
            if (!ScalarOptional.ValueEquals(other.ScalarOptional)) return false;
            if (!VectorRequired.ArrayEquals(other.VectorRequired)) return false;
            if (!VectorOptional.ArrayEquals(other.VectorOptional)) return false;
            if (!MapRequired.IndexEquals(other.MapRequired)) return false;
            if (!MapOptional.IndexEquals(other.MapOptional)) return false;
            if (!MapKey.IndexEquals(other.MapKey)) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is Basic_DateTimeOffset other && Equals(other);

        public override int GetHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(base.GetHashCode());
            hc.Add(ScalarRequired.CalcHashUnary());
            hc.Add(ScalarOptional.CalcHashUnary());
            hc.Add(VectorRequired.CalcHashArray());
            hc.Add(VectorOptional.CalcHashArray());
            hc.Add(MapRequired.CalcHashIndex());
            hc.Add(MapOptional.CalcHashIndex());
            hc.Add(MapKey.CalcHashIndex());
            return hc.ToHashCode();
        }
    }

    public sealed class Basic_Guid_Factory : IEntityFactory<IBasic_Guid, Basic_Guid>
    {
        private static readonly Basic_Guid_Factory _instance = new Basic_Guid_Factory();
        public static Basic_Guid_Factory Instance => _instance;
        public Basic_Guid? CreateFrom(IBasic_Guid? source) => (source is null) ? null : new Basic_Guid(source);
        public Basic_Guid Empty => new Basic_Guid();
    }
    public partial class Basic_Guid : EntityBase, IBasic_Guid, IEquatable<Basic_Guid>
    {
        public new const int EntityTag = 19;
        protected override int OnGetEntityTag() => EntityTag;

        private Guid field_ScalarRequired;
        Guid IBasic_Guid.ScalarRequired { get => field_ScalarRequired; }
        public Guid ScalarRequired
        {
            get => field_ScalarRequired;
            set => field_ScalarRequired = value;
        }
        private Guid? field_ScalarOptional;
        Guid? IBasic_Guid.ScalarOptional => field_ScalarOptional;
        public Guid? ScalarOptional
        {
            get => field_ScalarOptional;
            set => field_ScalarOptional = value;
        }
        private ImmutableList<Guid>? field_VectorRequired;
        IReadOnlyList<Guid>? IBasic_Guid.VectorRequired => field_VectorRequired is null
            ? null
            : new ListFacade<Guid, Guid>(field_VectorRequired, (x) => x.ToExternal());
        public ImmutableList<Guid>? VectorRequired
        {
            get => field_VectorRequired;
            set => field_VectorRequired = value;
        }
        private ImmutableList<Guid?>? field_VectorOptional;
        IReadOnlyList<Guid?>? IBasic_Guid.VectorOptional => field_VectorOptional is null
            ? null
            : new ListFacade<Guid?, Guid?>(field_VectorOptional, (x) => x.ToExternal());
        public ImmutableList<Guid?>? VectorOptional
        {
            get => field_VectorOptional;
            set => field_VectorOptional = value;
        }
        private ImmutableDictionary<String, Guid>? field_MapRequired;
        IReadOnlyDictionary<String, Guid>? IBasic_Guid.MapRequired => field_MapRequired is null
            ? null
            : new DictionaryFacade<String, Guid, Guid>(field_MapRequired, (x) => x.ToExternal());
        public ImmutableDictionary<String, Guid>? MapRequired
        {
            get => field_MapRequired;
            set => field_MapRequired = value;
        }
        private ImmutableDictionary<String, Guid?>? field_MapOptional;
        IReadOnlyDictionary<String, Guid?>? IBasic_Guid.MapOptional => field_MapOptional is null
            ? null
            : new DictionaryFacade<String, Guid?, Guid?>(field_MapOptional, (x) => x.ToExternal());
        public ImmutableDictionary<String, Guid?>? MapOptional
        {
            get => field_MapOptional;
            set => field_MapOptional = value;
        }
        private ImmutableDictionary<Guid, String?>? field_MapKey;
        IReadOnlyDictionary<Guid, String?>? IBasic_Guid.MapKey => field_MapKey;
        public ImmutableDictionary<Guid, String?>? MapKey
        {
            get => field_MapKey;
            set => field_MapKey = value;
        }

        public Basic_Guid() : base()
        {
        }

        public Basic_Guid(Basic_Guid? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired;
            field_VectorOptional = source.VectorOptional;
            field_MapRequired = source.MapRequired;
            field_MapOptional = source.MapOptional;
            field_MapKey = source.MapKey;
        }

        public Basic_Guid(IBasic_Guid? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<Guid>.Empty.AddRange(source.VectorRequired
                    .Select(x => (Guid)x));
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<Guid?>.Empty.AddRange(source.VectorOptional
                    .Select(x => (Guid?)x));
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, Guid>.Empty.AddRange(source.MapRequired
                    .Select(x => new KeyValuePair<String, Guid>(x.Key, x.Value)));
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, Guid?>.Empty.AddRange(source.MapOptional
                    .Select(x => new KeyValuePair<String, Guid?>(x.Key, x.Value)));
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<Guid, String?>.Empty.AddRange(source.MapKey);
        }

        public void CopyFrom(IBasic_Guid? source)
        {
            if (source is null) return;
            base.CopyFrom(source);
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<Guid>.Empty.AddRange(source.VectorRequired
                    .Select(x => (Guid)x));
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<Guid?>.Empty.AddRange(source.VectorOptional
                    .Select(x => (Guid?)x));
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, Guid>.Empty.AddRange(source.MapRequired
                    .Select(x => new KeyValuePair<String, Guid>(x.Key, x.Value)));
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, Guid?>.Empty.AddRange(source.MapOptional
                    .Select(x => new KeyValuePair<String, Guid?>(x.Key, x.Value)));
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<Guid, String?>.Empty.AddRange(source.MapKey);
        }

        public bool Equals(Basic_Guid? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!base.Equals(other)) return false;
            if (!ScalarRequired.ValueEquals(other.ScalarRequired)) return false;
            if (!ScalarOptional.ValueEquals(other.ScalarOptional)) return false;
            if (!VectorRequired.ArrayEquals(other.VectorRequired)) return false;
            if (!VectorOptional.ArrayEquals(other.VectorOptional)) return false;
            if (!MapRequired.IndexEquals(other.MapRequired)) return false;
            if (!MapOptional.IndexEquals(other.MapOptional)) return false;
            if (!MapKey.IndexEquals(other.MapKey)) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is Basic_Guid other && Equals(other);

        public override int GetHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(base.GetHashCode());
            hc.Add(ScalarRequired.CalcHashUnary());
            hc.Add(ScalarOptional.CalcHashUnary());
            hc.Add(VectorRequired.CalcHashArray());
            hc.Add(VectorOptional.CalcHashArray());
            hc.Add(MapRequired.CalcHashIndex());
            hc.Add(MapOptional.CalcHashIndex());
            hc.Add(MapKey.CalcHashIndex());
            return hc.ToHashCode();
        }
    }

    public sealed class Basic_DayOfWeek_Factory : IEntityFactory<IBasic_DayOfWeek, Basic_DayOfWeek>
    {
        private static readonly Basic_DayOfWeek_Factory _instance = new Basic_DayOfWeek_Factory();
        public static Basic_DayOfWeek_Factory Instance => _instance;
        public Basic_DayOfWeek? CreateFrom(IBasic_DayOfWeek? source) => (source is null) ? null : new Basic_DayOfWeek(source);
        public Basic_DayOfWeek Empty => new Basic_DayOfWeek();
    }
    public partial class Basic_DayOfWeek : EntityBase, IBasic_DayOfWeek, IEquatable<Basic_DayOfWeek>
    {
        public new const int EntityTag = 20;
        protected override int OnGetEntityTag() => EntityTag;

        private System.DayOfWeek field_ScalarRequired;
        System.DayOfWeek IBasic_DayOfWeek.ScalarRequired { get => field_ScalarRequired; }
        public System.DayOfWeek ScalarRequired
        {
            get => field_ScalarRequired;
            set => field_ScalarRequired = value;
        }
        private System.DayOfWeek? field_ScalarOptional;
        System.DayOfWeek? IBasic_DayOfWeek.ScalarOptional => field_ScalarOptional;
        public System.DayOfWeek? ScalarOptional
        {
            get => field_ScalarOptional;
            set => field_ScalarOptional = value;
        }
        private ImmutableList<System.DayOfWeek>? field_VectorRequired;
        IReadOnlyList<System.DayOfWeek>? IBasic_DayOfWeek.VectorRequired => field_VectorRequired is null
            ? null
            : new ListFacade<System.DayOfWeek, System.DayOfWeek>(field_VectorRequired, (x) => x.ToExternal());
        public ImmutableList<System.DayOfWeek>? VectorRequired
        {
            get => field_VectorRequired;
            set => field_VectorRequired = value;
        }
        private ImmutableList<System.DayOfWeek?>? field_VectorOptional;
        IReadOnlyList<System.DayOfWeek?>? IBasic_DayOfWeek.VectorOptional => field_VectorOptional is null
            ? null
            : new ListFacade<System.DayOfWeek?, System.DayOfWeek?>(field_VectorOptional, (x) => x.ToExternal());
        public ImmutableList<System.DayOfWeek?>? VectorOptional
        {
            get => field_VectorOptional;
            set => field_VectorOptional = value;
        }
        private ImmutableDictionary<String, System.DayOfWeek>? field_MapRequired;
        IReadOnlyDictionary<String, System.DayOfWeek>? IBasic_DayOfWeek.MapRequired => field_MapRequired is null
            ? null
            : new DictionaryFacade<String, System.DayOfWeek, System.DayOfWeek>(field_MapRequired, (x) => x.ToExternal());
        public ImmutableDictionary<String, System.DayOfWeek>? MapRequired
        {
            get => field_MapRequired;
            set => field_MapRequired = value;
        }
        private ImmutableDictionary<String, System.DayOfWeek?>? field_MapOptional;
        IReadOnlyDictionary<String, System.DayOfWeek?>? IBasic_DayOfWeek.MapOptional => field_MapOptional is null
            ? null
            : new DictionaryFacade<String, System.DayOfWeek?, System.DayOfWeek?>(field_MapOptional, (x) => x.ToExternal());
        public ImmutableDictionary<String, System.DayOfWeek?>? MapOptional
        {
            get => field_MapOptional;
            set => field_MapOptional = value;
        }
        private ImmutableDictionary<System.DayOfWeek, String?>? field_MapKey;
        IReadOnlyDictionary<System.DayOfWeek, String?>? IBasic_DayOfWeek.MapKey => field_MapKey;
        public ImmutableDictionary<System.DayOfWeek, String?>? MapKey
        {
            get => field_MapKey;
            set => field_MapKey = value;
        }

        public Basic_DayOfWeek() : base()
        {
        }

        public Basic_DayOfWeek(Basic_DayOfWeek? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired;
            field_VectorOptional = source.VectorOptional;
            field_MapRequired = source.MapRequired;
            field_MapOptional = source.MapOptional;
            field_MapKey = source.MapKey;
        }

        public Basic_DayOfWeek(IBasic_DayOfWeek? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<System.DayOfWeek>.Empty.AddRange(source.VectorRequired
                    .Select(x => (System.DayOfWeek)x));
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<System.DayOfWeek?>.Empty.AddRange(source.VectorOptional
                    .Select(x => (System.DayOfWeek?)x));
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, System.DayOfWeek>.Empty.AddRange(source.MapRequired
                    .Select(x => new KeyValuePair<String, System.DayOfWeek>(x.Key, x.Value)));
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, System.DayOfWeek?>.Empty.AddRange(source.MapOptional
                    .Select(x => new KeyValuePair<String, System.DayOfWeek?>(x.Key, x.Value)));
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<System.DayOfWeek, String?>.Empty.AddRange(source.MapKey);
        }

        public void CopyFrom(IBasic_DayOfWeek? source)
        {
            if (source is null) return;
            base.CopyFrom(source);
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<System.DayOfWeek>.Empty.AddRange(source.VectorRequired
                    .Select(x => (System.DayOfWeek)x));
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<System.DayOfWeek?>.Empty.AddRange(source.VectorOptional
                    .Select(x => (System.DayOfWeek?)x));
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, System.DayOfWeek>.Empty.AddRange(source.MapRequired
                    .Select(x => new KeyValuePair<String, System.DayOfWeek>(x.Key, x.Value)));
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, System.DayOfWeek?>.Empty.AddRange(source.MapOptional
                    .Select(x => new KeyValuePair<String, System.DayOfWeek?>(x.Key, x.Value)));
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<System.DayOfWeek, String?>.Empty.AddRange(source.MapKey);
        }

        public bool Equals(Basic_DayOfWeek? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!base.Equals(other)) return false;
            if (!ScalarRequired.ValueEquals(other.ScalarRequired)) return false;
            if (!ScalarOptional.ValueEquals(other.ScalarOptional)) return false;
            if (!VectorRequired.ArrayEquals(other.VectorRequired)) return false;
            if (!VectorOptional.ArrayEquals(other.VectorOptional)) return false;
            if (!MapRequired.IndexEquals(other.MapRequired)) return false;
            if (!MapOptional.IndexEquals(other.MapOptional)) return false;
            if (!MapKey.IndexEquals(other.MapKey)) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is Basic_DayOfWeek other && Equals(other);

        public override int GetHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(base.GetHashCode());
            hc.Add(ScalarRequired.CalcHashUnary());
            hc.Add(ScalarOptional.CalcHashUnary());
            hc.Add(VectorRequired.CalcHashArray());
            hc.Add(VectorOptional.CalcHashArray());
            hc.Add(MapRequired.CalcHashIndex());
            hc.Add(MapOptional.CalcHashIndex());
            hc.Add(MapKey.CalcHashIndex());
            return hc.ToHashCode();
        }
    }

    public sealed class Basic_MyCustomEnum_Factory : IEntityFactory<IBasic_MyCustomEnum, Basic_MyCustomEnum>
    {
        private static readonly Basic_MyCustomEnum_Factory _instance = new Basic_MyCustomEnum_Factory();
        public static Basic_MyCustomEnum_Factory Instance => _instance;
        public Basic_MyCustomEnum? CreateFrom(IBasic_MyCustomEnum? source) => (source is null) ? null : new Basic_MyCustomEnum(source);
        public Basic_MyCustomEnum Empty => new Basic_MyCustomEnum();
    }
    public partial class Basic_MyCustomEnum : EntityBase, IBasic_MyCustomEnum, IEquatable<Basic_MyCustomEnum>
    {
        public new const int EntityTag = 21;
        protected override int OnGetEntityTag() => EntityTag;

        private MyCustomEnum field_ScalarRequired;
        MyCustomEnum IBasic_MyCustomEnum.ScalarRequired { get => field_ScalarRequired; }
        public MyCustomEnum ScalarRequired
        {
            get => field_ScalarRequired;
            set => field_ScalarRequired = value;
        }
        private MyCustomEnum? field_ScalarOptional;
        MyCustomEnum? IBasic_MyCustomEnum.ScalarOptional => field_ScalarOptional;
        public MyCustomEnum? ScalarOptional
        {
            get => field_ScalarOptional;
            set => field_ScalarOptional = value;
        }
        private ImmutableList<MyCustomEnum>? field_VectorRequired;
        IReadOnlyList<MyCustomEnum>? IBasic_MyCustomEnum.VectorRequired => field_VectorRequired is null
            ? null
            : new ListFacade<MyCustomEnum, MyCustomEnum>(field_VectorRequired, (x) => x.ToExternal());
        public ImmutableList<MyCustomEnum>? VectorRequired
        {
            get => field_VectorRequired;
            set => field_VectorRequired = value;
        }
        private ImmutableList<MyCustomEnum?>? field_VectorOptional;
        IReadOnlyList<MyCustomEnum?>? IBasic_MyCustomEnum.VectorOptional => field_VectorOptional is null
            ? null
            : new ListFacade<MyCustomEnum?, MyCustomEnum?>(field_VectorOptional, (x) => x.ToExternal());
        public ImmutableList<MyCustomEnum?>? VectorOptional
        {
            get => field_VectorOptional;
            set => field_VectorOptional = value;
        }
        private ImmutableDictionary<String, MyCustomEnum>? field_MapRequired;
        IReadOnlyDictionary<String, MyCustomEnum>? IBasic_MyCustomEnum.MapRequired => field_MapRequired is null
            ? null
            : new DictionaryFacade<String, MyCustomEnum, MyCustomEnum>(field_MapRequired, (x) => x.ToExternal());
        public ImmutableDictionary<String, MyCustomEnum>? MapRequired
        {
            get => field_MapRequired;
            set => field_MapRequired = value;
        }
        private ImmutableDictionary<String, MyCustomEnum?>? field_MapOptional;
        IReadOnlyDictionary<String, MyCustomEnum?>? IBasic_MyCustomEnum.MapOptional => field_MapOptional is null
            ? null
            : new DictionaryFacade<String, MyCustomEnum?, MyCustomEnum?>(field_MapOptional, (x) => x.ToExternal());
        public ImmutableDictionary<String, MyCustomEnum?>? MapOptional
        {
            get => field_MapOptional;
            set => field_MapOptional = value;
        }
        private ImmutableDictionary<MyCustomEnum, String?>? field_MapKey;
        IReadOnlyDictionary<MyCustomEnum, String?>? IBasic_MyCustomEnum.MapKey => field_MapKey;
        public ImmutableDictionary<MyCustomEnum, String?>? MapKey
        {
            get => field_MapKey;
            set => field_MapKey = value;
        }

        public Basic_MyCustomEnum() : base()
        {
        }

        public Basic_MyCustomEnum(Basic_MyCustomEnum? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired;
            field_VectorOptional = source.VectorOptional;
            field_MapRequired = source.MapRequired;
            field_MapOptional = source.MapOptional;
            field_MapKey = source.MapKey;
        }

        public Basic_MyCustomEnum(IBasic_MyCustomEnum? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<MyCustomEnum>.Empty.AddRange(source.VectorRequired
                    .Select(x => (MyCustomEnum)x));
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<MyCustomEnum?>.Empty.AddRange(source.VectorOptional
                    .Select(x => (MyCustomEnum?)x));
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, MyCustomEnum>.Empty.AddRange(source.MapRequired
                    .Select(x => new KeyValuePair<String, MyCustomEnum>(x.Key, x.Value)));
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, MyCustomEnum?>.Empty.AddRange(source.MapOptional
                    .Select(x => new KeyValuePair<String, MyCustomEnum?>(x.Key, x.Value)));
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<MyCustomEnum, String?>.Empty.AddRange(source.MapKey);
        }

        public void CopyFrom(IBasic_MyCustomEnum? source)
        {
            if (source is null) return;
            base.CopyFrom(source);
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<MyCustomEnum>.Empty.AddRange(source.VectorRequired
                    .Select(x => (MyCustomEnum)x));
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<MyCustomEnum?>.Empty.AddRange(source.VectorOptional
                    .Select(x => (MyCustomEnum?)x));
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, MyCustomEnum>.Empty.AddRange(source.MapRequired
                    .Select(x => new KeyValuePair<String, MyCustomEnum>(x.Key, x.Value)));
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, MyCustomEnum?>.Empty.AddRange(source.MapOptional
                    .Select(x => new KeyValuePair<String, MyCustomEnum?>(x.Key, x.Value)));
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<MyCustomEnum, String?>.Empty.AddRange(source.MapKey);
        }

        public bool Equals(Basic_MyCustomEnum? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!base.Equals(other)) return false;
            if (!ScalarRequired.ValueEquals(other.ScalarRequired)) return false;
            if (!ScalarOptional.ValueEquals(other.ScalarOptional)) return false;
            if (!VectorRequired.ArrayEquals(other.VectorRequired)) return false;
            if (!VectorOptional.ArrayEquals(other.VectorOptional)) return false;
            if (!MapRequired.IndexEquals(other.MapRequired)) return false;
            if (!MapOptional.IndexEquals(other.MapOptional)) return false;
            if (!MapKey.IndexEquals(other.MapKey)) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is Basic_MyCustomEnum other && Equals(other);

        public override int GetHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(base.GetHashCode());
            hc.Add(ScalarRequired.CalcHashUnary());
            hc.Add(ScalarOptional.CalcHashUnary());
            hc.Add(VectorRequired.CalcHashArray());
            hc.Add(VectorOptional.CalcHashArray());
            hc.Add(MapRequired.CalcHashIndex());
            hc.Add(MapOptional.CalcHashIndex());
            hc.Add(MapKey.CalcHashIndex());
            return hc.ToHashCode();
        }
    }

    public sealed class Basic_Quantity_Factory : IEntityFactory<IBasic_Quantity, Basic_Quantity>
    {
        private static readonly Basic_Quantity_Factory _instance = new Basic_Quantity_Factory();
        public static Basic_Quantity_Factory Instance => _instance;
        public Basic_Quantity? CreateFrom(IBasic_Quantity? source) => (source is null) ? null : new Basic_Quantity(source);
        public Basic_Quantity Empty => new Basic_Quantity();
    }
    public partial class Basic_Quantity : EntityBase, IBasic_Quantity, IEquatable<Basic_Quantity>
    {
        public new const int EntityTag = 22;
        protected override int OnGetEntityTag() => EntityTag;

        private QuantityValue field_ScalarRequired;
        LabApps.Units.Quantity IBasic_Quantity.ScalarRequired { get => field_ScalarRequired; }
        public QuantityValue ScalarRequired
        {
            get => field_ScalarRequired;
            set => field_ScalarRequired = value;
        }
        private QuantityValue? field_ScalarOptional;
        LabApps.Units.Quantity? IBasic_Quantity.ScalarOptional => field_ScalarOptional;
        public QuantityValue? ScalarOptional
        {
            get => field_ScalarOptional;
            set => field_ScalarOptional = value;
        }
        private ImmutableList<QuantityValue>? field_VectorRequired;
        IReadOnlyList<LabApps.Units.Quantity>? IBasic_Quantity.VectorRequired => field_VectorRequired is null
            ? null
            : new ListFacade<LabApps.Units.Quantity, QuantityValue>(field_VectorRequired, (x) => x.ToExternal());
        public ImmutableList<QuantityValue>? VectorRequired
        {
            get => field_VectorRequired;
            set => field_VectorRequired = value;
        }
        private ImmutableList<QuantityValue?>? field_VectorOptional;
        IReadOnlyList<LabApps.Units.Quantity?>? IBasic_Quantity.VectorOptional => field_VectorOptional is null
            ? null
            : new ListFacade<LabApps.Units.Quantity?, QuantityValue?>(field_VectorOptional, (x) => x.ToExternal());
        public ImmutableList<QuantityValue?>? VectorOptional
        {
            get => field_VectorOptional;
            set => field_VectorOptional = value;
        }
        private ImmutableDictionary<String, QuantityValue>? field_MapRequired;
        IReadOnlyDictionary<String, LabApps.Units.Quantity>? IBasic_Quantity.MapRequired => field_MapRequired is null
            ? null
            : new DictionaryFacade<String, LabApps.Units.Quantity, QuantityValue>(field_MapRequired, (x) => x.ToExternal());
        public ImmutableDictionary<String, QuantityValue>? MapRequired
        {
            get => field_MapRequired;
            set => field_MapRequired = value;
        }
        private ImmutableDictionary<String, QuantityValue?>? field_MapOptional;
        IReadOnlyDictionary<String, LabApps.Units.Quantity?>? IBasic_Quantity.MapOptional => field_MapOptional is null
            ? null
            : new DictionaryFacade<String, LabApps.Units.Quantity?, QuantityValue?>(field_MapOptional, (x) => x.ToExternal());
        public ImmutableDictionary<String, QuantityValue?>? MapOptional
        {
            get => field_MapOptional;
            set => field_MapOptional = value;
        }

        public Basic_Quantity() : base()
        {
        }

        public Basic_Quantity(Basic_Quantity? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired;
            field_VectorOptional = source.VectorOptional;
            field_MapRequired = source.MapRequired;
            field_MapOptional = source.MapOptional;
        }

        public Basic_Quantity(IBasic_Quantity? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<QuantityValue>.Empty.AddRange(source.VectorRequired
                    .Select(x => (QuantityValue)x));
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<QuantityValue?>.Empty.AddRange(source.VectorOptional
                    .Select(x => (QuantityValue?)x));
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, QuantityValue>.Empty.AddRange(source.MapRequired
                    .Select(x => new KeyValuePair<String, QuantityValue>(x.Key, x.Value)));
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, QuantityValue?>.Empty.AddRange(source.MapOptional
                    .Select(x => new KeyValuePair<String, QuantityValue?>(x.Key, x.Value)));
        }

        public void CopyFrom(IBasic_Quantity? source)
        {
            if (source is null) return;
            base.CopyFrom(source);
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<QuantityValue>.Empty.AddRange(source.VectorRequired
                    .Select(x => (QuantityValue)x));
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<QuantityValue?>.Empty.AddRange(source.VectorOptional
                    .Select(x => (QuantityValue?)x));
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, QuantityValue>.Empty.AddRange(source.MapRequired
                    .Select(x => new KeyValuePair<String, QuantityValue>(x.Key, x.Value)));
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, QuantityValue?>.Empty.AddRange(source.MapOptional
                    .Select(x => new KeyValuePair<String, QuantityValue?>(x.Key, x.Value)));
        }

        public bool Equals(Basic_Quantity? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!base.Equals(other)) return false;
            if (!ScalarRequired.ValueEquals(other.ScalarRequired)) return false;
            if (!ScalarOptional.ValueEquals(other.ScalarOptional)) return false;
            if (!VectorRequired.ArrayEquals(other.VectorRequired)) return false;
            if (!VectorOptional.ArrayEquals(other.VectorOptional)) return false;
            if (!MapRequired.IndexEquals(other.MapRequired)) return false;
            if (!MapOptional.IndexEquals(other.MapOptional)) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is Basic_Quantity other && Equals(other);

        public override int GetHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(base.GetHashCode());
            hc.Add(ScalarRequired.CalcHashUnary());
            hc.Add(ScalarOptional.CalcHashUnary());
            hc.Add(VectorRequired.CalcHashArray());
            hc.Add(VectorOptional.CalcHashArray());
            hc.Add(MapRequired.CalcHashIndex());
            hc.Add(MapOptional.CalcHashIndex());
            return hc.ToHashCode();
        }
    }

    public sealed class Basic_string_Factory : IEntityFactory<IBasic_string, Basic_string>
    {
        private static readonly Basic_string_Factory _instance = new Basic_string_Factory();
        public static Basic_string_Factory Instance => _instance;
        public Basic_string? CreateFrom(IBasic_string? source) => (source is null) ? null : new Basic_string(source);
        public Basic_string Empty => new Basic_string();
    }
    public partial class Basic_string : EntityBase, IBasic_string, IEquatable<Basic_string>
    {
        public new const int EntityTag = 30;
        protected override int OnGetEntityTag() => EntityTag;

        private String? field_Scalar;
        String? IBasic_string.Scalar => field_Scalar;
        public String? Scalar
        {
            get => field_Scalar;
            set => field_Scalar = value;
        }
        private ImmutableList<String?>? field_Vector;
        IReadOnlyList<String?>? IBasic_string.Vector => field_Vector;
        public ImmutableList<String?>? Vector
        {
            get => field_Vector;
            set => field_Vector = value;
        }
        private ImmutableDictionary<String, String?>? field_MapValue;
        IReadOnlyDictionary<String, String?>? IBasic_string.MapValue => field_MapValue;
        public ImmutableDictionary<String, String?>? MapValue
        {
            get => field_MapValue;
            set => field_MapValue = value;
        }

        public Basic_string() : base()
        {
        }

        public Basic_string(Basic_string? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_Scalar = source.Scalar;
            field_Vector = source.Vector;
            field_MapValue = source.MapValue;
        }

        public Basic_string(IBasic_string? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_Scalar = source.Scalar;
            field_Vector = source.Vector is null
                ? default
                : ImmutableList<String?>.Empty.AddRange(source.Vector);
            field_MapValue = source.MapValue is null
                ? default
                : ImmutableDictionary<String, String?>.Empty.AddRange(source.MapValue);
        }

        public void CopyFrom(IBasic_string? source)
        {
            if (source is null) return;
            base.CopyFrom(source);
            field_Scalar = source.Scalar;
            field_Vector = source.Vector is null
                ? default
                : ImmutableList<String?>.Empty.AddRange(source.Vector);
            field_MapValue = source.MapValue is null
                ? default
                : ImmutableDictionary<String, String?>.Empty.AddRange(source.MapValue);
        }

        public bool Equals(Basic_string? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!base.Equals(other)) return false;
            if (!Scalar.ValueEquals(other.Scalar)) return false;
            if (!Vector.ArrayEquals(other.Vector)) return false;
            if (!MapValue.IndexEquals(other.MapValue)) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is Basic_string other && Equals(other);

        public override int GetHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(base.GetHashCode());
            hc.Add(Scalar.CalcHashUnary());
            hc.Add(Vector.CalcHashArray());
            hc.Add(MapValue.CalcHashIndex());
            return hc.ToHashCode();
        }
    }

    public sealed class Basic_Octets_Factory : IEntityFactory<IBasic_Octets, Basic_Octets>
    {
        private static readonly Basic_Octets_Factory _instance = new Basic_Octets_Factory();
        public static Basic_Octets_Factory Instance => _instance;
        public Basic_Octets? CreateFrom(IBasic_Octets? source) => (source is null) ? null : new Basic_Octets(source);
        public Basic_Octets Empty => new Basic_Octets();
    }
    public partial class Basic_Octets : EntityBase, IBasic_Octets, IEquatable<Basic_Octets>
    {
        public new const int EntityTag = 31;
        protected override int OnGetEntityTag() => EntityTag;

        Octets? IBasic_Octets.Scalar => Scalar is null ? null : new Octets(Scalar);
        public byte[]? Scalar { get; set; }
        IReadOnlyList<Octets?>? IBasic_Octets.Vector => Vector is null
            ? null
            : new List<Octets?>(Vector.Select(x => x is null ? null : new Octets(x)));
        public byte[]?[]? Vector { get; set; }
        IReadOnlyDictionary<String, Octets?>? IBasic_Octets.MapValue => MapValue is null
            ? null
            : MapValue.ToDictionary(x => x.Key, x => x.Value is null ? null : new Octets(x.Value));
        public Dictionary<String, byte[]?>? MapValue { get; set; }
        private ImmutableDictionary<Octets, String?>? field_MapKey;
        IReadOnlyDictionary<Octets, String?>? IBasic_Octets.MapKey => field_MapKey;
        public ImmutableDictionary<Octets, String?>? MapKey
        {
            get => field_MapKey;
            set => field_MapKey = value;
        }

        public Basic_Octets() : base()
        {
        }

        public Basic_Octets(Basic_Octets? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            this.Scalar = source.Scalar;
            this.Vector = source.Vector;
            this.MapValue = source.MapValue;
            field_MapKey = source.MapKey;
        }

        public Basic_Octets(IBasic_Octets? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            this.Scalar = source.Scalar is null
                ? default
                : source.Scalar.Memory.ToArray();
            this.Vector = source.Vector is null
                ? default
                : source.Vector.Select(x => x is null ? null : x.Memory.ToArray()).ToArray();
            this.MapValue = source.MapValue is null
                ? default
                : source.MapValue.ToDictionary(x => x.Key, x => x.Value is null ? null : x.Value.Memory.ToArray());
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<Octets, String?>.Empty.AddRange(source.MapKey);
        }

        public void CopyFrom(IBasic_Octets? source)
        {
            if (source is null) return;
            base.CopyFrom(source);
            this.Scalar = source.Scalar is null
                ? default
                : source.Scalar.Memory.ToArray();
            this.Vector = source.Vector is null
                ? default
                : source.Vector.Select(x => x is null ? null : x.Memory.ToArray()).ToArray();
            this.MapValue = source.MapValue is null
                ? default
                : source.MapValue.ToDictionary(x => x.Key, x => x.Value is null ? null : x.Value.Memory.ToArray());
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<Octets, String?>.Empty.AddRange(source.MapKey);
        }

        public bool Equals(Basic_Octets? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!base.Equals(other)) return false;
            if (!Scalar.ValueEquals(other.Scalar)) return false;
            if (!Vector.ArrayEquals(other.Vector)) return false;
            if (!MapValue.IndexEquals(other.MapValue)) return false;
            if (!MapKey.IndexEquals(other.MapKey)) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is Basic_Octets other && Equals(other);

        public override int GetHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(base.GetHashCode());
            hc.Add(Scalar.CalcHashUnary());
            hc.Add(Vector.CalcHashArray());
            hc.Add(MapValue.CalcHashIndex());
            hc.Add(MapKey.CalcHashIndex());
            return hc.ToHashCode();
        }
    }

    public sealed class Basic_Half_Factory : IEntityFactory<IBasic_Half, Basic_Half>
    {
        private static readonly Basic_Half_Factory _instance = new Basic_Half_Factory();
        public static Basic_Half_Factory Instance => _instance;
        public Basic_Half? CreateFrom(IBasic_Half? source) => (source is null) ? null : new Basic_Half(source);
        public Basic_Half Empty => new Basic_Half();
    }
    public partial class Basic_Half : EntityBase, IBasic_Half, IEquatable<Basic_Half>
    {
        public new const int EntityTag = 32;
        protected override int OnGetEntityTag() => EntityTag;

        private HalfValue field_ScalarRequired;
        Half IBasic_Half.ScalarRequired { get => field_ScalarRequired; }
        public HalfValue ScalarRequired
        {
            get => field_ScalarRequired;
            set => field_ScalarRequired = value;
        }
        private HalfValue? field_ScalarOptional;
        Half? IBasic_Half.ScalarOptional => field_ScalarOptional;
        public HalfValue? ScalarOptional
        {
            get => field_ScalarOptional;
            set => field_ScalarOptional = value;
        }
        private ImmutableList<HalfValue>? field_VectorRequired;
        IReadOnlyList<Half>? IBasic_Half.VectorRequired => field_VectorRequired is null
            ? null
            : new ListFacade<Half, HalfValue>(field_VectorRequired, (x) => x.ToExternal());
        public ImmutableList<HalfValue>? VectorRequired
        {
            get => field_VectorRequired;
            set => field_VectorRequired = value;
        }
        private ImmutableList<HalfValue?>? field_VectorOptional;
        IReadOnlyList<Half?>? IBasic_Half.VectorOptional => field_VectorOptional is null
            ? null
            : new ListFacade<Half?, HalfValue?>(field_VectorOptional, (x) => x.ToExternal());
        public ImmutableList<HalfValue?>? VectorOptional
        {
            get => field_VectorOptional;
            set => field_VectorOptional = value;
        }
        private ImmutableDictionary<String, HalfValue>? field_MapRequired;
        IReadOnlyDictionary<String, Half>? IBasic_Half.MapRequired => field_MapRequired is null
            ? null
            : new DictionaryFacade<String, Half, HalfValue>(field_MapRequired, (x) => x.ToExternal());
        public ImmutableDictionary<String, HalfValue>? MapRequired
        {
            get => field_MapRequired;
            set => field_MapRequired = value;
        }
        private ImmutableDictionary<String, HalfValue?>? field_MapOptional;
        IReadOnlyDictionary<String, Half?>? IBasic_Half.MapOptional => field_MapOptional is null
            ? null
            : new DictionaryFacade<String, Half?, HalfValue?>(field_MapOptional, (x) => x.ToExternal());
        public ImmutableDictionary<String, HalfValue?>? MapOptional
        {
            get => field_MapOptional;
            set => field_MapOptional = value;
        }
        private ImmutableDictionary<Half, String?>? field_MapKey;
        IReadOnlyDictionary<Half, String?>? IBasic_Half.MapKey => field_MapKey;
        public ImmutableDictionary<Half, String?>? MapKey
        {
            get => field_MapKey;
            set => field_MapKey = value;
        }

        public Basic_Half() : base()
        {
        }

        public Basic_Half(Basic_Half? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired;
            field_VectorOptional = source.VectorOptional;
            field_MapRequired = source.MapRequired;
            field_MapOptional = source.MapOptional;
            field_MapKey = source.MapKey;
        }

        public Basic_Half(IBasic_Half? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<HalfValue>.Empty.AddRange(source.VectorRequired
                    .Select(x => (HalfValue)x));
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<HalfValue?>.Empty.AddRange(source.VectorOptional
                    .Select(x => (HalfValue?)x));
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, HalfValue>.Empty.AddRange(source.MapRequired
                    .Select(x => new KeyValuePair<String, HalfValue>(x.Key, x.Value)));
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, HalfValue?>.Empty.AddRange(source.MapOptional
                    .Select(x => new KeyValuePair<String, HalfValue?>(x.Key, x.Value)));
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<Half, String?>.Empty.AddRange(source.MapKey);
        }

        public void CopyFrom(IBasic_Half? source)
        {
            if (source is null) return;
            base.CopyFrom(source);
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<HalfValue>.Empty.AddRange(source.VectorRequired
                    .Select(x => (HalfValue)x));
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<HalfValue?>.Empty.AddRange(source.VectorOptional
                    .Select(x => (HalfValue?)x));
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, HalfValue>.Empty.AddRange(source.MapRequired
                    .Select(x => new KeyValuePair<String, HalfValue>(x.Key, x.Value)));
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, HalfValue?>.Empty.AddRange(source.MapOptional
                    .Select(x => new KeyValuePair<String, HalfValue?>(x.Key, x.Value)));
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<Half, String?>.Empty.AddRange(source.MapKey);
        }

        public bool Equals(Basic_Half? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!base.Equals(other)) return false;
            if (!ScalarRequired.ValueEquals(other.ScalarRequired)) return false;
            if (!ScalarOptional.ValueEquals(other.ScalarOptional)) return false;
            if (!VectorRequired.ArrayEquals(other.VectorRequired)) return false;
            if (!VectorOptional.ArrayEquals(other.VectorOptional)) return false;
            if (!MapRequired.IndexEquals(other.MapRequired)) return false;
            if (!MapOptional.IndexEquals(other.MapOptional)) return false;
            if (!MapKey.IndexEquals(other.MapKey)) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is Basic_Half other && Equals(other);

        public override int GetHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(base.GetHashCode());
            hc.Add(ScalarRequired.CalcHashUnary());
            hc.Add(ScalarOptional.CalcHashUnary());
            hc.Add(VectorRequired.CalcHashArray());
            hc.Add(VectorOptional.CalcHashArray());
            hc.Add(MapRequired.CalcHashIndex());
            hc.Add(MapOptional.CalcHashIndex());
            hc.Add(MapKey.CalcHashIndex());
            return hc.ToHashCode();
        }
    }

    public sealed class Basic_DateOnly_Factory : IEntityFactory<IBasic_DateOnly, Basic_DateOnly>
    {
        private static readonly Basic_DateOnly_Factory _instance = new Basic_DateOnly_Factory();
        public static Basic_DateOnly_Factory Instance => _instance;
        public Basic_DateOnly? CreateFrom(IBasic_DateOnly? source) => (source is null) ? null : new Basic_DateOnly(source);
        public Basic_DateOnly Empty => new Basic_DateOnly();
    }
    public partial class Basic_DateOnly : EntityBase, IBasic_DateOnly, IEquatable<Basic_DateOnly>
    {
        public new const int EntityTag = 33;
        protected override int OnGetEntityTag() => EntityTag;

        private DateOnly field_ScalarRequired;
        DateOnly IBasic_DateOnly.ScalarRequired { get => field_ScalarRequired; }
        public DateOnly ScalarRequired
        {
            get => field_ScalarRequired;
            set => field_ScalarRequired = value;
        }
        private DateOnly? field_ScalarOptional;
        DateOnly? IBasic_DateOnly.ScalarOptional => field_ScalarOptional;
        public DateOnly? ScalarOptional
        {
            get => field_ScalarOptional;
            set => field_ScalarOptional = value;
        }
        private ImmutableList<DateOnly>? field_VectorRequired;
        IReadOnlyList<DateOnly>? IBasic_DateOnly.VectorRequired => field_VectorRequired is null
            ? null
            : new ListFacade<DateOnly, DateOnly>(field_VectorRequired, (x) => x.ToExternal());
        public ImmutableList<DateOnly>? VectorRequired
        {
            get => field_VectorRequired;
            set => field_VectorRequired = value;
        }
        private ImmutableList<DateOnly?>? field_VectorOptional;
        IReadOnlyList<DateOnly?>? IBasic_DateOnly.VectorOptional => field_VectorOptional is null
            ? null
            : new ListFacade<DateOnly?, DateOnly?>(field_VectorOptional, (x) => x.ToExternal());
        public ImmutableList<DateOnly?>? VectorOptional
        {
            get => field_VectorOptional;
            set => field_VectorOptional = value;
        }
        private ImmutableDictionary<String, DateOnly>? field_MapRequired;
        IReadOnlyDictionary<String, DateOnly>? IBasic_DateOnly.MapRequired => field_MapRequired is null
            ? null
            : new DictionaryFacade<String, DateOnly, DateOnly>(field_MapRequired, (x) => x.ToExternal());
        public ImmutableDictionary<String, DateOnly>? MapRequired
        {
            get => field_MapRequired;
            set => field_MapRequired = value;
        }
        private ImmutableDictionary<String, DateOnly?>? field_MapOptional;
        IReadOnlyDictionary<String, DateOnly?>? IBasic_DateOnly.MapOptional => field_MapOptional is null
            ? null
            : new DictionaryFacade<String, DateOnly?, DateOnly?>(field_MapOptional, (x) => x.ToExternal());
        public ImmutableDictionary<String, DateOnly?>? MapOptional
        {
            get => field_MapOptional;
            set => field_MapOptional = value;
        }
        private ImmutableDictionary<DateOnly, String?>? field_MapKey;
        IReadOnlyDictionary<DateOnly, String?>? IBasic_DateOnly.MapKey => field_MapKey;
        public ImmutableDictionary<DateOnly, String?>? MapKey
        {
            get => field_MapKey;
            set => field_MapKey = value;
        }

        public Basic_DateOnly() : base()
        {
        }

        public Basic_DateOnly(Basic_DateOnly? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired;
            field_VectorOptional = source.VectorOptional;
            field_MapRequired = source.MapRequired;
            field_MapOptional = source.MapOptional;
            field_MapKey = source.MapKey;
        }

        public Basic_DateOnly(IBasic_DateOnly? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<DateOnly>.Empty.AddRange(source.VectorRequired
                    .Select(x => (DateOnly)x));
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<DateOnly?>.Empty.AddRange(source.VectorOptional
                    .Select(x => (DateOnly?)x));
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, DateOnly>.Empty.AddRange(source.MapRequired
                    .Select(x => new KeyValuePair<String, DateOnly>(x.Key, x.Value)));
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, DateOnly?>.Empty.AddRange(source.MapOptional
                    .Select(x => new KeyValuePair<String, DateOnly?>(x.Key, x.Value)));
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<DateOnly, String?>.Empty.AddRange(source.MapKey);
        }

        public void CopyFrom(IBasic_DateOnly? source)
        {
            if (source is null) return;
            base.CopyFrom(source);
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<DateOnly>.Empty.AddRange(source.VectorRequired
                    .Select(x => (DateOnly)x));
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<DateOnly?>.Empty.AddRange(source.VectorOptional
                    .Select(x => (DateOnly?)x));
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, DateOnly>.Empty.AddRange(source.MapRequired
                    .Select(x => new KeyValuePair<String, DateOnly>(x.Key, x.Value)));
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, DateOnly?>.Empty.AddRange(source.MapOptional
                    .Select(x => new KeyValuePair<String, DateOnly?>(x.Key, x.Value)));
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<DateOnly, String?>.Empty.AddRange(source.MapKey);
        }

        public bool Equals(Basic_DateOnly? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!base.Equals(other)) return false;
            if (!ScalarRequired.ValueEquals(other.ScalarRequired)) return false;
            if (!ScalarOptional.ValueEquals(other.ScalarOptional)) return false;
            if (!VectorRequired.ArrayEquals(other.VectorRequired)) return false;
            if (!VectorOptional.ArrayEquals(other.VectorOptional)) return false;
            if (!MapRequired.IndexEquals(other.MapRequired)) return false;
            if (!MapOptional.IndexEquals(other.MapOptional)) return false;
            if (!MapKey.IndexEquals(other.MapKey)) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is Basic_DateOnly other && Equals(other);

        public override int GetHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(base.GetHashCode());
            hc.Add(ScalarRequired.CalcHashUnary());
            hc.Add(ScalarOptional.CalcHashUnary());
            hc.Add(VectorRequired.CalcHashArray());
            hc.Add(VectorOptional.CalcHashArray());
            hc.Add(MapRequired.CalcHashIndex());
            hc.Add(MapOptional.CalcHashIndex());
            hc.Add(MapKey.CalcHashIndex());
            return hc.ToHashCode();
        }
    }

    public sealed class Basic_TimeOnly_Factory : IEntityFactory<IBasic_TimeOnly, Basic_TimeOnly>
    {
        private static readonly Basic_TimeOnly_Factory _instance = new Basic_TimeOnly_Factory();
        public static Basic_TimeOnly_Factory Instance => _instance;
        public Basic_TimeOnly? CreateFrom(IBasic_TimeOnly? source) => (source is null) ? null : new Basic_TimeOnly(source);
        public Basic_TimeOnly Empty => new Basic_TimeOnly();
    }
    public partial class Basic_TimeOnly : EntityBase, IBasic_TimeOnly, IEquatable<Basic_TimeOnly>
    {
        public new const int EntityTag = 34;
        protected override int OnGetEntityTag() => EntityTag;

        private TimeOnly field_ScalarRequired;
        TimeOnly IBasic_TimeOnly.ScalarRequired { get => field_ScalarRequired; }
        public TimeOnly ScalarRequired
        {
            get => field_ScalarRequired;
            set => field_ScalarRequired = value;
        }
        private TimeOnly? field_ScalarOptional;
        TimeOnly? IBasic_TimeOnly.ScalarOptional => field_ScalarOptional;
        public TimeOnly? ScalarOptional
        {
            get => field_ScalarOptional;
            set => field_ScalarOptional = value;
        }
        private ImmutableList<TimeOnly>? field_VectorRequired;
        IReadOnlyList<TimeOnly>? IBasic_TimeOnly.VectorRequired => field_VectorRequired is null
            ? null
            : new ListFacade<TimeOnly, TimeOnly>(field_VectorRequired, (x) => x.ToExternal());
        public ImmutableList<TimeOnly>? VectorRequired
        {
            get => field_VectorRequired;
            set => field_VectorRequired = value;
        }
        private ImmutableList<TimeOnly?>? field_VectorOptional;
        IReadOnlyList<TimeOnly?>? IBasic_TimeOnly.VectorOptional => field_VectorOptional is null
            ? null
            : new ListFacade<TimeOnly?, TimeOnly?>(field_VectorOptional, (x) => x.ToExternal());
        public ImmutableList<TimeOnly?>? VectorOptional
        {
            get => field_VectorOptional;
            set => field_VectorOptional = value;
        }
        private ImmutableDictionary<String, TimeOnly>? field_MapRequired;
        IReadOnlyDictionary<String, TimeOnly>? IBasic_TimeOnly.MapRequired => field_MapRequired is null
            ? null
            : new DictionaryFacade<String, TimeOnly, TimeOnly>(field_MapRequired, (x) => x.ToExternal());
        public ImmutableDictionary<String, TimeOnly>? MapRequired
        {
            get => field_MapRequired;
            set => field_MapRequired = value;
        }
        private ImmutableDictionary<String, TimeOnly?>? field_MapOptional;
        IReadOnlyDictionary<String, TimeOnly?>? IBasic_TimeOnly.MapOptional => field_MapOptional is null
            ? null
            : new DictionaryFacade<String, TimeOnly?, TimeOnly?>(field_MapOptional, (x) => x.ToExternal());
        public ImmutableDictionary<String, TimeOnly?>? MapOptional
        {
            get => field_MapOptional;
            set => field_MapOptional = value;
        }
        private ImmutableDictionary<TimeOnly, String?>? field_MapKey;
        IReadOnlyDictionary<TimeOnly, String?>? IBasic_TimeOnly.MapKey => field_MapKey;
        public ImmutableDictionary<TimeOnly, String?>? MapKey
        {
            get => field_MapKey;
            set => field_MapKey = value;
        }

        public Basic_TimeOnly() : base()
        {
        }

        public Basic_TimeOnly(Basic_TimeOnly? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired;
            field_VectorOptional = source.VectorOptional;
            field_MapRequired = source.MapRequired;
            field_MapOptional = source.MapOptional;
            field_MapKey = source.MapKey;
        }

        public Basic_TimeOnly(IBasic_TimeOnly? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<TimeOnly>.Empty.AddRange(source.VectorRequired
                    .Select(x => (TimeOnly)x));
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<TimeOnly?>.Empty.AddRange(source.VectorOptional
                    .Select(x => (TimeOnly?)x));
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, TimeOnly>.Empty.AddRange(source.MapRequired
                    .Select(x => new KeyValuePair<String, TimeOnly>(x.Key, x.Value)));
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, TimeOnly?>.Empty.AddRange(source.MapOptional
                    .Select(x => new KeyValuePair<String, TimeOnly?>(x.Key, x.Value)));
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<TimeOnly, String?>.Empty.AddRange(source.MapKey);
        }

        public void CopyFrom(IBasic_TimeOnly? source)
        {
            if (source is null) return;
            base.CopyFrom(source);
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<TimeOnly>.Empty.AddRange(source.VectorRequired
                    .Select(x => (TimeOnly)x));
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<TimeOnly?>.Empty.AddRange(source.VectorOptional
                    .Select(x => (TimeOnly?)x));
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, TimeOnly>.Empty.AddRange(source.MapRequired
                    .Select(x => new KeyValuePair<String, TimeOnly>(x.Key, x.Value)));
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, TimeOnly?>.Empty.AddRange(source.MapOptional
                    .Select(x => new KeyValuePair<String, TimeOnly?>(x.Key, x.Value)));
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<TimeOnly, String?>.Empty.AddRange(source.MapKey);
        }

        public bool Equals(Basic_TimeOnly? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!base.Equals(other)) return false;
            if (!ScalarRequired.ValueEquals(other.ScalarRequired)) return false;
            if (!ScalarOptional.ValueEquals(other.ScalarOptional)) return false;
            if (!VectorRequired.ArrayEquals(other.VectorRequired)) return false;
            if (!VectorOptional.ArrayEquals(other.VectorOptional)) return false;
            if (!MapRequired.IndexEquals(other.MapRequired)) return false;
            if (!MapOptional.IndexEquals(other.MapOptional)) return false;
            if (!MapKey.IndexEquals(other.MapKey)) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is Basic_TimeOnly other && Equals(other);

        public override int GetHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(base.GetHashCode());
            hc.Add(ScalarRequired.CalcHashUnary());
            hc.Add(ScalarOptional.CalcHashUnary());
            hc.Add(VectorRequired.CalcHashArray());
            hc.Add(VectorOptional.CalcHashArray());
            hc.Add(MapRequired.CalcHashIndex());
            hc.Add(MapOptional.CalcHashIndex());
            hc.Add(MapKey.CalcHashIndex());
            return hc.ToHashCode();
        }
    }


    public struct HalfValue
    {
        public short Value { get; set; }
        public HalfValue() { }
        public HalfValue(short value) => Value = value;
        public override int GetHashCode() => HashCode.Combine(Value);
        public override bool Equals(object? obj) => obj is HalfValue other && Equals(other);
        public bool Equals(HalfValue other) => other.Value.Equals(Value);
        public static bool operator ==(HalfValue left, HalfValue right) => left.Equals(right);
        public static bool operator !=(HalfValue left, HalfValue right) => !left.Equals(right);

        public static implicit operator HalfValue(Half value) => new HalfValue(BitConverter.HalfToInt16Bits(value));
        public static implicit operator Half(HalfValue value) => BitConverter.Int16BitsToHalf(value.Value);
    }

    public struct BigIntValue
    {
        public string? Text { get; set; }
        public BigIntValue() { }
        public BigIntValue(string? text) => Text = text;
        public override int GetHashCode() => HashCode.Combine(Text);
        public override bool Equals(object? obj) => obj is BigIntValue other && Equals(other);
        public bool Equals(BigIntValue other) => string.Equals(Text, other.Text);
        public static bool operator ==(BigIntValue left, BigIntValue right) => left.Equals(right);
        public static bool operator !=(BigIntValue left, BigIntValue right) => !left.Equals(right);

        public static implicit operator BigIntValue(BigInteger value) => new BigIntValue(value.ToString());
        public static implicit operator BigInteger(BigIntValue value) => value.Text is null ? default : BigInteger.Parse(value.Text);
    }

    public struct ComplexValue
    {
        public long RealBits { get; set; }
        public long ImagBits { get; set; }
        public ComplexValue() { }
        public ComplexValue(long realBits, long imagBits)
        {
            RealBits = realBits;
            ImagBits = imagBits;
        }
        public override int GetHashCode() => HashCode.Combine(RealBits, ImagBits);
        public override bool Equals(object? obj) => obj is ComplexValue other && Equals(other);
        public bool Equals(ComplexValue other) => other.RealBits.Equals(this.RealBits) && other.ImagBits.Equals(this.ImagBits);
        public static bool operator ==(ComplexValue left, ComplexValue right) => left.Equals(right);
        public static bool operator !=(ComplexValue left, ComplexValue right) => !left.Equals(right);

        public static implicit operator ComplexValue(Complex value) => new ComplexValue(BitConverter.DoubleToInt64Bits(value.Real), BitConverter.DoubleToInt64Bits(value.Imaginary));
        public static implicit operator Complex(ComplexValue value) => new Complex(BitConverter.Int64BitsToDouble(value.RealBits), BitConverter.Int64BitsToDouble(value.ImagBits));
    }

}
