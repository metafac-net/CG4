//------------------------------------------------------------------------------
//   Warning: This code was automatically generated.
//   Changes to this file may cause incorrect behavior
//   and will be lost when this file is regenerated.
//------------------------------------------------------------------------------
//
// |metacode:version=0.1|
// |metacode:template_begin|
//>>Define("BooleanFieldType", "Boolean");
//>>Define("SByteFieldType", "SByte");
//>>Define("ByteFieldType", "Byte");
//>>Define("Int16FieldType", "Int16");
//>>Define("UInt16FieldType", "UInt16");
//>>Define("CharFieldType", "Char");
//>>Define("Int32FieldType", "Int32");
//>>Define("UInt32FieldType", "UInt32");
//>>Define("SingleFieldType", "Single");
//>>Define("Int64FieldType", "Int64");
//>>Define("UInt64FieldType", "UInt64");
//>>Define("DoubleFieldType", "Double");
//>>Define("DateTimeFieldType", "DateTime");
//>>Define("TimeSpanFieldType", "TimeSpan");
//>>Define("DateTimeZoneFieldType", "DateTimeOffset");
//>>Define("DecimalFieldType", "Decimal");
//>>Define("GuidFieldType", "Guid");
//>>Define("StringFieldType", "String");
//>>Define("ConcreteBoolean", "T_BooleanFieldType_");
//>>Define("ConcreteSByte", "T_SByteFieldType_");
//>>Define("ConcreteByte", "T_ByteFieldType_");
//>>Define("ConcreteInt16", "T_Int16FieldType_");
//>>Define("ConcreteUInt16", "T_UInt16FieldType_");
//>>Define("ConcreteChar", "T_CharFieldType_");
//>>Define("ConcreteInt32", "T_Int32FieldType_");
//>>Define("ConcreteUInt32", "T_UInt32FieldType_");
//>>Define("ConcreteSingle", "T_SingleFieldType_");
//>>Define("ConcreteInt64", "T_Int64FieldType_");
//>>Define("ConcreteUInt64", "T_UInt64FieldType_");
//>>Define("ConcreteDouble", "T_DoubleFieldType_");
//>>Define("ConcreteDateTime", "T_DateTimeFieldType_");
//>>Define("ConcreteTimeSpan", "T_TimeSpanFieldType_");
//>>Define("ConcreteDateTimeOffset", "T_DateTimeZoneFieldType_");
//>>Define("ConcreteDecimal", "T_DecimalFieldType_");
//>>Define("ConcreteGuid", "T_GuidFieldType_");
//>>Define("ConcreteString", "T_StringFieldType_");
//>>Define("ExternalBoolean", "T_BooleanFieldType_");
//>>Define("ExternalSByte", "T_SByteFieldType_");
//>>Define("ExternalByte", "T_ByteFieldType_");
//>>Define("ExternalInt16", "T_Int16FieldType_");
//>>Define("ExternalUInt16", "T_UInt16FieldType_");
//>>Define("ExternalChar", "T_CharFieldType_");
//>>Define("ExternalInt32", "T_Int32FieldType_");
//>>Define("ExternalUInt32", "T_UInt32FieldType_");
//>>Define("ExternalSingle", "T_SingleFieldType_");
//>>Define("ExternalInt64", "T_Int64FieldType_");
//>>Define("ExternalUInt64", "T_UInt64FieldType_");
//>>Define("ExternalDouble", "T_DoubleFieldType_");
//>>Define("ExternalDateTime", "T_DateTimeFieldType_");
//>>Define("ExternalTimeSpan", "T_TimeSpanFieldType_");
//>>Define("ExternalDateTimeOffset", "T_DateTimeZoneFieldType_");
//>>Define("ExternalDecimal", "T_DecimalFieldType_");
//>>Define("ExternalGuid", "T_GuidFieldType_");
//>>Define("ExternalString", "T_StringFieldType_");
//>>Define("ConcreteDateTime", "DateTimeValue");
//>>Define("ExternalDateTime", "DateTime");
//>>Define("ConcreteDateTimeOffset", "DateTimeOffsetValue");
//>>Define("ExternalDateTimeOffset", "DateTimeOffset");
//>>Define("ConcreteDecimal", "DecimalValue");
//>>Define("ExternalDecimal", "Decimal");
//>>Define("ConcreteGuid", "GuidValue");
//>>Define("ExternalGuid", "Guid");
//>>Define("ParentName", "EntityBase");
// <auto-generated />
#region Auto-generated
//--------------------------------------------------------------------------------
// Warning: This file was automatically generated. Changes to this file may
// cause incorrect behavior and will be lost when this file is regenerated.
//
// This file was generated using MetaFac.CG4 tools and user supplied metadata.
//
// To download and install the tool, the .NET CLI command is:
// dotnet tool install --global MetaFac.CG4.CLI
//
// For more information about using this tool, the help command is:
// mfcg4 g2c --help
//--------------------------------------------------------------------------------
#endregion
#nullable enable
using MetaFac.Memory;
using MetaFac.Mutability;
using MessagePack;
using MetaFac.CG4.Runtime;
using MetaFac.CG4.Runtime.MessagePack;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Runtime.CompilerServices;
using T_Namespace_.Contracts;

namespace T_Namespace_.MessagePack
{
    //>>using (Ignored())
    //>>{
    using T_ConcreteOtherType_ = System.Int64;
    using T_ExternalOtherType_ = System.Int64;
    using T_IndexType_ = System.String;
    //>>}

    //>>using (Ignored())
    //>>{
    [MessagePackObject]
    public class T_ModelType_ : EntityBase, IT_ModelType_, IEquatable<T_ModelType_>
    {
        public static T_ModelType_? CreateFrom(IT_ModelType_? source)
        {
            if (source is null) return null;
            return new T_ModelType_(source);
        }

        protected override int OnGetEntityTag() => 0;

        [Key(1)]
        public int TestData { get; set; }

        public T_ModelType_() { }
        public T_ModelType_(int testData)
        {
            TestData = testData;
        }
        public T_ModelType_(IT_ModelType_? source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            TestData = source.TestData;
        }
        public bool Equals(T_ModelType_? other)
        {
            if (ReferenceEquals(other, this)) return true;
            if (other is null) return false;
            return other.TestData == TestData;
        }

        public override bool Equals(object? obj)
        {
            return (obj is T_ModelType_ other) && Equals(other);
        }

        public override int GetHashCode()
        {
            return TestData.GetHashCode();
        }
    }

    internal static class ConversionHelpers
    {
        public static T ToExternal<T>(this T value) => value;
        public static T ToInternal<T>(this T value) => value;
    }
    //>>}

    public abstract class EntityBase : IFreezable, IEntityBase, IEquatable<EntityBase>, ICopyFrom<EntityBase>
    {
        public static EntityBase Empty => throw new NotSupportedException();
        public const int EntityTag = 0;

        [MethodImpl(MethodImplOptions.NoInlining)]
        private static void ThrowIsReadonly()
        {
            throw new InvalidOperationException("Cannot set properties when frozen");
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        protected ref T CheckNotFrozen<T>(ref T value)
        {
            if (_isFrozen) ThrowIsReadonly();
            return ref value;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        protected void CheckNotFrozen()
        {
            if (_isFrozen) ThrowIsReadonly();
        }

        public EntityBase() { }
        public EntityBase(EntityBase source) { }
        public void CopyFrom(EntityBase source)
        {
            CheckNotFrozen();
        }
        public EntityBase(IEntityBase source) { }
        protected abstract int OnGetEntityTag();
        public int GetEntityTag() => OnGetEntityTag();

        protected volatile bool _isFrozen = false;
        public bool IsFreezable() => true;
        public bool IsFrozen() => _isFrozen;
        protected virtual void OnFreeze() { }
        public void Freeze()
        {
            if (_isFrozen) return;
            OnFreeze();
            _isFrozen = true;
        }
        public bool TryFreeze()
        {
            if (_isFrozen) return false;
            OnFreeze();
            _isFrozen = true;
            return true;
        }

        public bool Equals(EntityBase? other) => true;
        public override bool Equals(object? obj) => obj is EntityBase other && this.Equals(other);
        public override int GetHashCode() => 0;
    }

    //>>using (Ignored())
    //>>{
    [MessagePackObject]
    public class T_ParentName_ : EntityBase, IT_ParentName_, IEquatable<T_ParentName_>, ICopyFrom<T_ParentName_>
    {
        [Key(1)]
        public int ParentField1 { get; set; }
        public T_ParentName_() { }
        public T_ParentName_(T_ParentName_ source) : base(source) { }
        public void CopyFrom(T_ParentName_ source) { }
        public T_ParentName_(IT_ParentName_ source) : base(source) { }
        public new const int EntityTag = 999;
        protected override int OnGetEntityTag() => EntityTag;
        public bool Equals(T_ParentName_? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            return base.Equals(other);
        }
        public override bool Equals(object? obj) => obj is T_ParentName_ other && this.Equals(other);
        public override int GetHashCode() => 0;

        private static readonly T_ParentName_ _empty = new T_ParentName_();
        public static new T_ParentName_ Empty => _empty;

    }
    //>>}

    //>>foreach (var cd in outerScope.EntityDefs)
    //>>{
    //>>    using (NewScope(cd))
    //>>    {
    //>>        var derivedEntities = cd.DerivedEntities;
    //>>        if (derivedEntities.Count > 0)
    //>>        {
    //>>            foreach (var derived in derivedEntities)
    //>>            {
    //>>                using (NewScope(derived))
    //>>                {
    [Union(T_EntityName_.EntityTag, typeof(T_EntityName_))]
    //>>                }
    //>>            }
    public abstract partial class T_EntityName2_
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static T_EntityName_? CreateFrom(IT_EntityName_? source)
        {
            if (source is null) return null;
            int entityTag = source.GetEntityTag();
            switch (entityTag)
            {
                //>>            foreach (var derived in derivedEntities)
                //>>            {
                //>>                using (NewScope(derived))
                //>>                {
                case T_EntityName_.EntityTag: return T_EntityName_.CreateFrom((IT_EntityName_)source);
                //>>                }
                //>>            }
                default:
                    throw new ArgumentOutOfRangeException(nameof(entityTag), entityTag, null);
            }
        }
    }
    //>>        }
    //>>        else
    //>>        {
    public partial class T_EntityName_
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static T_EntityName_? CreateFrom(IT_EntityName_? source)
        {
            if (source is null) return null;
            return new T_EntityName_(source);
        }

        private static T_EntityName_ CreateEmpty()
        {
            var empty = new T_EntityName_();
            empty.Freeze();
            return empty;
        }
        private static readonly T_EntityName_ _empty = CreateEmpty();
        public static new T_EntityName_ Empty => _empty;

    }
    //>>        }
    [MessagePackObject]
    public partial class T_EntityName_ : T_ParentName_, IT_EntityName_, IEquatable<T_EntityName_>, ICopyFrom<T_EntityName_>
    {
        protected override void OnFreeze()
        {
            //>>        foreach (var fd in cd.FieldDefs)
            //>>        {
            //>>            using (NewScope(fd))
            //>>            {
            //>>                var fieldInfo = new FieldInfo(fd, _engine.Current);
            //>>                switch (fieldInfo.Kind)
            //>>                {
            //>>                    case FieldKind.UnaryModel:
            field_T_UnaryModelFieldName_?.Freeze();
            //>>                        break;
            //>>                    case FieldKind.ArrayModel:
            if (!(field_T_ArrayModelFieldName_ is null))
            {
                foreach (var element in field_T_ArrayModelFieldName_)
                {
                    element?.Freeze();
                }
            }
            //>>                        break;
            //>>                    case FieldKind.IndexModel:
            if (!(field_T_IndexModelFieldName_ is null))
            {
                foreach (var element in field_T_IndexModelFieldName_.Values)
                {
                    element?.Freeze();
                }
            }
            //>>                        break;
            //>>                    default: break;
            //>>                }
            //>>            }
            //>>        }
            base.OnFreeze();
        }

        //>>        using (Ignored())
        //>>        {
        private const int T_EntityTag_ = 9000;
        private const int T_FieldTag_ = 100;
        //>>        }
        public new const int EntityTag = T_EntityTag_;
        protected override int OnGetEntityTag() => EntityTag;

        // ---------- private fields ----------
        //>>        foreach (var fd in cd.FieldDefs)
        //>>        {
        //>>            using (NewScope(fd))
        //>>            {
        //>>                var fieldInfo = new FieldInfo(fd, _engine.Current);
        //>>                switch (fieldInfo.Kind)
        //>>                {
        //>>                    case FieldKind.UnaryModel:
        private T_ModelType_? field_T_UnaryModelFieldName_;
        //>>                        break;
        //>>                    case FieldKind.ArrayModel:
        private ImmutableList<T_ModelType_?>? field_T_ArrayModelFieldName_;
        //>>                        break;
        //>>                    case FieldKind.IndexModel:
        private ImmutableDictionary<T_IndexType_, T_ModelType_?>? field_T_IndexModelFieldName_;
        //>>                        break;
        //>>                    case FieldKind.UnaryMaybe:
        private T_ConcreteOtherType_? field_T_UnaryMaybeFieldName_;
        //>>                        break;
        //>>                    case FieldKind.ArrayMaybe:
        private ImmutableList<T_ConcreteOtherType_?>? field_T_ArrayMaybeFieldName_;
        //>>                        break;
        //>>                    case FieldKind.IndexMaybe:
        private ImmutableDictionary<T_IndexType_, T_ConcreteOtherType_?>? field_T_IndexMaybeFieldName_;
        //>>                        break;
        //>>                    case FieldKind.UnaryOther:
        private T_ConcreteOtherType_ field_T_UnaryOtherFieldName_;
        //>>                        break;
        //>>                    case FieldKind.ArrayOther:
        private ImmutableList<T_ConcreteOtherType_>? field_T_ArrayOtherFieldName_;
        //>>                        break;
        //>>                    case FieldKind.IndexOther:
        private ImmutableDictionary<T_IndexType_, T_ConcreteOtherType_>? field_T_IndexOtherFieldName_;
        //>>                        break;
        //>>                    case FieldKind.UnaryBuffer:
        private BinaryValue? field_T_UnaryBufferFieldName_;
        //>>                        break;
        //>>                    case FieldKind.ArrayBuffer:
        private ImmutableList<BinaryValue?>? field_T_ArrayBufferFieldName_;
        //>>                        break;
        //>>                    case FieldKind.IndexBuffer:
        private ImmutableDictionary<T_IndexType_, BinaryValue?>? field_T_IndexBufferFieldName_;
        //>>                        break;
        //>>                    case FieldKind.UnaryString:
        private String? field_T_UnaryStringFieldName_;
        //>>                        break;
        //>>                    case FieldKind.ArrayString:
        private ImmutableList<String?>? field_T_ArrayStringFieldName_;
        //>>                        break;
        //>>                    case FieldKind.IndexString:
        private ImmutableDictionary<T_IndexType_, String?>? field_T_IndexStringFieldName_;
        //>>                        break;
        //>>                    default:
        //>>                        throw new ArgumentOutOfRangeException("fieldInfo.Kind", fieldInfo.Kind, $"ordinal={(int)fieldInfo.Kind}");
        //>>                }
        //>>            }
        //>>        }

        // ---------- accessors ----------
        //>>        foreach (var fd in cd.FieldDefs)
        //>>        {
        //>>            using (NewScope(fd))
        //>>            {
        //>>                var fieldInfo = new FieldInfo(fd, _engine.Current);
        [Key(T_FieldTag_)]
        //>>                using (Ignored())
        //>>                {
        public int IgnoreThisField { get; set; }
        //>>                }
        //>>                switch (fieldInfo.Kind)
        //>>                {
        //>>                    case FieldKind.UnaryModel:
        //>>                        using (Ignored())
        //>>                        {
        [Key(T_FieldTag_ + 1)]
        //>>                        }
        public T_ModelType_? T_UnaryModelFieldName_
        {
            get => field_T_UnaryModelFieldName_;
            set => field_T_UnaryModelFieldName_ = CheckNotFrozen(ref value);
        }
        //>>                        break;
        //>>                    case FieldKind.ArrayModel:
        //>>                        using (Ignored())
        //>>                        {
        [Key(T_FieldTag_ + 2)]
        //>>                        }
        public ImmutableList<T_ModelType_?>? T_ArrayModelFieldName_
        {
            get => field_T_ArrayModelFieldName_;
            set => field_T_ArrayModelFieldName_ = CheckNotFrozen(ref value);
        }
        //>>                        break;
        //>>                    case FieldKind.IndexModel:
        //>>                        using (Ignored())
        //>>                        {
        [Key(T_FieldTag_ + 3)]
        //>>                        }
        public ImmutableDictionary<T_IndexType_, T_ModelType_?>? T_IndexModelFieldName_
        {
            get => field_T_IndexModelFieldName_;
            set => field_T_IndexModelFieldName_ = CheckNotFrozen(ref value);
        }
        //>>                        break;
        //>>                    case FieldKind.UnaryMaybe:
        //>>                        using (Ignored())
        //>>                        {
        [Key(T_FieldTag_ + 4)]
        //>>                        }
        public T_ConcreteOtherType_? T_UnaryMaybeFieldName_
        {
            get => field_T_UnaryMaybeFieldName_;
            set => field_T_UnaryMaybeFieldName_ = CheckNotFrozen(ref value);
        }
        //>>                        break;
        //>>                    case FieldKind.ArrayMaybe:
        //>>                        using (Ignored())
        //>>                        {
        [Key(T_FieldTag_ + 5)]
        //>>                        }
        public ImmutableList<T_ConcreteOtherType_?>? T_ArrayMaybeFieldName_
        {
            get => field_T_ArrayMaybeFieldName_;
            set => field_T_ArrayMaybeFieldName_ = CheckNotFrozen(ref value);
        }
        //>>                        break;
        //>>                    case FieldKind.IndexMaybe:
        //>>                        using (Ignored())
        //>>                        {
        [Key(T_FieldTag_ + 6)]
        //>>                        }
        public ImmutableDictionary<T_IndexType_, T_ConcreteOtherType_?>? T_IndexMaybeFieldName_
        {
            get => field_T_IndexMaybeFieldName_;
            set => field_T_IndexMaybeFieldName_ = CheckNotFrozen(ref value);
        }
        //>>                        break;
        //>>                    case FieldKind.UnaryOther:
        //>>                        using (Ignored())
        //>>                        {
        [Key(T_FieldTag_ + 7)]
        //>>                        }
        public T_ConcreteOtherType_ T_UnaryOtherFieldName_
        {
            get => field_T_UnaryOtherFieldName_;
            set => field_T_UnaryOtherFieldName_ = CheckNotFrozen(ref value);
        }
        //>>                        break;
        //>>                    case FieldKind.ArrayOther:
        //>>                        using (Ignored())
        //>>                        {
        [Key(T_FieldTag_ + 8)]
        //>>                        }
        public ImmutableList<T_ConcreteOtherType_>? T_ArrayOtherFieldName_
        {
            get => field_T_ArrayOtherFieldName_;
            set => field_T_ArrayOtherFieldName_ = CheckNotFrozen(ref value);
        }
        //>>                        break;
        //>>                    case FieldKind.IndexOther:
        //>>                        using (Ignored())
        //>>                        {
        [Key(T_FieldTag_ + 9)]
        //>>                        }
        public ImmutableDictionary<T_IndexType_, T_ConcreteOtherType_>? T_IndexOtherFieldName_
        {
            get => field_T_IndexOtherFieldName_;
            set => field_T_IndexOtherFieldName_ = CheckNotFrozen(ref value);
        }
        //>>                        break;
        //>>                    case FieldKind.UnaryBuffer:
        //>>                        using (Ignored())
        //>>                        {
        [Key(T_FieldTag_ + 10)]
        //>>                        }
        public BinaryValue? T_UnaryBufferFieldName_
        {
            get => field_T_UnaryBufferFieldName_;
            set => field_T_UnaryBufferFieldName_ = CheckNotFrozen(ref value);
        }
        //>>                        break;
        //>>                    case FieldKind.ArrayBuffer:
        //>>                        using (Ignored())
        //>>                        {
        [Key(T_FieldTag_ + 11)]
        //>>                        }
        public ImmutableList<BinaryValue?>? T_ArrayBufferFieldName_
        {
            get => field_T_ArrayBufferFieldName_;
            set => field_T_ArrayBufferFieldName_ = CheckNotFrozen(ref value);
        }
        //>>                        break;
        //>>                    case FieldKind.IndexBuffer:
        //>>                        using (Ignored())
        //>>                        {
        [Key(T_FieldTag_ + 12)]
        //>>                        }
        public ImmutableDictionary<T_IndexType_, BinaryValue?>? T_IndexBufferFieldName_
        {
            get => field_T_IndexBufferFieldName_;
            set => field_T_IndexBufferFieldName_ = CheckNotFrozen(ref value);
        }
        //>>                        break;
        //>>                    case FieldKind.UnaryString:
        //>>                        using (Ignored())
        //>>                        {
        [Key(T_FieldTag_ + 13)]
        //>>                        }
        public String? T_UnaryStringFieldName_
        {
            get => field_T_UnaryStringFieldName_;
            set => field_T_UnaryStringFieldName_ = CheckNotFrozen(ref value);
        }
        //>>                        break;
        //>>                    case FieldKind.ArrayString:
        //>>                        using (Ignored())
        //>>                        {
        [Key(T_FieldTag_ + 14)]
        //>>                        }
        public ImmutableList<String?>? T_ArrayStringFieldName_
        {
            get => field_T_ArrayStringFieldName_;
            set => field_T_ArrayStringFieldName_ = CheckNotFrozen(ref value);
        }
        //>>                        break;
        //>>                    case FieldKind.IndexString:
        //>>                        using (Ignored())
        //>>                        {
        [Key(T_FieldTag_ + 15)]
        //>>                        }
        public ImmutableDictionary<T_IndexType_, String?>? T_IndexStringFieldName_
        {
            get => field_T_IndexStringFieldName_;
            set => field_T_IndexStringFieldName_ = CheckNotFrozen(ref value);
        }
        //>>                        break;
        //>>                    default:
        //>>                        throw new ArgumentOutOfRangeException("fieldInfo.Kind", fieldInfo.Kind, $"ordinal={(int)fieldInfo.Kind}");
        //>>                }
        //>>            }
        //>>        }

        // ---------- IT_EntityName_ methods ----------
        //>>        foreach (var fd in cd.FieldDefs)
        //>>        {
        //>>            using (NewScope(fd))
        //>>            {
        //>>                var fieldInfo = new FieldInfo(fd, _engine.Current);
        //>>                switch (fieldInfo.Kind)
        //>>                {
        //>>                    case FieldKind.UnaryModel:
        IT_ModelType_? IT_EntityName_.T_UnaryModelFieldName_ => field_T_UnaryModelFieldName_;
        //>>                        break;
        //>>                    case FieldKind.ArrayModel:
        IReadOnlyList<IT_ModelType_?>? IT_EntityName_.T_ArrayModelFieldName_ => field_T_ArrayModelFieldName_;
        //>>                        break;
        //>>                    case FieldKind.IndexModel:
        IReadOnlyDictionary<T_IndexType_, IT_ModelType_?>? IT_EntityName_.T_IndexModelFieldName_
            => field_T_IndexModelFieldName_ is null ? null
            : new DictionaryFacade<T_IndexType_, IT_ModelType_?, T_ModelType_?>(field_T_IndexModelFieldName_, (x) => x);
        //>>                        break;
        //>>                    case FieldKind.UnaryMaybe:
        T_ExternalOtherType_? IT_EntityName_.T_UnaryMaybeFieldName_ => field_T_UnaryMaybeFieldName_.ToExternal();
        //>>                        break;
        //>>                    case FieldKind.ArrayMaybe:
        IReadOnlyList<T_ExternalOtherType_?>? IT_EntityName_.T_ArrayMaybeFieldName_
            => field_T_ArrayMaybeFieldName_ is null ? null
            : new ListFacade<T_ExternalOtherType_?, T_ConcreteOtherType_?>(field_T_ArrayMaybeFieldName_, (x) => x.ToExternal());
        //>>                        break;
        //>>                    case FieldKind.IndexMaybe:
        IReadOnlyDictionary<T_IndexType_, T_ExternalOtherType_?>? IT_EntityName_.T_IndexMaybeFieldName_
            => field_T_IndexMaybeFieldName_ is null ? null
            : new DictionaryFacade<T_IndexType_, T_ExternalOtherType_?, T_ConcreteOtherType_?>(field_T_IndexMaybeFieldName_, (x) => x.ToExternal());
        //>>                        break;
        //>>                    case FieldKind.UnaryOther:
        T_ExternalOtherType_ IT_EntityName_.T_UnaryOtherFieldName_ => field_T_UnaryOtherFieldName_.ToExternal();
        //>>                        break;
        //>>                    case FieldKind.ArrayOther:
        IReadOnlyList<T_ExternalOtherType_>? IT_EntityName_.T_ArrayOtherFieldName_
            => field_T_ArrayOtherFieldName_ is null ? null
            : new ListFacade<T_ExternalOtherType_, T_ConcreteOtherType_>(field_T_ArrayOtherFieldName_, (x) => x.ToExternal());
        //>>                        break;
        //>>                    case FieldKind.IndexOther:
        IReadOnlyDictionary<T_IndexType_, T_ExternalOtherType_>? IT_EntityName_.T_IndexOtherFieldName_
            => field_T_IndexOtherFieldName_ is null ? null
            : new DictionaryFacade<T_IndexType_, T_ExternalOtherType_, T_ConcreteOtherType_>(field_T_IndexOtherFieldName_, (x) => x.ToExternal());
        //>>                        break;
        //>>                    case FieldKind.UnaryBuffer:
        Octets? IT_EntityName_.T_UnaryBufferFieldName_ => field_T_UnaryBufferFieldName_;
        //>>                        break;
        //>>                    case FieldKind.ArrayBuffer:
        IReadOnlyList<Octets?>? IT_EntityName_.T_ArrayBufferFieldName_ => field_T_ArrayBufferFieldName_ is null
            ? null
            : new ListFacade<Octets, BinaryValue>(field_T_ArrayBufferFieldName_, x => (Octets?)x);
        //>>                        break;
        //>>                    case FieldKind.IndexBuffer:
        IReadOnlyDictionary<T_IndexType_, Octets?>? IT_EntityName_.T_IndexBufferFieldName_ => field_T_IndexBufferFieldName_ is null
            ? null
            : new DictionaryFacade<T_IndexType_, Octets?, BinaryValue?>(field_T_IndexBufferFieldName_, x => (Octets?)x);
        //>>                        break;
        //>>                    case FieldKind.UnaryString:
        String? IT_EntityName_.T_UnaryStringFieldName_ => field_T_UnaryStringFieldName_;
        //>>                        break;
        //>>                    case FieldKind.ArrayString:
        IReadOnlyList<String?>? IT_EntityName_.T_ArrayStringFieldName_ => field_T_ArrayStringFieldName_;
        //>>                        break;
        //>>                    case FieldKind.IndexString:
        IReadOnlyDictionary<T_IndexType_, String?>? IT_EntityName_.T_IndexStringFieldName_ => field_T_IndexStringFieldName_;
        //>>                        break;
        //>>                    default: break;
        //>>                }
        //>>            }
        //>>        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public T_EntityName_()
        {
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public T_EntityName_(T_EntityName_ source) : base(source)
        {
            //>>        foreach (var fd in cd.FieldDefs)
            //>>        {
            //>>            using (NewScope(fd))
            //>>            {
            //>>                var fieldInfo = new FieldInfo(fd, _engine.Current);
            //>>                switch (fieldInfo.Kind)
            //>>                {
            //>>                    case FieldKind.UnaryModel:
            field_T_UnaryModelFieldName_ = source.field_T_UnaryModelFieldName_;
            //>>                        break;
            //>>                    case FieldKind.ArrayModel:
            field_T_ArrayModelFieldName_ = source.field_T_ArrayModelFieldName_;
            //>>                        break;
            //>>                    case FieldKind.IndexModel:
            field_T_IndexModelFieldName_ = source.field_T_IndexModelFieldName_;
            //>>                        break;
            //>>                    case FieldKind.UnaryMaybe:
            field_T_UnaryMaybeFieldName_ = source.field_T_UnaryMaybeFieldName_;
            //>>                        break;
            //>>                    case FieldKind.ArrayMaybe:
            field_T_ArrayMaybeFieldName_ = source.field_T_ArrayMaybeFieldName_;
            //>>                        break;
            //>>                    case FieldKind.IndexMaybe:
            field_T_IndexMaybeFieldName_ = source.field_T_IndexMaybeFieldName_;
            //>>                        break;
            //>>                    case FieldKind.UnaryOther:
            field_T_UnaryOtherFieldName_ = source.field_T_UnaryOtherFieldName_;
            //>>                        break;
            //>>                    case FieldKind.ArrayOther:
            field_T_ArrayOtherFieldName_ = source.field_T_ArrayOtherFieldName_;
            //>>                        break;
            //>>                    case FieldKind.IndexOther:
            field_T_IndexOtherFieldName_ = source.field_T_IndexOtherFieldName_;
            //>>                        break;
            //>>                    case FieldKind.UnaryBuffer:
            field_T_UnaryBufferFieldName_ = source.field_T_UnaryBufferFieldName_;
            //>>                        break;
            //>>                    case FieldKind.ArrayBuffer:
            field_T_ArrayBufferFieldName_ = source.field_T_ArrayBufferFieldName_;
            //>>                        break;
            //>>                    case FieldKind.IndexBuffer:
            field_T_IndexBufferFieldName_ = source.field_T_IndexBufferFieldName_;
            //>>                        break;
            //>>                    case FieldKind.UnaryString:
            field_T_UnaryStringFieldName_ = source.field_T_UnaryStringFieldName_;
            //>>                        break;
            //>>                    case FieldKind.ArrayString:
            field_T_ArrayStringFieldName_ = source.field_T_ArrayStringFieldName_;
            //>>                        break;
            //>>                    case FieldKind.IndexString:
            field_T_IndexStringFieldName_ = source.field_T_IndexStringFieldName_;
            //>>                        break;
            //>>                    default: break;
            //>>                }
            //>>            }
            //>>        }
        }

        public void CopyFrom(T_EntityName_ source)
        {
            base.CopyFrom(source);
            //>>        foreach (var fd in cd.FieldDefs)
            //>>        {
            //>>            using (NewScope(fd))
            //>>            {
            //>>                var fieldInfo = new FieldInfo(fd, _engine.Current);
            //>>                switch (fieldInfo.Kind)
            //>>                {
            //>>                    case FieldKind.UnaryModel:
            field_T_UnaryModelFieldName_ = source.field_T_UnaryModelFieldName_;
            //>>                        break;
            //>>                    case FieldKind.ArrayModel:
            field_T_ArrayModelFieldName_ = source.field_T_ArrayModelFieldName_;
            //>>                        break;
            //>>                    case FieldKind.IndexModel:
            field_T_IndexModelFieldName_ = source.field_T_IndexModelFieldName_;
            //>>                        break;
            //>>                    case FieldKind.UnaryMaybe:
            field_T_UnaryMaybeFieldName_ = source.field_T_UnaryMaybeFieldName_;
            //>>                        break;
            //>>                    case FieldKind.ArrayMaybe:
            field_T_ArrayMaybeFieldName_ = source.field_T_ArrayMaybeFieldName_;
            //>>                        break;
            //>>                    case FieldKind.IndexMaybe:
            field_T_IndexMaybeFieldName_ = source.field_T_IndexMaybeFieldName_;
            //>>                        break;
            //>>                    case FieldKind.UnaryOther:
            field_T_UnaryOtherFieldName_ = source.field_T_UnaryOtherFieldName_;
            //>>                        break;
            //>>                    case FieldKind.ArrayOther:
            field_T_ArrayOtherFieldName_ = source.field_T_ArrayOtherFieldName_;
            //>>                        break;
            //>>                    case FieldKind.IndexOther:
            field_T_IndexOtherFieldName_ = source.field_T_IndexOtherFieldName_;
            //>>                        break;
            //>>                    case FieldKind.UnaryBuffer:
            field_T_UnaryBufferFieldName_ = source.field_T_UnaryBufferFieldName_;
            //>>                        break;
            //>>                    case FieldKind.ArrayBuffer:
            field_T_ArrayBufferFieldName_ = source.field_T_ArrayBufferFieldName_;
            //>>                        break;
            //>>                    case FieldKind.IndexBuffer:
            field_T_IndexBufferFieldName_ = source.field_T_IndexBufferFieldName_;
            //>>                        break;
            //>>                    case FieldKind.UnaryString:
            field_T_UnaryStringFieldName_ = source.field_T_UnaryStringFieldName_;
            //>>                        break;
            //>>                    case FieldKind.ArrayString:
            field_T_ArrayStringFieldName_ = source.field_T_ArrayStringFieldName_;
            //>>                        break;
            //>>                    case FieldKind.IndexString:
            field_T_IndexStringFieldName_ = source.field_T_IndexStringFieldName_;
            //>>                        break;
            //>>                    default: break;
            //>>                }
            //>>            }
            //>>        }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public T_EntityName_(IT_EntityName_ source) : base(source)
        {
            //>>        foreach (var fd in cd.FieldDefs)
            //>>        {
            //>>            using (NewScope(fd))
            //>>            {
            //>>                var fieldInfo = new FieldInfo(fd, _engine.Current);
            //>>                switch (fieldInfo.Kind)
            //>>                {
            //>>                    case FieldKind.UnaryModel:
            field_T_UnaryModelFieldName_ = T_ModelType_.CreateFrom(source.T_UnaryModelFieldName_);
            //>>                        break;
            //>>                    case FieldKind.ArrayModel:
            field_T_ArrayModelFieldName_ = source.T_ArrayModelFieldName_ is null
                ? null
                : ImmutableList<T_ModelType_?>.Empty.AddRange(source.T_ArrayModelFieldName_.Select(x => T_ModelType_.CreateFrom(x)));
            //>>                        break;
            //>>                    case FieldKind.IndexModel:
            field_T_IndexModelFieldName_ = source.T_IndexModelFieldName_ is null
                ? null
                : ImmutableDictionary<T_IndexType_, T_ModelType_?>.Empty.AddRange(source.T_IndexModelFieldName_.Select(
                    kvp => new KeyValuePair<T_IndexType_, T_ModelType_?>(kvp.Key, T_ModelType_.CreateFrom(kvp.Value))));
            //>>                        break;
            //>>                    case FieldKind.UnaryMaybe:
            field_T_UnaryMaybeFieldName_ = source.T_UnaryMaybeFieldName_.ToInternal();
            //>>                        break;
            //>>                    case FieldKind.ArrayMaybe:
            field_T_ArrayMaybeFieldName_ = source.T_ArrayMaybeFieldName_ is null
                ? null
                : ImmutableList<T_ConcreteOtherType_?>.Empty.AddRange(source.T_ArrayMaybeFieldName_.Select(x => x.ToInternal()));
            //>>                        break;
            //>>                    case FieldKind.IndexMaybe:
            field_T_IndexMaybeFieldName_ = source.T_IndexMaybeFieldName_ is null
                ? null
                : ImmutableDictionary<T_IndexType_, T_ConcreteOtherType_?>.Empty.AddRange(source.T_IndexMaybeFieldName_.Select(
                    kvp => new KeyValuePair<T_IndexType_, T_ConcreteOtherType_?>(kvp.Key, kvp.Value.ToInternal())));
            //>>                        break;
            //>>                    case FieldKind.UnaryOther:
            field_T_UnaryOtherFieldName_ = source.T_UnaryOtherFieldName_.ToInternal();
            //>>                        break;
            //>>                    case FieldKind.ArrayOther:
            field_T_ArrayOtherFieldName_ = source.T_ArrayOtherFieldName_ is null
                ? null
                : ImmutableList<T_ConcreteOtherType_>.Empty.AddRange(source.T_ArrayOtherFieldName_.Select(x => x.ToInternal()));
            //>>                        break;
            //>>                    case FieldKind.IndexOther:
            field_T_IndexOtherFieldName_ = source.T_IndexOtherFieldName_ is null
                ? null
                : ImmutableDictionary<T_IndexType_, T_ConcreteOtherType_>.Empty.AddRange(source.T_IndexOtherFieldName_.Select(
                    kvp => new KeyValuePair<T_IndexType_, T_ConcreteOtherType_>(kvp.Key, kvp.Value.ToInternal())));
            //>>                        break;
            //>>                    case FieldKind.UnaryBuffer:
            field_T_UnaryBufferFieldName_ = source.T_UnaryBufferFieldName_;
            //>>                        break;
            //>>                    case FieldKind.ArrayBuffer:
            field_T_ArrayBufferFieldName_ = source.T_ArrayBufferFieldName_ is null
                ? null
                : ImmutableList<BinaryValue?>.Empty.AddRange(source.T_ArrayBufferFieldName_.Select(x => (BinaryValue?)x));
            //>>                        break;
            //>>                    case FieldKind.IndexBuffer:
            field_T_IndexBufferFieldName_ = source.T_IndexBufferFieldName_ is null
                ? null
                : ImmutableDictionary<T_IndexType_, BinaryValue?>.Empty.AddRange(
                    source.T_IndexBufferFieldName_.Select(kvp => new KeyValuePair<T_IndexType_, BinaryValue?>(kvp.Key, kvp.Value)));
            //>>                        break;
            //>>                    case FieldKind.UnaryString:
            field_T_UnaryStringFieldName_ = source.T_UnaryStringFieldName_;
            //>>                        break;
            //>>                    case FieldKind.ArrayString:
            field_T_ArrayStringFieldName_ = source.T_ArrayStringFieldName_ is null
                ? null
                : ImmutableList<String?>.Empty.AddRange(source.T_ArrayStringFieldName_);
            //>>                        break;
            //>>                    case FieldKind.IndexString:
            field_T_IndexStringFieldName_ = source.T_IndexStringFieldName_ is null
                ? null
                : ImmutableDictionary<T_IndexType_, String?>.Empty.AddRange(source.T_IndexStringFieldName_);
            //>>                        break;
            //>>                    default: break;
            //>>                }
            //>>            }
            //>>        }
        }

        public bool Equals(T_EntityName_? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            //>>        foreach (var fd in cd.FieldDefs)
            //>>        {
            //>>            using (NewScope(fd))
            //>>            {
            //>>                var fieldInfo = new FieldInfo(fd, _engine.Current);
            //>>                switch (fieldInfo.Kind)
            //>>                {
            //>>                    case FieldKind.UnaryModel:
            if (!field_T_UnaryModelFieldName_.ValueEquals(other.field_T_UnaryModelFieldName_)) return false;
            //>>                        break;
            //>>                    case FieldKind.ArrayModel:
            if (!field_T_ArrayModelFieldName_.ArrayEquals(other.field_T_ArrayModelFieldName_)) return false;
            //>>                        break;
            //>>                    case FieldKind.IndexModel:
            if (!field_T_IndexModelFieldName_.IndexEquals(other.field_T_IndexModelFieldName_)) return false;
            //>>                        break;
            //>>                    case FieldKind.UnaryMaybe:
            if (!field_T_UnaryMaybeFieldName_.ValueEquals(other.field_T_UnaryMaybeFieldName_)) return false;
            //>>                        break;
            //>>                    case FieldKind.ArrayMaybe:
            if (!field_T_ArrayMaybeFieldName_.ArrayEquals(other.field_T_ArrayMaybeFieldName_)) return false;
            //>>                        break;
            //>>                    case FieldKind.IndexMaybe:
            if (!field_T_IndexMaybeFieldName_.IndexEquals(other.field_T_IndexMaybeFieldName_)) return false;
            //>>                        break;
            //>>                    case FieldKind.UnaryOther:
            if (!field_T_UnaryOtherFieldName_.ValueEquals(other.field_T_UnaryOtherFieldName_)) return false;
            //>>                        break;
            //>>                    case FieldKind.ArrayOther:
            if (!field_T_ArrayOtherFieldName_.ArrayEquals(other.field_T_ArrayOtherFieldName_)) return false;
            //>>                        break;
            //>>                    case FieldKind.IndexOther:
            if (!field_T_IndexOtherFieldName_.IndexEquals(other.field_T_IndexOtherFieldName_)) return false;
            //>>                        break;
            //>>                    case FieldKind.UnaryBuffer:
            if (!field_T_UnaryBufferFieldName_.ValueEquals(other.field_T_UnaryBufferFieldName_)) return false;
            //>>                        break;
            //>>                    case FieldKind.ArrayBuffer:
            if (!field_T_ArrayBufferFieldName_.ArrayEquals(other.field_T_ArrayBufferFieldName_)) return false;
            //>>                        break;
            //>>                    case FieldKind.IndexBuffer:
            if (!field_T_IndexBufferFieldName_.IndexEquals(other.field_T_IndexBufferFieldName_)) return false;
            //>>                        break;
            //>>                    case FieldKind.UnaryString:
            if (!field_T_UnaryStringFieldName_.ValueEquals(other.field_T_UnaryStringFieldName_)) return false;
            //>>                        break;
            //>>                    case FieldKind.ArrayString:
            if (!field_T_ArrayStringFieldName_.ArrayEquals(other.field_T_ArrayStringFieldName_)) return false;
            //>>                        break;
            //>>                    case FieldKind.IndexString:
            if (!field_T_IndexStringFieldName_.IndexEquals(other.field_T_IndexStringFieldName_)) return false;
            //>>                        break;
            //>>                    default: break;
            //>>                }
            //>>            }
            //>>        }
            return base.Equals(other);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator ==(T_EntityName_ left, T_EntityName_ right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator !=(T_EntityName_ left, T_EntityName_ right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override bool Equals(object? obj)
        {
            return obj is T_EntityName_ other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            //>>        foreach (var fd in cd.FieldDefs)
            //>>        {
            //>>            using (NewScope(fd))
            //>>            {
            //>>                var fieldInfo = new FieldInfo(fd, _engine.Current);
            //>>                switch (fieldInfo.Kind)
            //>>                {
            //>>                    case FieldKind.UnaryModel:
            hc.Add(field_T_UnaryModelFieldName_.CalcHashUnary());
            //>>                        break;
            //>>                    case FieldKind.ArrayModel:
            hc.Add(field_T_ArrayModelFieldName_.CalcHashArray());
            //>>                        break;
            //>>                    case FieldKind.IndexModel:
            hc.Add(field_T_IndexModelFieldName_.CalcHashIndex());
            //>>                        break;
            //>>                    case FieldKind.UnaryMaybe:
            hc.Add(field_T_UnaryMaybeFieldName_.CalcHashUnary());
            //>>                        break;
            //>>                    case FieldKind.ArrayMaybe:
            hc.Add(field_T_ArrayMaybeFieldName_.CalcHashArray());
            //>>                        break;
            //>>                    case FieldKind.IndexMaybe:
            hc.Add(field_T_IndexMaybeFieldName_.CalcHashIndex());
            //>>                        break;
            //>>                    case FieldKind.UnaryOther:
            hc.Add(field_T_UnaryOtherFieldName_.CalcHashUnary());
            //>>                        break;
            //>>                    case FieldKind.ArrayOther:
            hc.Add(field_T_ArrayOtherFieldName_.CalcHashArray());
            //>>                        break;
            //>>                    case FieldKind.IndexOther:
            hc.Add(field_T_IndexOtherFieldName_.CalcHashIndex());
            //>>                        break;
            //>>                    case FieldKind.UnaryBuffer:
            hc.Add(field_T_UnaryBufferFieldName_.CalcHashUnary());
            //>>                        break;
            //>>                    case FieldKind.ArrayBuffer:
            hc.Add(field_T_ArrayBufferFieldName_.CalcHashArray());
            //>>                        break;
            //>>                    case FieldKind.IndexBuffer:
            hc.Add(field_T_IndexBufferFieldName_.CalcHashIndex());
            //>>                        break;
            //>>                    case FieldKind.UnaryString:
            hc.Add(field_T_UnaryStringFieldName_.CalcHashUnary());
            //>>                        break;
            //>>                    case FieldKind.ArrayString:
            hc.Add(field_T_ArrayStringFieldName_.CalcHashArray());
            //>>                        break;
            //>>                    case FieldKind.IndexString:
            hc.Add(field_T_IndexStringFieldName_.CalcHashIndex());
            //>>                        break;
            //>>                    default: break;
            //>>                }
            //>>            }
            //>>        }
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }

    //>>    }
    //>>}

}
// |metacode:template_end|
