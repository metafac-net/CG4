#region Notices
// <auto-generated>
// Warning: This file was automatically generated. Changes to this file may
// cause incorrect behavior and will be lost when this file is regenerated.
// </auto-generated>
// <copyright>
//     Copyright (c) 2023 MetaFac
// </copyright>
// <information>
// This file was generated using MetaFac.CG4 tools and user supplied metadata.
// Generator: MessagePack.2.8
// Metadata : MetaFac.CG4.Generators.UnitTests(.FlattenedModels)
// </information>
#endregion
#nullable enable
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
#pragma warning disable CS8019 // Unnecessary using directive
#pragma warning disable CS8019 // Unnecessary using directive
using MetaFac.Memory;
using MetaFac.Mutability;
using MessagePack;
using MetaFac.CG4.Runtime;
using MetaFac.CG4.Runtime.MessagePack;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Numerics;
using System.Runtime.CompilerServices;
using Generated.Contracts;

namespace Generated.MessagePack
{


    public abstract class EntityBase : IFreezable, IEntityBase, IEquatable<EntityBase>, ICopyFrom<EntityBase>
    {
        public static EntityBase Empty => throw new NotSupportedException();
        public const int EntityTag = 0;

        [MethodImpl(MethodImplOptions.NoInlining)]
        private static void ThrowIsReadonly()
        {
            throw new InvalidOperationException("Cannot set properties when frozen");
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        protected ref T CheckNotFrozen<T>(ref T value)
        {
            if (_isFrozen) ThrowIsReadonly();
            return ref value;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        protected void CheckNotFrozen()
        {
            if (_isFrozen) ThrowIsReadonly();
        }

        public EntityBase() { }
        public EntityBase(EntityBase source) { }
        public void CopyFrom(EntityBase source) => CheckNotFrozen();
        public EntityBase(IEntityBase source) { }
        protected abstract int OnGetEntityTag();
        public int GetEntityTag() => OnGetEntityTag();

        protected volatile bool _isFrozen = false;
        public bool IsFreezable() => true;
        public bool IsFrozen() => _isFrozen;
        protected virtual void OnFreeze() { }
        public void Freeze()
        {
            if (_isFrozen) return;
            OnFreeze();
            _isFrozen = true;
        }
        public bool TryFreeze()
        {
            if (_isFrozen) return false;
            OnFreeze();
            _isFrozen = true;
            return true;
        }

        public bool Equals(EntityBase? other) => true;
        public override bool Equals(object? obj) => obj is EntityBase other && this.Equals(other);
        public override int GetHashCode() => 0;
    }


    public sealed class BuiltinTypes_Factory : IEntityFactory<IBuiltinTypes, BuiltinTypes>
    {
        private static readonly BuiltinTypes_Factory _instance = new BuiltinTypes_Factory();
        public static BuiltinTypes_Factory Instance => _instance;

        public BuiltinTypes? CreateFrom(IBuiltinTypes? source)
        {
            if (source is null) return null;
            if (source is BuiltinTypes sibling && sibling.IsFrozen()) return sibling;
            return new BuiltinTypes(source);
        }

        private static readonly BuiltinTypes _empty = new BuiltinTypes().Frozen();
        public BuiltinTypes Empty => _empty;
    }
    [MessagePackObject]
    public partial class BuiltinTypes : EntityBase, IBuiltinTypes, IEquatable<BuiltinTypes>, ICopyFrom<BuiltinTypes>
    {
        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        public new const int EntityTag = 1;
        protected override int OnGetEntityTag() => EntityTag;

        // ---------- private fields ----------
        private ImmutableList<Boolean>? field_Bools;
        private ImmutableList<SByte>? field_SBytes;
        private ImmutableList<Byte>? field_Bytes;
        private ImmutableList<Int16>? field_Shorts;
        private ImmutableList<UInt16>? field_UShorts;
        private ImmutableList<Char>? field_Chars;
        private ImmutableList<Int32>? field_Ints;
        private ImmutableList<UInt32>? field_UInts;
        private ImmutableList<Single>? field_Floats;
        private ImmutableList<Int64>? field_Longs;
        private ImmutableList<UInt64>? field_ULongs;
        private ImmutableList<Double>? field_Doubles;
        private ImmutableList<DateTimeValue>? field_DateTimes;
        private ImmutableList<TimeSpan>? field_TimeSpans;
        private ImmutableList<DecimalValue>? field_Decimals;
        private ImmutableList<DateTimeOffsetValue>? field_DateTimeOffsets;
        private ImmutableList<GuidValue>? field_Guids;
        private ImmutableList<String?>? field_Strings;
        private ImmutableList<BinaryValue?>? field_Buffers;
        private ImmutableList<QuantityValue>? field_Quantities;
        private ImmutableList<System.DayOfWeek>? field_DaysOfWeek;
        private ImmutableList<MyDateTimeKindValue>? field_MyDateTimeKinds;
        private ImmutableList<MyCustomEnum>? field_MyCustomEnums;
        private ImmutableList<Half>? field_Halves;
        private ImmutableList<DateOnly>? field_Dates;
        private ImmutableList<TimeOnly>? field_Times;
        private ImmutableList<BigInteger>? field_BigInts;
        private ImmutableList<Complex>? field_Complexes;
        private ImmutableList<Version?>? field_Versions;

        // ---------- accessors ----------
        [Key(1)]
        public ImmutableList<Boolean>? Bools
        {
            get => field_Bools;
            set => field_Bools = CheckNotFrozen(ref value);
        }
        [Key(2)]
        public ImmutableList<SByte>? SBytes
        {
            get => field_SBytes;
            set => field_SBytes = CheckNotFrozen(ref value);
        }
        [Key(3)]
        public ImmutableList<Byte>? Bytes
        {
            get => field_Bytes;
            set => field_Bytes = CheckNotFrozen(ref value);
        }
        [Key(4)]
        public ImmutableList<Int16>? Shorts
        {
            get => field_Shorts;
            set => field_Shorts = CheckNotFrozen(ref value);
        }
        [Key(5)]
        public ImmutableList<UInt16>? UShorts
        {
            get => field_UShorts;
            set => field_UShorts = CheckNotFrozen(ref value);
        }
        [Key(6)]
        public ImmutableList<Char>? Chars
        {
            get => field_Chars;
            set => field_Chars = CheckNotFrozen(ref value);
        }
        [Key(7)]
        public ImmutableList<Int32>? Ints
        {
            get => field_Ints;
            set => field_Ints = CheckNotFrozen(ref value);
        }
        [Key(8)]
        public ImmutableList<UInt32>? UInts
        {
            get => field_UInts;
            set => field_UInts = CheckNotFrozen(ref value);
        }
        [Key(9)]
        public ImmutableList<Single>? Floats
        {
            get => field_Floats;
            set => field_Floats = CheckNotFrozen(ref value);
        }
        [Key(10)]
        public ImmutableList<Int64>? Longs
        {
            get => field_Longs;
            set => field_Longs = CheckNotFrozen(ref value);
        }
        [Key(11)]
        public ImmutableList<UInt64>? ULongs
        {
            get => field_ULongs;
            set => field_ULongs = CheckNotFrozen(ref value);
        }
        [Key(12)]
        public ImmutableList<Double>? Doubles
        {
            get => field_Doubles;
            set => field_Doubles = CheckNotFrozen(ref value);
        }
        [Key(13)]
        public ImmutableList<DateTimeValue>? DateTimes
        {
            get => field_DateTimes;
            set => field_DateTimes = CheckNotFrozen(ref value);
        }
        [Key(14)]
        public ImmutableList<TimeSpan>? TimeSpans
        {
            get => field_TimeSpans;
            set => field_TimeSpans = CheckNotFrozen(ref value);
        }
        [Key(15)]
        public ImmutableList<DecimalValue>? Decimals
        {
            get => field_Decimals;
            set => field_Decimals = CheckNotFrozen(ref value);
        }
        [Key(16)]
        public ImmutableList<DateTimeOffsetValue>? DateTimeOffsets
        {
            get => field_DateTimeOffsets;
            set => field_DateTimeOffsets = CheckNotFrozen(ref value);
        }
        [Key(17)]
        public ImmutableList<GuidValue>? Guids
        {
            get => field_Guids;
            set => field_Guids = CheckNotFrozen(ref value);
        }
        [Key(18)]
        public ImmutableList<String?>? Strings
        {
            get => field_Strings;
            set => field_Strings = CheckNotFrozen(ref value);
        }
        [Key(19)]
        public ImmutableList<BinaryValue?>? Buffers
        {
            get => field_Buffers;
            set => field_Buffers = CheckNotFrozen(ref value);
        }
        [Key(20)]
        public ImmutableList<QuantityValue>? Quantities
        {
            get => field_Quantities;
            set => field_Quantities = CheckNotFrozen(ref value);
        }
        [Key(21)]
        public ImmutableList<System.DayOfWeek>? DaysOfWeek
        {
            get => field_DaysOfWeek;
            set => field_DaysOfWeek = CheckNotFrozen(ref value);
        }
        [Key(22)]
        public ImmutableList<MyDateTimeKindValue>? MyDateTimeKinds
        {
            get => field_MyDateTimeKinds;
            set => field_MyDateTimeKinds = CheckNotFrozen(ref value);
        }
        [Key(23)]
        public ImmutableList<MyCustomEnum>? MyCustomEnums
        {
            get => field_MyCustomEnums;
            set => field_MyCustomEnums = CheckNotFrozen(ref value);
        }
        [Key(24)]
        public ImmutableList<Half>? Halves
        {
            get => field_Halves;
            set => field_Halves = CheckNotFrozen(ref value);
        }
        [Key(25)]
        public ImmutableList<DateOnly>? Dates
        {
            get => field_Dates;
            set => field_Dates = CheckNotFrozen(ref value);
        }
        [Key(26)]
        public ImmutableList<TimeOnly>? Times
        {
            get => field_Times;
            set => field_Times = CheckNotFrozen(ref value);
        }
        [Key(27)]
        public ImmutableList<BigInteger>? BigInts
        {
            get => field_BigInts;
            set => field_BigInts = CheckNotFrozen(ref value);
        }
        [Key(28)]
        public ImmutableList<Complex>? Complexes
        {
            get => field_Complexes;
            set => field_Complexes = CheckNotFrozen(ref value);
        }
        [Key(29)]
        public ImmutableList<Version?>? Versions
        {
            get => field_Versions;
            set => field_Versions = CheckNotFrozen(ref value);
        }

        // ---------- IBuiltinTypes methods ----------
        IReadOnlyList<Boolean>? IBuiltinTypes.Bools
            => field_Bools is null ? null
            : new ListFacade<Boolean, Boolean>(field_Bools, (x) => x.ToExternal());
        IReadOnlyList<SByte>? IBuiltinTypes.SBytes
            => field_SBytes is null ? null
            : new ListFacade<SByte, SByte>(field_SBytes, (x) => x.ToExternal());
        IReadOnlyList<Byte>? IBuiltinTypes.Bytes
            => field_Bytes is null ? null
            : new ListFacade<Byte, Byte>(field_Bytes, (x) => x.ToExternal());
        IReadOnlyList<Int16>? IBuiltinTypes.Shorts
            => field_Shorts is null ? null
            : new ListFacade<Int16, Int16>(field_Shorts, (x) => x.ToExternal());
        IReadOnlyList<UInt16>? IBuiltinTypes.UShorts
            => field_UShorts is null ? null
            : new ListFacade<UInt16, UInt16>(field_UShorts, (x) => x.ToExternal());
        IReadOnlyList<Char>? IBuiltinTypes.Chars
            => field_Chars is null ? null
            : new ListFacade<Char, Char>(field_Chars, (x) => x.ToExternal());
        IReadOnlyList<Int32>? IBuiltinTypes.Ints
            => field_Ints is null ? null
            : new ListFacade<Int32, Int32>(field_Ints, (x) => x.ToExternal());
        IReadOnlyList<UInt32>? IBuiltinTypes.UInts
            => field_UInts is null ? null
            : new ListFacade<UInt32, UInt32>(field_UInts, (x) => x.ToExternal());
        IReadOnlyList<Single>? IBuiltinTypes.Floats
            => field_Floats is null ? null
            : new ListFacade<Single, Single>(field_Floats, (x) => x.ToExternal());
        IReadOnlyList<Int64>? IBuiltinTypes.Longs
            => field_Longs is null ? null
            : new ListFacade<Int64, Int64>(field_Longs, (x) => x.ToExternal());
        IReadOnlyList<UInt64>? IBuiltinTypes.ULongs
            => field_ULongs is null ? null
            : new ListFacade<UInt64, UInt64>(field_ULongs, (x) => x.ToExternal());
        IReadOnlyList<Double>? IBuiltinTypes.Doubles
            => field_Doubles is null ? null
            : new ListFacade<Double, Double>(field_Doubles, (x) => x.ToExternal());
        IReadOnlyList<DateTime>? IBuiltinTypes.DateTimes
            => field_DateTimes is null ? null
            : new ListFacade<DateTime, DateTimeValue>(field_DateTimes, (x) => x.ToExternal());
        IReadOnlyList<TimeSpan>? IBuiltinTypes.TimeSpans
            => field_TimeSpans is null ? null
            : new ListFacade<TimeSpan, TimeSpan>(field_TimeSpans, (x) => x.ToExternal());
        IReadOnlyList<Decimal>? IBuiltinTypes.Decimals
            => field_Decimals is null ? null
            : new ListFacade<Decimal, DecimalValue>(field_Decimals, (x) => x.ToExternal());
        IReadOnlyList<DateTimeOffset>? IBuiltinTypes.DateTimeOffsets
            => field_DateTimeOffsets is null ? null
            : new ListFacade<DateTimeOffset, DateTimeOffsetValue>(field_DateTimeOffsets, (x) => x.ToExternal());
        IReadOnlyList<Guid>? IBuiltinTypes.Guids
            => field_Guids is null ? null
            : new ListFacade<Guid, GuidValue>(field_Guids, (x) => x.ToExternal());
        IReadOnlyList<String?>? IBuiltinTypes.Strings => field_Strings;
        IReadOnlyList<Octets?>? IBuiltinTypes.Buffers => field_Buffers is null
            ? null
            : new ListFacade<Octets, BinaryValue>(field_Buffers, x => (Octets?)x);
        IReadOnlyList<LabApps.Units.Quantity>? IBuiltinTypes.Quantities
            => field_Quantities is null ? null
            : new ListFacade<LabApps.Units.Quantity, QuantityValue>(field_Quantities, (x) => x.ToExternal());
        IReadOnlyList<System.DayOfWeek>? IBuiltinTypes.DaysOfWeek
            => field_DaysOfWeek is null ? null
            : new ListFacade<System.DayOfWeek, System.DayOfWeek>(field_DaysOfWeek, (x) => x.ToExternal());
        IReadOnlyList<System.DateTimeKind>? IBuiltinTypes.MyDateTimeKinds
            => field_MyDateTimeKinds is null ? null
            : new ListFacade<System.DateTimeKind, MyDateTimeKindValue>(field_MyDateTimeKinds, (x) => x.ToExternal());
        IReadOnlyList<MyCustomEnum>? IBuiltinTypes.MyCustomEnums
            => field_MyCustomEnums is null ? null
            : new ListFacade<MyCustomEnum, MyCustomEnum>(field_MyCustomEnums, (x) => x.ToExternal());
        IReadOnlyList<Half>? IBuiltinTypes.Halves
            => field_Halves is null ? null
            : new ListFacade<Half, Half>(field_Halves, (x) => x.ToExternal());
        IReadOnlyList<DateOnly>? IBuiltinTypes.Dates
            => field_Dates is null ? null
            : new ListFacade<DateOnly, DateOnly>(field_Dates, (x) => x.ToExternal());
        IReadOnlyList<TimeOnly>? IBuiltinTypes.Times
            => field_Times is null ? null
            : new ListFacade<TimeOnly, TimeOnly>(field_Times, (x) => x.ToExternal());
        IReadOnlyList<BigInteger>? IBuiltinTypes.BigInts
            => field_BigInts is null ? null
            : new ListFacade<BigInteger, BigInteger>(field_BigInts, (x) => x.ToExternal());
        IReadOnlyList<Complex>? IBuiltinTypes.Complexes
            => field_Complexes is null ? null
            : new ListFacade<Complex, Complex>(field_Complexes, (x) => x.ToExternal());
        IReadOnlyList<Version?>? IBuiltinTypes.Versions
            => field_Versions is null ? null
            : new ListFacade<Version?, Version?>(field_Versions, (x) => x.ToExternal());

        public BuiltinTypes()
        {
        }

        public BuiltinTypes(BuiltinTypes source) : base(source)
        {
            field_Bools = source.field_Bools;
            field_SBytes = source.field_SBytes;
            field_Bytes = source.field_Bytes;
            field_Shorts = source.field_Shorts;
            field_UShorts = source.field_UShorts;
            field_Chars = source.field_Chars;
            field_Ints = source.field_Ints;
            field_UInts = source.field_UInts;
            field_Floats = source.field_Floats;
            field_Longs = source.field_Longs;
            field_ULongs = source.field_ULongs;
            field_Doubles = source.field_Doubles;
            field_DateTimes = source.field_DateTimes;
            field_TimeSpans = source.field_TimeSpans;
            field_Decimals = source.field_Decimals;
            field_DateTimeOffsets = source.field_DateTimeOffsets;
            field_Guids = source.field_Guids;
            field_Strings = source.field_Strings;
            field_Buffers = source.field_Buffers;
            field_Quantities = source.field_Quantities;
            field_DaysOfWeek = source.field_DaysOfWeek;
            field_MyDateTimeKinds = source.field_MyDateTimeKinds;
            field_MyCustomEnums = source.field_MyCustomEnums;
            field_Halves = source.field_Halves;
            field_Dates = source.field_Dates;
            field_Times = source.field_Times;
            field_BigInts = source.field_BigInts;
            field_Complexes = source.field_Complexes;
            field_Versions = source.field_Versions;
        }

        public void CopyFrom(BuiltinTypes source)
        {
            base.CopyFrom(source);
            field_Bools = source.field_Bools;
            field_SBytes = source.field_SBytes;
            field_Bytes = source.field_Bytes;
            field_Shorts = source.field_Shorts;
            field_UShorts = source.field_UShorts;
            field_Chars = source.field_Chars;
            field_Ints = source.field_Ints;
            field_UInts = source.field_UInts;
            field_Floats = source.field_Floats;
            field_Longs = source.field_Longs;
            field_ULongs = source.field_ULongs;
            field_Doubles = source.field_Doubles;
            field_DateTimes = source.field_DateTimes;
            field_TimeSpans = source.field_TimeSpans;
            field_Decimals = source.field_Decimals;
            field_DateTimeOffsets = source.field_DateTimeOffsets;
            field_Guids = source.field_Guids;
            field_Strings = source.field_Strings;
            field_Buffers = source.field_Buffers;
            field_Quantities = source.field_Quantities;
            field_DaysOfWeek = source.field_DaysOfWeek;
            field_MyDateTimeKinds = source.field_MyDateTimeKinds;
            field_MyCustomEnums = source.field_MyCustomEnums;
            field_Halves = source.field_Halves;
            field_Dates = source.field_Dates;
            field_Times = source.field_Times;
            field_BigInts = source.field_BigInts;
            field_Complexes = source.field_Complexes;
            field_Versions = source.field_Versions;
        }

        public BuiltinTypes(IBuiltinTypes source) : base(source)
        {
            field_Bools = source.Bools is null
                ? null
                : ImmutableList<Boolean>.Empty.AddRange(source.Bools.Select(x => x.ToInternal()));
            field_SBytes = source.SBytes is null
                ? null
                : ImmutableList<SByte>.Empty.AddRange(source.SBytes.Select(x => x.ToInternal()));
            field_Bytes = source.Bytes is null
                ? null
                : ImmutableList<Byte>.Empty.AddRange(source.Bytes.Select(x => x.ToInternal()));
            field_Shorts = source.Shorts is null
                ? null
                : ImmutableList<Int16>.Empty.AddRange(source.Shorts.Select(x => x.ToInternal()));
            field_UShorts = source.UShorts is null
                ? null
                : ImmutableList<UInt16>.Empty.AddRange(source.UShorts.Select(x => x.ToInternal()));
            field_Chars = source.Chars is null
                ? null
                : ImmutableList<Char>.Empty.AddRange(source.Chars.Select(x => x.ToInternal()));
            field_Ints = source.Ints is null
                ? null
                : ImmutableList<Int32>.Empty.AddRange(source.Ints.Select(x => x.ToInternal()));
            field_UInts = source.UInts is null
                ? null
                : ImmutableList<UInt32>.Empty.AddRange(source.UInts.Select(x => x.ToInternal()));
            field_Floats = source.Floats is null
                ? null
                : ImmutableList<Single>.Empty.AddRange(source.Floats.Select(x => x.ToInternal()));
            field_Longs = source.Longs is null
                ? null
                : ImmutableList<Int64>.Empty.AddRange(source.Longs.Select(x => x.ToInternal()));
            field_ULongs = source.ULongs is null
                ? null
                : ImmutableList<UInt64>.Empty.AddRange(source.ULongs.Select(x => x.ToInternal()));
            field_Doubles = source.Doubles is null
                ? null
                : ImmutableList<Double>.Empty.AddRange(source.Doubles.Select(x => x.ToInternal()));
            field_DateTimes = source.DateTimes is null
                ? null
                : ImmutableList<DateTimeValue>.Empty.AddRange(source.DateTimes.Select(x => x.ToInternal()));
            field_TimeSpans = source.TimeSpans is null
                ? null
                : ImmutableList<TimeSpan>.Empty.AddRange(source.TimeSpans.Select(x => x.ToInternal()));
            field_Decimals = source.Decimals is null
                ? null
                : ImmutableList<DecimalValue>.Empty.AddRange(source.Decimals.Select(x => x.ToInternal()));
            field_DateTimeOffsets = source.DateTimeOffsets is null
                ? null
                : ImmutableList<DateTimeOffsetValue>.Empty.AddRange(source.DateTimeOffsets.Select(x => x.ToInternal()));
            field_Guids = source.Guids is null
                ? null
                : ImmutableList<GuidValue>.Empty.AddRange(source.Guids.Select(x => x.ToInternal()));
            field_Strings = source.Strings is null
                ? null
                : ImmutableList<String?>.Empty.AddRange(source.Strings);
            field_Buffers = source.Buffers is null
                ? null
                : ImmutableList<BinaryValue?>.Empty.AddRange(source.Buffers.Select(x => (BinaryValue?)x));
            field_Quantities = source.Quantities is null
                ? null
                : ImmutableList<QuantityValue>.Empty.AddRange(source.Quantities.Select(x => x.ToInternal()));
            field_DaysOfWeek = source.DaysOfWeek is null
                ? null
                : ImmutableList<System.DayOfWeek>.Empty.AddRange(source.DaysOfWeek.Select(x => x.ToInternal()));
            field_MyDateTimeKinds = source.MyDateTimeKinds is null
                ? null
                : ImmutableList<MyDateTimeKindValue>.Empty.AddRange(source.MyDateTimeKinds.Select(x => x.ToInternal()));
            field_MyCustomEnums = source.MyCustomEnums is null
                ? null
                : ImmutableList<MyCustomEnum>.Empty.AddRange(source.MyCustomEnums.Select(x => x.ToInternal()));
            field_Halves = source.Halves is null
                ? null
                : ImmutableList<Half>.Empty.AddRange(source.Halves.Select(x => x.ToInternal()));
            field_Dates = source.Dates is null
                ? null
                : ImmutableList<DateOnly>.Empty.AddRange(source.Dates.Select(x => x.ToInternal()));
            field_Times = source.Times is null
                ? null
                : ImmutableList<TimeOnly>.Empty.AddRange(source.Times.Select(x => x.ToInternal()));
            field_BigInts = source.BigInts is null
                ? null
                : ImmutableList<BigInteger>.Empty.AddRange(source.BigInts.Select(x => x.ToInternal()));
            field_Complexes = source.Complexes is null
                ? null
                : ImmutableList<Complex>.Empty.AddRange(source.Complexes.Select(x => x.ToInternal()));
            field_Versions = source.Versions is null
                ? null
                : ImmutableList<Version?>.Empty.AddRange(source.Versions.Select(x => x.ToInternal()));
        }

        public bool Equals(BuiltinTypes? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!field_Bools.ArrayEquals(other.field_Bools)) return false;
            if (!field_SBytes.ArrayEquals(other.field_SBytes)) return false;
            if (!field_Bytes.ArrayEquals(other.field_Bytes)) return false;
            if (!field_Shorts.ArrayEquals(other.field_Shorts)) return false;
            if (!field_UShorts.ArrayEquals(other.field_UShorts)) return false;
            if (!field_Chars.ArrayEquals(other.field_Chars)) return false;
            if (!field_Ints.ArrayEquals(other.field_Ints)) return false;
            if (!field_UInts.ArrayEquals(other.field_UInts)) return false;
            if (!field_Floats.ArrayEquals(other.field_Floats)) return false;
            if (!field_Longs.ArrayEquals(other.field_Longs)) return false;
            if (!field_ULongs.ArrayEquals(other.field_ULongs)) return false;
            if (!field_Doubles.ArrayEquals(other.field_Doubles)) return false;
            if (!field_DateTimes.ArrayEquals(other.field_DateTimes)) return false;
            if (!field_TimeSpans.ArrayEquals(other.field_TimeSpans)) return false;
            if (!field_Decimals.ArrayEquals(other.field_Decimals)) return false;
            if (!field_DateTimeOffsets.ArrayEquals(other.field_DateTimeOffsets)) return false;
            if (!field_Guids.ArrayEquals(other.field_Guids)) return false;
            if (!field_Strings.ArrayEquals(other.field_Strings)) return false;
            if (!field_Buffers.ArrayEquals(other.field_Buffers)) return false;
            if (!field_Quantities.ArrayEquals(other.field_Quantities)) return false;
            if (!field_DaysOfWeek.ArrayEquals(other.field_DaysOfWeek)) return false;
            if (!field_MyDateTimeKinds.ArrayEquals(other.field_MyDateTimeKinds)) return false;
            if (!field_MyCustomEnums.ArrayEquals(other.field_MyCustomEnums)) return false;
            if (!field_Halves.ArrayEquals(other.field_Halves)) return false;
            if (!field_Dates.ArrayEquals(other.field_Dates)) return false;
            if (!field_Times.ArrayEquals(other.field_Times)) return false;
            if (!field_BigInts.ArrayEquals(other.field_BigInts)) return false;
            if (!field_Complexes.ArrayEquals(other.field_Complexes)) return false;
            if (!field_Versions.ArrayEquals(other.field_Versions)) return false;
            return base.Equals(other);
        }

        public static bool operator ==(BuiltinTypes left, BuiltinTypes right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        public static bool operator !=(BuiltinTypes left, BuiltinTypes right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        public override bool Equals(object? obj)
        {
            return obj is BuiltinTypes other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(field_Bools.CalcHashArray());
            hc.Add(field_SBytes.CalcHashArray());
            hc.Add(field_Bytes.CalcHashArray());
            hc.Add(field_Shorts.CalcHashArray());
            hc.Add(field_UShorts.CalcHashArray());
            hc.Add(field_Chars.CalcHashArray());
            hc.Add(field_Ints.CalcHashArray());
            hc.Add(field_UInts.CalcHashArray());
            hc.Add(field_Floats.CalcHashArray());
            hc.Add(field_Longs.CalcHashArray());
            hc.Add(field_ULongs.CalcHashArray());
            hc.Add(field_Doubles.CalcHashArray());
            hc.Add(field_DateTimes.CalcHashArray());
            hc.Add(field_TimeSpans.CalcHashArray());
            hc.Add(field_Decimals.CalcHashArray());
            hc.Add(field_DateTimeOffsets.CalcHashArray());
            hc.Add(field_Guids.CalcHashArray());
            hc.Add(field_Strings.CalcHashArray());
            hc.Add(field_Buffers.CalcHashArray());
            hc.Add(field_Quantities.CalcHashArray());
            hc.Add(field_DaysOfWeek.CalcHashArray());
            hc.Add(field_MyDateTimeKinds.CalcHashArray());
            hc.Add(field_MyCustomEnums.CalcHashArray());
            hc.Add(field_Halves.CalcHashArray());
            hc.Add(field_Dates.CalcHashArray());
            hc.Add(field_Times.CalcHashArray());
            hc.Add(field_BigInts.CalcHashArray());
            hc.Add(field_Complexes.CalcHashArray());
            hc.Add(field_Versions.CalcHashArray());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (!_isFrozen) return CalcHashCode();
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }


}