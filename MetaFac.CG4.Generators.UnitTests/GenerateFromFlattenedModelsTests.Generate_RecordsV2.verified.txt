// <auto-generated />
#region Auto-generated
//--------------------------------------------------------------------------------
// Warning: This file was automatically generated. Changes to this file may
// cause incorrect behavior and will be lost when this file is regenerated.
//
// This file was generated using MetaFac.CG4 tools and user supplied metadata.
//
// To download and install the tool, the .NET CLI command is:
// dotnet tool install --global MetaFac.CG4.CLI
//
// For more information about using this tool, the help command is:
// mfcg4 g2c --help
//--------------------------------------------------------------------------------
#endregion
#nullable enable
using MetaFac.Mutability;
using MetaFac.CG4.Runtime;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Runtime.CompilerServices;
using Generated.Contracts;

namespace Generated.RecordsV2
{


    public abstract record EntityBase : IFreezable, IEntityBase
    {
        public EntityBase() { }
        public EntityBase(EntityBase? source) { }
        public EntityBase(IEntityBase? source) { }
        public const int EntityTag = 0;
        protected abstract int OnGetEntityTag();
        public int GetEntityTag() => OnGetEntityTag();
        public virtual bool Equals(EntityBase? other) => true;
        public override int GetHashCode() => 0;
        public static EntityBase Empty => throw new NotSupportedException();
        public bool IsFreezable() => false;
        public bool IsFrozen() => true;
        public void Freeze() { }
        public bool TryFreeze() => false;
    }


    public abstract partial record BuiltinTypes
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static BuiltinTypes? CreateFrom(IBuiltinTypes? source)
        {
            if (source is null) return null;
            int entityTag = source.GetEntityTag();
            switch (entityTag)
            {
                default:
                    throw new InvalidOperationException($"Unable to create {typeof(BuiltinTypes)} from {source.GetType().Name}");
            }
        }

    }
    public partial record BuiltinTypes : EntityBase, IBuiltinTypes
    {
        public new const int EntityTag = 1;
        protected override int OnGetEntityTag() => EntityTag;

        public ImmutableList<Boolean>? Bools { get; init; }
        IReadOnlyList<Boolean>? IBuiltinTypes.Bools => Bools;
        public ImmutableList<SByte>? SBytes { get; init; }
        IReadOnlyList<SByte>? IBuiltinTypes.SBytes => SBytes;
        public ImmutableList<Byte>? Bytes { get; init; }
        IReadOnlyList<Byte>? IBuiltinTypes.Bytes => Bytes;
        public ImmutableList<Int16>? Shorts { get; init; }
        IReadOnlyList<Int16>? IBuiltinTypes.Shorts => Shorts;
        public ImmutableList<UInt16>? UShorts { get; init; }
        IReadOnlyList<UInt16>? IBuiltinTypes.UShorts => UShorts;
        public ImmutableList<Char>? Chars { get; init; }
        IReadOnlyList<Char>? IBuiltinTypes.Chars => Chars;
        public ImmutableList<Int32>? Ints { get; init; }
        IReadOnlyList<Int32>? IBuiltinTypes.Ints => Ints;
        public ImmutableList<UInt32>? UInts { get; init; }
        IReadOnlyList<UInt32>? IBuiltinTypes.UInts => UInts;
        public ImmutableList<Single>? Floats { get; init; }
        IReadOnlyList<Single>? IBuiltinTypes.Floats => Floats;
        public ImmutableList<Int64>? Longs { get; init; }
        IReadOnlyList<Int64>? IBuiltinTypes.Longs => Longs;
        public ImmutableList<UInt64>? ULongs { get; init; }
        IReadOnlyList<UInt64>? IBuiltinTypes.ULongs => ULongs;
        public ImmutableList<Double>? Doubles { get; init; }
        IReadOnlyList<Double>? IBuiltinTypes.Doubles => Doubles;
        public ImmutableList<DateTime>? DateTimes { get; init; }
        IReadOnlyList<DateTime>? IBuiltinTypes.DateTimes => DateTimes;
        public ImmutableList<TimeSpan>? TimeSpans { get; init; }
        IReadOnlyList<TimeSpan>? IBuiltinTypes.TimeSpans => TimeSpans;
        public ImmutableList<Decimal>? Decimals { get; init; }
        IReadOnlyList<Decimal>? IBuiltinTypes.Decimals => Decimals;
        public ImmutableList<DateTimeOffset>? DateTimeOffsets { get; init; }
        IReadOnlyList<DateTimeOffset>? IBuiltinTypes.DateTimeOffsets => DateTimeOffsets;
        public ImmutableList<Guid>? Guids { get; init; }
        IReadOnlyList<Guid>? IBuiltinTypes.Guids => Guids;
        public ImmutableList<String?>? Strings { get; init; }
        IReadOnlyList<String?>? IBuiltinTypes.Strings => Strings;
        public ImmutableList<ReadOnlyMemory<byte>>? Buffers { get; init; }
        IReadOnlyList<ReadOnlyMemory<byte>>? IBuiltinTypes.Buffers => Buffers is null
            ? null
            : new ListFacade<ReadOnlyMemory<byte>, ReadOnlyMemory<byte>>(Buffers, (x) => x);
        public ImmutableList<LabApps.Units.Quantity>? Quantities { get; init; }
        IReadOnlyList<LabApps.Units.Quantity>? IBuiltinTypes.Quantities => Quantities;
        public ImmutableList<System.DayOfWeek>? MyDaysOfWeek { get; init; }
        IReadOnlyList<System.DayOfWeek>? IBuiltinTypes.MyDaysOfWeek => MyDaysOfWeek;
        public ImmutableList<System.DateTimeKind>? MyDateTimeKinds { get; init; }
        IReadOnlyList<System.DateTimeKind>? IBuiltinTypes.MyDateTimeKinds => MyDateTimeKinds;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public BuiltinTypes() : base()
        {
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public BuiltinTypes(BuiltinTypes? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            Bools = source.Bools;
            SBytes = source.SBytes;
            Bytes = source.Bytes;
            Shorts = source.Shorts;
            UShorts = source.UShorts;
            Chars = source.Chars;
            Ints = source.Ints;
            UInts = source.UInts;
            Floats = source.Floats;
            Longs = source.Longs;
            ULongs = source.ULongs;
            Doubles = source.Doubles;
            DateTimes = source.DateTimes;
            TimeSpans = source.TimeSpans;
            Decimals = source.Decimals;
            DateTimeOffsets = source.DateTimeOffsets;
            Guids = source.Guids;
            Strings = source.Strings;
            Buffers = source.Buffers;
            Quantities = source.Quantities;
            MyDaysOfWeek = source.MyDaysOfWeek;
            MyDateTimeKinds = source.MyDateTimeKinds;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public BuiltinTypes(IBuiltinTypes? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            Bools = source.Bools is null
                ? default
                : ImmutableList<Boolean>.Empty.AddRange(source.Bools);
            SBytes = source.SBytes is null
                ? default
                : ImmutableList<SByte>.Empty.AddRange(source.SBytes);
            Bytes = source.Bytes is null
                ? default
                : ImmutableList<Byte>.Empty.AddRange(source.Bytes);
            Shorts = source.Shorts is null
                ? default
                : ImmutableList<Int16>.Empty.AddRange(source.Shorts);
            UShorts = source.UShorts is null
                ? default
                : ImmutableList<UInt16>.Empty.AddRange(source.UShorts);
            Chars = source.Chars is null
                ? default
                : ImmutableList<Char>.Empty.AddRange(source.Chars);
            Ints = source.Ints is null
                ? default
                : ImmutableList<Int32>.Empty.AddRange(source.Ints);
            UInts = source.UInts is null
                ? default
                : ImmutableList<UInt32>.Empty.AddRange(source.UInts);
            Floats = source.Floats is null
                ? default
                : ImmutableList<Single>.Empty.AddRange(source.Floats);
            Longs = source.Longs is null
                ? default
                : ImmutableList<Int64>.Empty.AddRange(source.Longs);
            ULongs = source.ULongs is null
                ? default
                : ImmutableList<UInt64>.Empty.AddRange(source.ULongs);
            Doubles = source.Doubles is null
                ? default
                : ImmutableList<Double>.Empty.AddRange(source.Doubles);
            DateTimes = source.DateTimes is null
                ? default
                : ImmutableList<DateTime>.Empty.AddRange(source.DateTimes);
            TimeSpans = source.TimeSpans is null
                ? default
                : ImmutableList<TimeSpan>.Empty.AddRange(source.TimeSpans);
            Decimals = source.Decimals is null
                ? default
                : ImmutableList<Decimal>.Empty.AddRange(source.Decimals);
            DateTimeOffsets = source.DateTimeOffsets is null
                ? default
                : ImmutableList<DateTimeOffset>.Empty.AddRange(source.DateTimeOffsets);
            Guids = source.Guids is null
                ? default
                : ImmutableList<Guid>.Empty.AddRange(source.Guids);
            Strings = source.Strings is null
                ? default
                : ImmutableList<String?>.Empty.AddRange(source.Strings);
            Buffers = source.Buffers is null
                ? default
                : ImmutableList<ReadOnlyMemory<byte>>.Empty.AddRange(source.Buffers
                    .Select(x => (ReadOnlyMemory<byte>)x));
            Quantities = source.Quantities is null
                ? default
                : ImmutableList<LabApps.Units.Quantity>.Empty.AddRange(source.Quantities);
            MyDaysOfWeek = source.MyDaysOfWeek is null
                ? default
                : ImmutableList<System.DayOfWeek>.Empty.AddRange(source.MyDaysOfWeek);
            MyDateTimeKinds = source.MyDateTimeKinds is null
                ? default
                : ImmutableList<System.DateTimeKind>.Empty.AddRange(source.MyDateTimeKinds);
        }

        public virtual bool Equals(BuiltinTypes? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!Bools.ArrayEquals(other.Bools)) return false;
            if (!SBytes.ArrayEquals(other.SBytes)) return false;
            if (!Bytes.ArrayEquals(other.Bytes)) return false;
            if (!Shorts.ArrayEquals(other.Shorts)) return false;
            if (!UShorts.ArrayEquals(other.UShorts)) return false;
            if (!Chars.ArrayEquals(other.Chars)) return false;
            if (!Ints.ArrayEquals(other.Ints)) return false;
            if (!UInts.ArrayEquals(other.UInts)) return false;
            if (!Floats.ArrayEquals(other.Floats)) return false;
            if (!Longs.ArrayEquals(other.Longs)) return false;
            if (!ULongs.ArrayEquals(other.ULongs)) return false;
            if (!Doubles.ArrayEquals(other.Doubles)) return false;
            if (!DateTimes.ArrayEquals(other.DateTimes)) return false;
            if (!TimeSpans.ArrayEquals(other.TimeSpans)) return false;
            if (!Decimals.ArrayEquals(other.Decimals)) return false;
            if (!DateTimeOffsets.ArrayEquals(other.DateTimeOffsets)) return false;
            if (!Guids.ArrayEquals(other.Guids)) return false;
            if (!Strings.ArrayEquals(other.Strings)) return false;
            if (!Buffers.ArrayEquals(other.Buffers)) return false;
            if (!Quantities.ArrayEquals(other.Quantities)) return false;
            if (!MyDaysOfWeek.ArrayEquals(other.MyDaysOfWeek)) return false;
            if (!MyDateTimeKinds.ArrayEquals(other.MyDateTimeKinds)) return false;
            return base.Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(Bools.CalcHashArray());
            hc.Add(SBytes.CalcHashArray());
            hc.Add(Bytes.CalcHashArray());
            hc.Add(Shorts.CalcHashArray());
            hc.Add(UShorts.CalcHashArray());
            hc.Add(Chars.CalcHashArray());
            hc.Add(Ints.CalcHashArray());
            hc.Add(UInts.CalcHashArray());
            hc.Add(Floats.CalcHashArray());
            hc.Add(Longs.CalcHashArray());
            hc.Add(ULongs.CalcHashArray());
            hc.Add(Doubles.CalcHashArray());
            hc.Add(DateTimes.CalcHashArray());
            hc.Add(TimeSpans.CalcHashArray());
            hc.Add(Decimals.CalcHashArray());
            hc.Add(DateTimeOffsets.CalcHashArray());
            hc.Add(Guids.CalcHashArray());
            hc.Add(Strings.CalcHashArray());
            hc.Add(Buffers.CalcHashArray());
            hc.Add(Quantities.CalcHashArray());
            hc.Add(MyDaysOfWeek.CalcHashArray());
            hc.Add(MyDateTimeKinds.CalcHashArray());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }
    }



}