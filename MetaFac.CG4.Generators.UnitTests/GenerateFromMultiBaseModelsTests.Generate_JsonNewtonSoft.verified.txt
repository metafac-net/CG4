#region Notices
// <auto-generated>
// Warning: This file was automatically generated. Changes to this file may
// cause incorrect behavior and will be lost when this file is regenerated.
// </auto-generated>
// <copyright>
//     Copyright (c) 2023 MetaFac
// </copyright>
// <information>
// This file was generated using MetaFac.CG4 tools and user supplied metadata.
// Generator: JsonNewtonSoft.2.6
// Metadata : MetaFac.CG4.Generators.UnitTests(.MultiBaseModels)
// </information>
#endregion
#nullable enable
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
#pragma warning disable CS8019 // Unnecessary using directive
using MetaFac.Mutability;
using MetaFac.CG4.Runtime;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Numerics;
using Generated.Contracts;
using MetaFac.Memory;

namespace Generated.JsonNewtonSoft
{


    public abstract class EntityBase : IFreezable, IEntityBase
    {
        public static EntityBase Empty => throw new NotSupportedException();
        public const int EntityTag = 0;
        public EntityBase() { }
        public EntityBase(EntityBase? source) { }
        public EntityBase(IEntityBase? source) { }
        public void CopyFrom(IEntityBase? source) { }
        protected abstract int OnGetEntityTag();
        public int GetEntityTag() => OnGetEntityTag();
        public bool Equals(EntityBase? other) => true;
        public override int GetHashCode() => 0;

        public bool IsFreezable() => false;
        public bool IsFrozen() => false;
        public void Freeze() { }
        public bool TryFreeze() => true;
    }


    public sealed class SavingsAccount_Factory : IEntityFactory<ISavingsAccount, SavingsAccount>
    {
        private static readonly SavingsAccount_Factory _instance = new SavingsAccount_Factory();
        public static SavingsAccount_Factory Instance => _instance;
        public SavingsAccount? CreateFrom(ISavingsAccount? source) => (source is null) ? null : new SavingsAccount(source);
        public SavingsAccount Empty => new SavingsAccount();
    }
    public partial class SavingsAccount : AccountType, ISavingsAccount, IEquatable<SavingsAccount>
    {
        public new const int EntityTag = 11;
        protected override int OnGetEntityTag() => EntityTag;

        private String? field_AccountName;
        String? ISavingsAccount.AccountName => field_AccountName;
        public String? AccountName
        {
            get => field_AccountName;
            set => field_AccountName = value;
        }

        public SavingsAccount() : base()
        {
        }

        public SavingsAccount(SavingsAccount? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_AccountName = source.AccountName;
        }

        public SavingsAccount(ISavingsAccount? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_AccountName = source.AccountName;
        }

        public void CopyFrom(ISavingsAccount? source)
        {
            if (source is null) return;
            base.CopyFrom(source);
            field_AccountName = source.AccountName;
        }

        public bool Equals(SavingsAccount? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!base.Equals(other)) return false;
            if (!AccountName.ValueEquals(other.AccountName)) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is SavingsAccount other && Equals(other);

        public override int GetHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(base.GetHashCode());
            hc.Add(AccountName.CalcHashUnary());
            return hc.ToHashCode();
        }
    }

    public sealed class Withdrawl_Factory : IEntityFactory<IWithdrawl, Withdrawl>
    {
        private static readonly Withdrawl_Factory _instance = new Withdrawl_Factory();
        public static Withdrawl_Factory Instance => _instance;
        public Withdrawl? CreateFrom(IWithdrawl? source) => (source is null) ? null : new Withdrawl(source);
        public Withdrawl Empty => new Withdrawl();
    }
    public partial class Withdrawl : TransactionType, IWithdrawl, IEquatable<Withdrawl>
    {
        public new const int EntityTag = 12;
        protected override int OnGetEntityTag() => EntityTag;

        private String? field_SourceAccountId;
        String? IWithdrawl.SourceAccountId => field_SourceAccountId;
        public String? SourceAccountId
        {
            get => field_SourceAccountId;
            set => field_SourceAccountId = value;
        }
        private String? field_TargetAccountId;
        String? IWithdrawl.TargetAccountId => field_TargetAccountId;
        public String? TargetAccountId
        {
            get => field_TargetAccountId;
            set => field_TargetAccountId = value;
        }
        private Decimal field_Amount;
        Decimal IWithdrawl.Amount { get => field_Amount; }
        public Decimal Amount
        {
            get => field_Amount;
            set => field_Amount = value;
        }
        private String? field_CurrencyCode3;
        String? IWithdrawl.CurrencyCode3 => field_CurrencyCode3;
        public String? CurrencyCode3
        {
            get => field_CurrencyCode3;
            set => field_CurrencyCode3 = value;
        }

        public Withdrawl() : base()
        {
        }

        public Withdrawl(Withdrawl? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_SourceAccountId = source.SourceAccountId;
            field_TargetAccountId = source.TargetAccountId;
            field_Amount = source.Amount;
            field_CurrencyCode3 = source.CurrencyCode3;
        }

        public Withdrawl(IWithdrawl? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_SourceAccountId = source.SourceAccountId;
            field_TargetAccountId = source.TargetAccountId;
            field_Amount = source.Amount;
            field_CurrencyCode3 = source.CurrencyCode3;
        }

        public void CopyFrom(IWithdrawl? source)
        {
            if (source is null) return;
            base.CopyFrom(source);
            field_SourceAccountId = source.SourceAccountId;
            field_TargetAccountId = source.TargetAccountId;
            field_Amount = source.Amount;
            field_CurrencyCode3 = source.CurrencyCode3;
        }

        public bool Equals(Withdrawl? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!base.Equals(other)) return false;
            if (!SourceAccountId.ValueEquals(other.SourceAccountId)) return false;
            if (!TargetAccountId.ValueEquals(other.TargetAccountId)) return false;
            if (!Amount .ValueEquals(other.Amount)) return false;
            if (!CurrencyCode3.ValueEquals(other.CurrencyCode3)) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is Withdrawl other && Equals(other);

        public override int GetHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(base.GetHashCode());
            hc.Add(SourceAccountId.CalcHashUnary());
            hc.Add(TargetAccountId.CalcHashUnary());
            hc.Add(Amount.CalcHashUnary());
            hc.Add(CurrencyCode3.CalcHashUnary());
            return hc.ToHashCode();
        }
    }


#if NET6_0_OR_GREATER
    public struct HalfValue
    {
        public short Value { get; set; }
        public HalfValue() { }
        public HalfValue(short value) => Value = value;
        public override int GetHashCode() => HashCode.Combine(Value);
        public override bool Equals(object? obj) => obj is HalfValue other && Equals(other);
        public bool Equals(HalfValue other) => other.Value.Equals(Value);
        public static bool operator ==(HalfValue left, HalfValue right) => left.Equals(right);
        public static bool operator !=(HalfValue left, HalfValue right) => !left.Equals(right);

        public static implicit operator HalfValue(Half value) => new HalfValue(BitConverter.HalfToInt16Bits(value));
        public static implicit operator Half(HalfValue value) => BitConverter.Int16BitsToHalf(value.Value);
    }
#endif

}