#region Notices
// <auto-generated>
// Warning: This file was automatically generated. Changes to this file may
// cause incorrect behavior and will be lost when this file is regenerated.
// </auto-generated>
// <copyright>
//     Copyright (c) 2023 MetaFac
// </copyright>
// <information>
// This file was generated using MetaFac.CG4 tools and user supplied metadata.
// Generator: JsonNewtonSoft.2.0
// Metadata : MetaFac.CG4.Generators.UnitTests(.Indexes)
// </information>
#endregion
#nullable enable
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
#pragma warning disable CS8019 // Unnecessary using directive
using MetaFac.Mutability;
using MetaFac.CG4.Runtime;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Runtime.CompilerServices;
using Generated.Contracts;
using MetaFac.Memory;

namespace Generated.JsonNewtonSoft
{


    public abstract class EntityBase : IFreezable, IEntityBase
    {
        public static EntityBase Empty => throw new NotSupportedException();
        public const int EntityTag = 0;
        public EntityBase() { }
        public EntityBase(EntityBase? source) { }
        public EntityBase(IEntityBase? source) { }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void CopyFrom(IEntityBase? source) { }
        protected abstract int OnGetEntityTag();
        public int GetEntityTag() => OnGetEntityTag();
        public virtual bool Equals(EntityBase? other) => true;
        public override int GetHashCode() => 0;

        public bool IsFreezable() => false;
        public bool IsFrozen() => false;
        public void Freeze() { }
        public bool TryFreeze() => true;
    }


    public partial class IndexTypes
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static IndexTypes? CreateFrom(IIndexTypes? source)
        {
            if (source is null) return null;
            return new IndexTypes(source);
        }

        private static IndexTypes CreateEmpty()
        {
            var empty = new IndexTypes();
            empty.Freeze();
            return empty;
        }
        private static readonly IndexTypes _empty = CreateEmpty();
        public static new IndexTypes Empty => _empty;

    }
    public partial class IndexTypes : EntityBase, IIndexTypes, IEquatable<IndexTypes>
    {
        public new const int EntityTag = 1;
        protected override int OnGetEntityTag() => EntityTag;

        private ImmutableDictionary<String, Int64>? field_Index1;
        IReadOnlyDictionary<String, Int64>? IIndexTypes.Index1 => Index1;
        public ImmutableDictionary<String, Int64>? Index1
        {
            get => field_Index1;
            set => field_Index1 = value;
        }
        private ImmutableDictionary<Byte, Int64>? field_Index2;
        IReadOnlyDictionary<Byte, Int64>? IIndexTypes.Index2 => Index2;
        public ImmutableDictionary<Byte, Int64>? Index2
        {
            get => field_Index2;
            set => field_Index2 = value;
        }
        private ImmutableDictionary<MyCustomEnum, Int64>? field_Index3;
        IReadOnlyDictionary<MyCustomEnum, Int64>? IIndexTypes.Index3 => Index3;
        public ImmutableDictionary<MyCustomEnum, Int64>? Index3
        {
            get => field_Index3;
            set => field_Index3 = value;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public IndexTypes() : base()
        {
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public IndexTypes(IndexTypes? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_Index1 = source.Index1;
            field_Index2 = source.Index2;
            field_Index3 = source.Index3;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public IndexTypes(IIndexTypes? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_Index1 = source.Index1 is null
                ? default
                : ImmutableDictionary<String, Int64>.Empty.AddRange(source.Index1);
            field_Index2 = source.Index2 is null
                ? default
                : ImmutableDictionary<Byte, Int64>.Empty.AddRange(source.Index2);
            field_Index3 = source.Index3 is null
                ? default
                : ImmutableDictionary<MyCustomEnum, Int64>.Empty.AddRange(source.Index3);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void CopyFrom(IIndexTypes? source)
        {
            if (source is null) return;
            base.CopyFrom(source);
            field_Index1 = source.Index1 is null
                ? default
                : ImmutableDictionary<String, Int64>.Empty.AddRange(source.Index1);
            field_Index2 = source.Index2 is null
                ? default
                : ImmutableDictionary<Byte, Int64>.Empty.AddRange(source.Index2);
            field_Index3 = source.Index3 is null
                ? default
                : ImmutableDictionary<MyCustomEnum, Int64>.Empty.AddRange(source.Index3);
        }

        public virtual bool Equals(IndexTypes? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!Index1.IndexEquals(other.Index1, (a, b) => a == b)) return false;
            if (!Index2.IndexEquals(other.Index2, (a, b) => a == b)) return false;
            if (!Index3.IndexEquals(other.Index3, (a, b) => a == b)) return false;
            return base.Equals(other);
        }

        public override bool Equals(object? obj) => obj is IndexTypes other && Equals(other);

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(Index1.CalcHashIndex());
            hc.Add(Index2.CalcHashIndex());
            hc.Add(Index3.CalcHashIndex());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }
    }


}