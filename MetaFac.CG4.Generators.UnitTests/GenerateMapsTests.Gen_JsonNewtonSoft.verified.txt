#region Notices
// <auto-generated>
// Warning: This file was automatically generated. Changes to this file may
// cause incorrect behavior and will be lost when this file is regenerated.
// </auto-generated>
// <copyright>
//     Copyright (c) 2023 MetaFac
// </copyright>
// <information>
// This file was generated using MetaFac.CG4 tools and user supplied metadata.
// Generator: JsonNewtonSoft.4.0
// Metadata : MetaFac.CG4.Generators.UnitTests(.Indexes)
// </information>
#endregion
#nullable enable
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
#pragma warning disable CS8019 // Unnecessary using directive
using MetaFac.Mutability;
using MetaFac.CG4.Runtime;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Numerics;
using Generated.Contracts;
using DataFac.Memory;

namespace Generated.JsonNewtonSoft
{


    public abstract partial class EntityBase : IFreezable, IEntityBase
    {
        public static EntityBase Empty => throw new NotSupportedException();
        public const int EntityTag = 0;
        public EntityBase() { }
        public EntityBase(EntityBase? source) { }
        public EntityBase(IEntityBase? source) { }
        public void CopyFrom(IEntityBase? source) { }
        protected abstract int OnGetEntityTag();
        public int GetEntityTag() => OnGetEntityTag();
        public bool Equals(EntityBase? other) => true;
        public override int GetHashCode() => 0;

        public bool IsFreezable() => false;
        public bool IsFrozen() => false;
        public void Freeze() { }
        public bool TryFreeze() => true;
    }


    public sealed class IndexTypes_Factory : IEntityFactory<IIndexTypes, IndexTypes>
    {
        private static readonly IndexTypes_Factory _instance = new IndexTypes_Factory();
        public static IndexTypes_Factory Instance => _instance;
        public IndexTypes? CreateFrom(IIndexTypes? source) => (source is null) ? null : new IndexTypes(source);
        public IndexTypes Empty => new IndexTypes();
    }
    public partial class IndexTypes : EntityBase, IIndexTypes, IEquatable<IndexTypes>
    {
        public new const int EntityTag = 1;
        protected override int OnGetEntityTag() => EntityTag;

        private ImmutableDictionary<String, Int64>? field_Index1;
        IReadOnlyDictionary<String, Int64>? IIndexTypes.Index1 => field_Index1 is null
            ? null
            : new DictionaryFacade<String, Int64, Int64>(field_Index1, (x) => x);
        public ImmutableDictionary<String, Int64>? Index1
        {
            get => field_Index1;
            set => field_Index1 = value;
        }
        private ImmutableDictionary<Byte, Int64>? field_Index2;
        IReadOnlyDictionary<Byte, Int64>? IIndexTypes.Index2 => field_Index2 is null
            ? null
            : new DictionaryFacade<Byte, Int64, Int64>(field_Index2, (x) => x);
        public ImmutableDictionary<Byte, Int64>? Index2
        {
            get => field_Index2;
            set => field_Index2 = value;
        }
        private ImmutableDictionary<MyCustomEnum, Int64>? field_Index3;
        IReadOnlyDictionary<MyCustomEnum, Int64>? IIndexTypes.Index3 => field_Index3 is null
            ? null
            : new DictionaryFacade<MyCustomEnum, Int64, Int64>(field_Index3, (x) => x);
        public ImmutableDictionary<MyCustomEnum, Int64>? Index3
        {
            get => field_Index3;
            set => field_Index3 = value;
        }

        public IndexTypes() : base()
        {
        }

        public IndexTypes(IndexTypes? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_Index1 = source.Index1;
            field_Index2 = source.Index2;
            field_Index3 = source.Index3;
        }

        public IndexTypes(IIndexTypes? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_Index1 = source.Index1 is null
                ? default
                : ImmutableDictionary<String, Int64>.Empty.AddRange(source.Index1
                    .Select(x => new KeyValuePair<String, Int64>(x.Key, x.Value)));
            field_Index2 = source.Index2 is null
                ? default
                : ImmutableDictionary<Byte, Int64>.Empty.AddRange(source.Index2
                    .Select(x => new KeyValuePair<Byte, Int64>(x.Key, x.Value)));
            field_Index3 = source.Index3 is null
                ? default
                : ImmutableDictionary<MyCustomEnum, Int64>.Empty.AddRange(source.Index3
                    .Select(x => new KeyValuePair<MyCustomEnum, Int64>(x.Key, x.Value)));
        }

        public void CopyFrom(IIndexTypes? source)
        {
            if (source is null) return;
            base.CopyFrom(source);
            field_Index1 = source.Index1 is null
                ? default
                : ImmutableDictionary<String, Int64>.Empty.AddRange(source.Index1
                    .Select(x => new KeyValuePair<String, Int64>(x.Key, x.Value)));
            field_Index2 = source.Index2 is null
                ? default
                : ImmutableDictionary<Byte, Int64>.Empty.AddRange(source.Index2
                    .Select(x => new KeyValuePair<Byte, Int64>(x.Key, x.Value)));
            field_Index3 = source.Index3 is null
                ? default
                : ImmutableDictionary<MyCustomEnum, Int64>.Empty.AddRange(source.Index3
                    .Select(x => new KeyValuePair<MyCustomEnum, Int64>(x.Key, x.Value)));
        }

        public bool Equals(IndexTypes? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!base.Equals(other)) return false;
            if (!Index1.IndexEquals(other.Index1)) return false;
            if (!Index2.IndexEquals(other.Index2)) return false;
            if (!Index3.IndexEquals(other.Index3)) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is IndexTypes other && Equals(other);

        public override int GetHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(base.GetHashCode());
            hc.Add(Index1.CalcHashIndex());
            hc.Add(Index2.CalcHashIndex());
            hc.Add(Index3.CalcHashIndex());
            return hc.ToHashCode();
        }
    }


#if NET6_0_OR_GREATER
    public struct HalfValue
    {
        public short Value { get; set; }
        public HalfValue() { }
        public HalfValue(short value) => Value = value;
        public override int GetHashCode() => HashCode.Combine(Value);
        public override bool Equals(object? obj) => obj is HalfValue other && Equals(other);
        public bool Equals(HalfValue other) => other.Value.Equals(Value);
        public static bool operator ==(HalfValue left, HalfValue right) => left.Equals(right);
        public static bool operator !=(HalfValue left, HalfValue right) => !left.Equals(right);

        public static implicit operator HalfValue(Half value) => new HalfValue(BitConverter.HalfToInt16Bits(value));
        public static implicit operator Half(HalfValue value) => BitConverter.Int16BitsToHalf(value.Value);
    }
#endif

}