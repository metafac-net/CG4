#region Notices
// <auto-generated>
// Warning: This file was automatically generated. Changes to this file may
// cause incorrect behavior and will be lost when this file is regenerated.
// </auto-generated>
// <copyright>
//     Copyright (c) 2023 MetaFac
// </copyright>
// <information>
// This file was generated using MetaFac.CG4 tools and user supplied metadata.
// Generator: RecordsV2.2.10
// Metadata : MetaFac.CG4.Generators.UnitTests(.Indexes)
// </information>
#endregion
#nullable enable
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
#pragma warning disable CS8019 // Unnecessary using directive
using MetaFac.Memory;
using MetaFac.Mutability;
using MetaFac.CG4.Runtime;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Numerics;
using Generated.Contracts;

namespace Generated.RecordsV2
{


    public abstract partial record EntityBase : IFreezable, IEntityBase
    {
        public EntityBase() { }
        public EntityBase(EntityBase? source) { }
        public EntityBase(IEntityBase? source) { }
        public const int EntityTag = 0;
        protected abstract int OnGetEntityTag();
        public int GetEntityTag() => OnGetEntityTag();
        public virtual bool Equals(EntityBase? other) => true;
        public override int GetHashCode() => 0;
        public bool IsFreezable() => false;
        public bool IsFrozen() => true;
        public void Freeze() { }
        public bool TryFreeze() => false;
    }


    public sealed class IndexTypes_Factory : IEntityFactory<IIndexTypes, IndexTypes>
    {
        private static readonly IndexTypes_Factory _instance = new IndexTypes_Factory();
        public static IndexTypes_Factory Instance => _instance;

        public IndexTypes? CreateFrom(IIndexTypes? source)
        {
            if (source is null) return null;
            if (source is IndexTypes thisEntity) return thisEntity;
            return new IndexTypes(source);
        }

        private static readonly IndexTypes _empty = new IndexTypes();
        public IndexTypes Empty => _empty;
    }
    public partial record IndexTypes : EntityBase, IIndexTypes
    {
        public new const int EntityTag = 1;
        protected override int OnGetEntityTag() => EntityTag;

        public ImmutableDictionary<String, Int64>? Index1 { get; init; }
        IReadOnlyDictionary<String, Int64>? IIndexTypes.Index1 => Index1;
        public ImmutableDictionary<Byte, Int64>? Index2 { get; init; }
        IReadOnlyDictionary<Byte, Int64>? IIndexTypes.Index2 => Index2;
        public ImmutableDictionary<MyCustomEnum, Int64>? Index3 { get; init; }
        IReadOnlyDictionary<MyCustomEnum, Int64>? IIndexTypes.Index3 => Index3;

        public IndexTypes() : base()
        {
        }

        public IndexTypes(IndexTypes? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            Index1 = source.Index1;
            Index2 = source.Index2;
            Index3 = source.Index3;
        }

        public IndexTypes(IIndexTypes? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            Index1 = source.Index1 is null
                ? default
                : ImmutableDictionary<String, Int64>.Empty.AddRange(source.Index1);
            Index2 = source.Index2 is null
                ? default
                : ImmutableDictionary<Byte, Int64>.Empty.AddRange(source.Index2);
            Index3 = source.Index3 is null
                ? default
                : ImmutableDictionary<MyCustomEnum, Int64>.Empty.AddRange(source.Index3);
        }

        public virtual bool Equals(IndexTypes? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!Index1.IndexEquals(other.Index1)) return false;
            if (!Index2.IndexEquals(other.Index2)) return false;
            if (!Index3.IndexEquals(other.Index3)) return false;
            return base.Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(Index1.CalcHashIndex());
            hc.Add(Index2.CalcHashIndex());
            hc.Add(Index3.CalcHashIndex());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }
    }



}