#region Notices
// <auto-generated>
// Warning: This file was automatically generated. Changes to this file may
// cause incorrect behavior and will be lost when this file is regenerated.
// </auto-generated>
// <copyright>
//     Copyright (c) 2023 MetaFac
// </copyright>
// <information>
// This file was generated using MetaFac.CG4 tools and user supplied metadata.
// Generator: JsonNewtonSoft.4.0
// Metadata : MetaFac.CG4.Generators.UnitTests(.TinyModels)
// </information>
#endregion
#nullable enable
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
#pragma warning disable CS8019 // Unnecessary using directive
using MetaFac.Mutability;
using MetaFac.CG4.Runtime;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Numerics;
using Generated.Contracts;
using DataFac.Memory;

namespace Generated.JsonNewtonSoft
{


    public abstract partial class EntityBase : IFreezable, IEntityBase
    {
        public static EntityBase Empty => throw new NotSupportedException();
        public const int EntityTag = 0;
        public EntityBase() { }
        public EntityBase(EntityBase? source) { }
        public EntityBase(IEntityBase? source) { }
        public void CopyFrom(IEntityBase? source) { }
        protected abstract int OnGetEntityTag();
        public int GetEntityTag() => OnGetEntityTag();
        public bool Equals(EntityBase? other) => true;
        public override int GetHashCode() => 0;

        public bool IsFreezable() => false;
        public bool IsFrozen() => false;
        public void Freeze() { }
        public bool TryFreeze() => true;
    }


    public sealed class Base_Factory : IEntityFactory<IBase, Base>
    {
        private static readonly Base_Factory _instance = new Base_Factory();
        public static Base_Factory Instance => _instance;
        public Base? CreateFrom(IBase? source) => (source is null) ? null : new Base(source);
        public Base Empty => new Base();
    }
    public partial class Base : EntityBase, IBase, IEquatable<Base>
    {
        public new const int EntityTag = 1;
        protected override int OnGetEntityTag() => EntityTag;

        private Int32 field_Id;
        Int32 IBase.Id { get => field_Id; }
        public Int32 Id
        {
            get => field_Id;
            set => field_Id = value;
        }

        public Base() : base()
        {
        }

        public Base(Base? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_Id = source.Id;
        }

        public Base(IBase? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_Id = source.Id;
        }

        public void CopyFrom(IBase? source)
        {
            if (source is null) return;
            base.CopyFrom(source);
            field_Id = source.Id;
        }

        public bool Equals(Base? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!base.Equals(other)) return false;
            if (!Id .ValueEquals(other.Id)) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is Base other && Equals(other);

        public override int GetHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(base.GetHashCode());
            hc.Add(Id.CalcHashUnary());
            return hc.ToHashCode();
        }
    }

    public sealed class Derived_Factory : IEntityFactory<IDerived, Derived>
    {
        private static readonly Derived_Factory _instance = new Derived_Factory();
        public static Derived_Factory Instance => _instance;
        public Derived? CreateFrom(IDerived? source) => (source is null) ? null : new Derived(source);
        public Derived Empty => new Derived();
    }
    public partial class Derived : EntityBase, IDerived, IEquatable<Derived>
    {
        public new const int EntityTag = 2;
        protected override int OnGetEntityTag() => EntityTag;

        private String? field_Name;
        String? IDerived.Name => field_Name;
        public String? Name
        {
            get => field_Name;
            set => field_Name = value;
        }
        private Int64? field_Number;
        Int64? IDerived.Number => field_Number;
        public Int64? Number
        {
            get => field_Number;
            set => field_Number = value;
        }

        public Derived() : base()
        {
        }

        public Derived(Derived? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_Name = source.Name;
            field_Number = source.Number;
        }

        public Derived(IDerived? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_Name = source.Name;
            field_Number = source.Number;
        }

        public void CopyFrom(IDerived? source)
        {
            if (source is null) return;
            base.CopyFrom(source);
            field_Name = source.Name;
            field_Number = source.Number;
        }

        public bool Equals(Derived? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!base.Equals(other)) return false;
            if (!Name.ValueEquals(other.Name)) return false;
            if (!Number.ValueEquals(other.Number)) return false;
            return true;
        }

        public override bool Equals(object? obj) => obj is Derived other && Equals(other);

        public override int GetHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(base.GetHashCode());
            hc.Add(Name.CalcHashUnary());
            hc.Add(Number.CalcHashUnary());
            return hc.ToHashCode();
        }
    }


#if NET6_0_OR_GREATER
    public struct HalfValue
    {
        public short Value { get; set; }
        public HalfValue() { }
        public HalfValue(short value) => Value = value;
        public override int GetHashCode() => HashCode.Combine(Value);
        public override bool Equals(object? obj) => obj is HalfValue other && Equals(other);
        public bool Equals(HalfValue other) => other.Value.Equals(Value);
        public static bool operator ==(HalfValue left, HalfValue right) => left.Equals(right);
        public static bool operator !=(HalfValue left, HalfValue right) => !left.Equals(right);

        public static implicit operator HalfValue(Half value) => new HalfValue(BitConverter.HalfToInt16Bits(value));
        public static implicit operator Half(HalfValue value) => BitConverter.Int16BitsToHalf(value.Value);
    }
#endif

}