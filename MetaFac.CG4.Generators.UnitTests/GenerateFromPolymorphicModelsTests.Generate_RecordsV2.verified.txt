// <auto-generated />
#region Auto-generated
//--------------------------------------------------------------------------------
// Warning: This file was automatically generated. Changes to this file may
// cause incorrect behavior and will be lost when this file is regenerated.
//
// This file was generated using MetaFac.CG4 tools and user supplied metadata.
//
// To download and install the tool, the .NET CLI command is:
// dotnet tool install --global MetaFac.CG4.CLI
//
// For more information about using this tool, the help command is:
// mfcg4 g2c --help
//--------------------------------------------------------------------------------
#endregion
#nullable enable
using MetaFac.Memory;
using MetaFac.Mutability;
using MetaFac.CG4.Runtime;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Runtime.CompilerServices;
using Generated.Contracts;

namespace Generated.RecordsV2
{


    public abstract record EntityBase : IFreezable, IEntityBase
    {
        public EntityBase() { }
        public EntityBase(EntityBase? source) { }
        public EntityBase(IEntityBase? source) { }
        public const int EntityTag = 0;
        protected abstract int OnGetEntityTag();
        public int GetEntityTag() => OnGetEntityTag();
        public virtual bool Equals(EntityBase? other) => true;
        public override int GetHashCode() => 0;
        public static EntityBase Empty => throw new NotSupportedException();
        public bool IsFreezable() => false;
        public bool IsFrozen() => true;
        public void Freeze() { }
        public bool TryFreeze() => false;
    }


    public abstract partial record ValueNode
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ValueNode? CreateFrom(IValueNode? source)
        {
            if (source is null) return null;
            int entityTag = source.GetEntityTag();
            switch (entityTag)
            {
                case Int32Node.EntityTag: return Int32Node.CreateFrom((IInt32Node)source);
                case StringNode.EntityTag: return StringNode.CreateFrom((IStringNode)source);
                case BooleanNode.EntityTag: return BooleanNode.CreateFrom((IBooleanNode)source);
                default:
                    throw new InvalidOperationException($"Unable to create {typeof(ValueNode)} from {source.GetType().Name}");
            }
        }

    }
    public partial record ValueNode : EntityBase, IValueNode
    {
        public new const int EntityTag = 1;
        protected override int OnGetEntityTag() => EntityTag;

        public Int64 Id { get; init; }
        Int64 IValueNode.Id => Id;
        public String? Name { get; init; }
        String? IValueNode.Name => Name;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ValueNode() : base()
        {
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ValueNode(ValueNode? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            Id = source.Id;
            Name = source.Name;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ValueNode(IValueNode? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            Id = source.Id;
            Name = source.Name;
        }

        public virtual bool Equals(ValueNode? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!Id.ValueEquals(other.Id)) return false;
            if (!Name.ValueEquals(other.Name)) return false;
            return base.Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(Id.CalcHashUnary());
            hc.Add(Name.CalcHashUnary());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }
    }

    public abstract partial record Int32Node
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Int32Node? CreateFrom(IInt32Node? source)
        {
            if (source is null) return null;
            int entityTag = source.GetEntityTag();
            switch (entityTag)
            {
                default:
                    throw new InvalidOperationException($"Unable to create {typeof(Int32Node)} from {source.GetType().Name}");
            }
        }

    }
    public partial record Int32Node : ValueNode, IInt32Node
    {
        public new const int EntityTag = 2;
        protected override int OnGetEntityTag() => EntityTag;

        public Int32 IntValue { get; init; }
        Int32 IInt32Node.IntValue => IntValue;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Int32Node() : base()
        {
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Int32Node(Int32Node? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            IntValue = source.IntValue;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Int32Node(IInt32Node? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            IntValue = source.IntValue;
        }

        public virtual bool Equals(Int32Node? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!IntValue.ValueEquals(other.IntValue)) return false;
            return base.Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(IntValue.CalcHashUnary());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }
    }

    public abstract partial record StringNode
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static StringNode? CreateFrom(IStringNode? source)
        {
            if (source is null) return null;
            int entityTag = source.GetEntityTag();
            switch (entityTag)
            {
                default:
                    throw new InvalidOperationException($"Unable to create {typeof(StringNode)} from {source.GetType().Name}");
            }
        }

    }
    public partial record StringNode : ValueNode, IStringNode
    {
        public new const int EntityTag = 3;
        protected override int OnGetEntityTag() => EntityTag;

        public String? StrValue { get; init; }
        String? IStringNode.StrValue => StrValue;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public StringNode() : base()
        {
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public StringNode(StringNode? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            StrValue = source.StrValue;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public StringNode(IStringNode? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            StrValue = source.StrValue;
        }

        public virtual bool Equals(StringNode? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!StrValue.ValueEquals(other.StrValue)) return false;
            return base.Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(StrValue.CalcHashUnary());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }
    }

    public abstract partial record BooleanNode
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static BooleanNode? CreateFrom(IBooleanNode? source)
        {
            if (source is null) return null;
            int entityTag = source.GetEntityTag();
            switch (entityTag)
            {
                default:
                    throw new InvalidOperationException($"Unable to create {typeof(BooleanNode)} from {source.GetType().Name}");
            }
        }

    }
    public partial record BooleanNode : ValueNode, IBooleanNode
    {
        public new const int EntityTag = 4;
        protected override int OnGetEntityTag() => EntityTag;

        public Boolean BoolValue { get; init; }
        Boolean IBooleanNode.BoolValue => BoolValue;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public BooleanNode() : base()
        {
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public BooleanNode(BooleanNode? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            BoolValue = source.BoolValue;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public BooleanNode(IBooleanNode? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            BoolValue = source.BoolValue;
        }

        public virtual bool Equals(BooleanNode? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!BoolValue.ValueEquals(other.BoolValue)) return false;
            return base.Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(BoolValue.CalcHashUnary());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }
    }

    public abstract partial record Tree
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Tree? CreateFrom(ITree? source)
        {
            if (source is null) return null;
            int entityTag = source.GetEntityTag();
            switch (entityTag)
            {
                default:
                    throw new InvalidOperationException($"Unable to create {typeof(Tree)} from {source.GetType().Name}");
            }
        }

    }
    public partial record Tree : EntityBase, ITree
    {
        public new const int EntityTag = 10;
        protected override int OnGetEntityTag() => EntityTag;

        public Tree? Left { get; init; }
        ITree? ITree.Left => Left;
        public Tree? Right { get; init; }
        ITree? ITree.Right => Right;
        public ValueNode? Value { get; init; }
        IValueNode? ITree.Value => Value;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Tree() : base()
        {
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Tree(Tree? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            Left = source.Left;
            Right = source.Right;
            Value = source.Value;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Tree(ITree? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            Left = Tree.CreateFrom(source.Left);
            Right = Tree.CreateFrom(source.Right);
            Value = ValueNode.CreateFrom(source.Value);
        }

        public virtual bool Equals(Tree? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!Left.ValueEquals(other.Left)) return false;
            if (!Right.ValueEquals(other.Right)) return false;
            if (!Value.ValueEquals(other.Value)) return false;
            return base.Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(Left.CalcHashUnary());
            hc.Add(Right.CalcHashUnary());
            hc.Add(Value.CalcHashUnary());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }
    }



}