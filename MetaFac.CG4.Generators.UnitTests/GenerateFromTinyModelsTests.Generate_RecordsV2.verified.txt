#region Notices
// <auto-generated>
// Warning: This file was automatically generated. Changes to this file may
// cause incorrect behavior and will be lost when this file is regenerated.
// </auto-generated>
// <copyright>
//     Copyright (c) 2023 MetaFac
// </copyright>
// <information>
// This file was generated using MetaFac.CG4 tools and user supplied metadata.
// Generator: RecordsV2.1.4
// Metadata : MetaFac.CG4.Generators.UnitTests(.TinyModels)
// </information>
#endregion
#nullable enable
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
#pragma warning disable CS8019 // Unnecessary using directive
using MetaFac.Memory;
using MetaFac.Mutability;
using MetaFac.CG4.Runtime;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Runtime.CompilerServices;
using Generated.Contracts;

namespace Generated.RecordsV2
{


    public abstract record EntityBase : IFreezable, IEntityBase
    {
        public EntityBase() { }
        public EntityBase(EntityBase? source) { }
        public EntityBase(IEntityBase? source) { }
        public const int EntityTag = 0;
        protected abstract int OnGetEntityTag();
        public int GetEntityTag() => OnGetEntityTag();
        public virtual bool Equals(EntityBase? other) => true;
        public override int GetHashCode() => 0;
        public static EntityBase Empty => throw new NotSupportedException();
        public bool IsFreezable() => false;
        public bool IsFrozen() => true;
        public void Freeze() { }
        public bool TryFreeze() => false;
    }


    public partial record Base
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Base? CreateFrom(IBase? source)
        {
            if (source is null) return null;
            if (source is Base thisEntity) return thisEntity;
            return new Base(source);
        }

        private static readonly Base _empty = new Base();
        public static new Base Empty => _empty;

    }
    public partial record Base : EntityBase, IBase
    {
        public new const int EntityTag = 1;
        protected override int OnGetEntityTag() => EntityTag;

        public Int32 Id { get; init; }
        Int32 IBase.Id => Id;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Base() : base()
        {
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Base(Base? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            Id = source.Id;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Base(IBase? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            Id = source.Id;
        }

        public virtual bool Equals(Base? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (Id != other.Id) return false;
            return base.Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(Id.CalcHashUnary());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }
    }

    public partial record Derived
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Derived? CreateFrom(IDerived? source)
        {
            if (source is null) return null;
            if (source is Derived thisEntity) return thisEntity;
            return new Derived(source);
        }

        private static readonly Derived _empty = new Derived();
        public static new Derived Empty => _empty;

    }
    public partial record Derived : EntityBase, IDerived
    {
        public new const int EntityTag = 2;
        protected override int OnGetEntityTag() => EntityTag;

        public String? Name { get; init; }
        String? IDerived.Name => Name;
        public Int64? Number { get; init; }
        Int64? IDerived.Number => Number;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Derived() : base()
        {
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Derived(Derived? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            Name = source.Name;
            Number = source.Number;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Derived(IDerived? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            Name = source.Name;
            Number = source.Number;
        }

        public virtual bool Equals(Derived? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!Name.ValueEquals(other.Name)) return false;
            if (Number != other.Number) return false;
            return base.Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(Name.CalcHashUnary());
            hc.Add(Number.CalcHashUnary());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }
    }



}