#region Notices
// <auto-generated>
// Warning: This file was automatically generated. Changes to this file may
// cause incorrect behavior and will be lost when this file is regenerated.
// </auto-generated>
// <copyright>
//     Copyright (c) 2023 MetaFac
// </copyright>
// <information>
// This file was generated using MetaFac.CG4 tools and user supplied metadata.
// Generator: RecordsV2.2.9
// Metadata : MetaFac.CG4.Generators.UnitTests(.MultiBaseModels)
// </information>
#endregion
#nullable enable
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
#pragma warning disable CS8019 // Unnecessary using directive
using MetaFac.Memory;
using MetaFac.Mutability;
using MetaFac.CG4.Runtime;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Numerics;
using Generated.Contracts;

namespace Generated.RecordsV2
{


    public abstract record EntityBase : IFreezable, IEntityBase
    {
        public EntityBase() { }
        public EntityBase(EntityBase? source) { }
        public EntityBase(IEntityBase? source) { }
        public const int EntityTag = 0;
        protected abstract int OnGetEntityTag();
        public int GetEntityTag() => OnGetEntityTag();
        public virtual bool Equals(EntityBase? other) => true;
        public override int GetHashCode() => 0;
        public bool IsFreezable() => false;
        public bool IsFrozen() => true;
        public void Freeze() { }
        public bool TryFreeze() => false;
    }


    public sealed class SavingsAccount_Factory : IEntityFactory<ISavingsAccount, SavingsAccount>
    {
        private static readonly SavingsAccount_Factory _instance = new SavingsAccount_Factory();
        public static SavingsAccount_Factory Instance => _instance;

        public SavingsAccount? CreateFrom(ISavingsAccount? source)
        {
            if (source is null) return null;
            if (source is SavingsAccount thisEntity) return thisEntity;
            return new SavingsAccount(source);
        }

        private static readonly SavingsAccount _empty = new SavingsAccount();
        public SavingsAccount Empty => _empty;
    }
    public partial record SavingsAccount : AccountType, ISavingsAccount
    {
        public new const int EntityTag = 11;
        protected override int OnGetEntityTag() => EntityTag;

        public String? AccountName { get; init; }
        String? ISavingsAccount.AccountName => AccountName;

        public SavingsAccount() : base()
        {
        }

        public SavingsAccount(SavingsAccount? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            AccountName = source.AccountName;
        }

        public SavingsAccount(ISavingsAccount? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            AccountName = source.AccountName;
        }

        public virtual bool Equals(SavingsAccount? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!AccountName.ValueEquals(other.AccountName)) return false;
            return base.Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(AccountName.CalcHashUnary());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }
    }

    public sealed class Withdrawl_Factory : IEntityFactory<IWithdrawl, Withdrawl>
    {
        private static readonly Withdrawl_Factory _instance = new Withdrawl_Factory();
        public static Withdrawl_Factory Instance => _instance;

        public Withdrawl? CreateFrom(IWithdrawl? source)
        {
            if (source is null) return null;
            if (source is Withdrawl thisEntity) return thisEntity;
            return new Withdrawl(source);
        }

        private static readonly Withdrawl _empty = new Withdrawl();
        public Withdrawl Empty => _empty;
    }
    public partial record Withdrawl : TransactionType, IWithdrawl
    {
        public new const int EntityTag = 12;
        protected override int OnGetEntityTag() => EntityTag;

        public String? SourceAccountId { get; init; }
        String? IWithdrawl.SourceAccountId => SourceAccountId;
        public String? TargetAccountId { get; init; }
        String? IWithdrawl.TargetAccountId => TargetAccountId;
        public Decimal Amount { get; init; }
        Decimal IWithdrawl.Amount => Amount;
        public String? CurrencyCode3 { get; init; }
        String? IWithdrawl.CurrencyCode3 => CurrencyCode3;

        public Withdrawl() : base()
        {
        }

        public Withdrawl(Withdrawl? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            SourceAccountId = source.SourceAccountId;
            TargetAccountId = source.TargetAccountId;
            Amount = source.Amount;
            CurrencyCode3 = source.CurrencyCode3;
        }

        public Withdrawl(IWithdrawl? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            SourceAccountId = source.SourceAccountId;
            TargetAccountId = source.TargetAccountId;
            Amount = source.Amount;
            CurrencyCode3 = source.CurrencyCode3;
        }

        public virtual bool Equals(Withdrawl? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!SourceAccountId.ValueEquals(other.SourceAccountId)) return false;
            if (!TargetAccountId.ValueEquals(other.TargetAccountId)) return false;
            if (!Amount.ValueEquals(other.Amount)) return false;
            if (!CurrencyCode3.ValueEquals(other.CurrencyCode3)) return false;
            return base.Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(SourceAccountId.CalcHashUnary());
            hc.Add(TargetAccountId.CalcHashUnary());
            hc.Add(Amount.CalcHashUnary());
            hc.Add(CurrencyCode3.CalcHashUnary());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }
    }



}