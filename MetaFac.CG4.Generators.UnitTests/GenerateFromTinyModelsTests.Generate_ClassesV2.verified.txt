// <auto-generated />
#region Auto-generated
//--------------------------------------------------------------------------------
// Warning: This file was automatically generated. Changes to this file may
// cause incorrect behavior and will be lost when this file is regenerated.
//
// This file was generated using MetaFac.CG4 tools and user supplied metadata.
//
// To download and install the tool, the .NET CLI command is:
// dotnet tool install --global MetaFac.CG4.CLI
//
// For more information about using this tool, the help command is:
// mfcg4 g2c --help
//--------------------------------------------------------------------------------
#endregion
#nullable enable
using MetaFac.Mutability;
using MetaFac.CG4.Runtime;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Runtime.CompilerServices;
using Generated.Contracts;

namespace Generated.ClassesV2
{


    public abstract class EntityBase : IFreezable, IEntityBase
    {
        public static EntityBase Empty => throw new NotSupportedException();
        public const int EntityTag = 0;
        public EntityBase() { }
        public EntityBase(EntityBase? source) { }
        public EntityBase(IEntityBase? source) { }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void CopyFrom(IEntityBase? source) { }
        protected abstract int OnGetEntityTag();
        public int GetEntityTag() => OnGetEntityTag();
        public virtual bool Equals(EntityBase? other) => true;
        public override int GetHashCode() => 0;

        protected volatile bool _isFrozen = false;
        public bool IsFreezable() => true;
        public bool IsFrozen() => _isFrozen;
        protected virtual void OnFreeze() { }
        public void Freeze()
        {
            if (_isFrozen) return;
            OnFreeze();
            _isFrozen = true;
        }
        public bool TryFreeze()
        {
            if (_isFrozen) return false;
            OnFreeze();
            _isFrozen = true;
            return true;
        }
    }


    public abstract partial class Base
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Base? CreateFrom(IBase? source)
        {
            if (source is null) return null;
            int entityTag = source.GetEntityTag();
            switch (entityTag)
            {
                default:
                    throw new InvalidOperationException($"Unable to create {typeof(Base)} from {source.GetType().Name}");
            }
        }

    }
    public partial class Base : EntityBase, IBase, IEquatable<Base>
    {
        [MethodImpl(MethodImplOptions.NoInlining)]
        private static void ThrowIsReadonly()
        {
            throw new InvalidOperationException("Cannot set properties when frozen");
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private ref T CheckNotFrozen<T>(ref T value)
        {
            if (_isFrozen) ThrowIsReadonly();
            return ref value;
        }

        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        public new const int EntityTag = 1;
        protected override int OnGetEntityTag() => EntityTag;

        private Int32 field_Id;
        Int32 IBase.Id => field_Id;
        public Int32 Id
        {
            get => field_Id;
            set => field_Id = CheckNotFrozen(ref value);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Base() : base()
        {
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Base(Base? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_Id = source.Id;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Base(IBase? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_Id = source.Id;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void CopyFrom(IBase? source)
        {
            if (source is null) return;
            if (_isFrozen) ThrowIsReadonly();
            base.CopyFrom(source);
            field_Id = source.Id;
        }

        public virtual bool Equals(Base? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!Id.ValueEquals(other.Id)) return false;
            return base.Equals(other);
        }

        public override bool Equals(object? obj) => obj is Base other && Equals(other);

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(Id.CalcHashUnary());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }
    }

    public abstract partial class Derived
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Derived? CreateFrom(IDerived? source)
        {
            if (source is null) return null;
            int entityTag = source.GetEntityTag();
            switch (entityTag)
            {
                default:
                    throw new InvalidOperationException($"Unable to create {typeof(Derived)} from {source.GetType().Name}");
            }
        }

    }
    public partial class Derived : EntityBase, IDerived, IEquatable<Derived>
    {
        [MethodImpl(MethodImplOptions.NoInlining)]
        private static void ThrowIsReadonly()
        {
            throw new InvalidOperationException("Cannot set properties when frozen");
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private ref T CheckNotFrozen<T>(ref T value)
        {
            if (_isFrozen) ThrowIsReadonly();
            return ref value;
        }

        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        public new const int EntityTag = 2;
        protected override int OnGetEntityTag() => EntityTag;

        private String? field_Name;
        String? IDerived.Name => field_Name;
        public String? Name
        {
            get => field_Name;
            set => field_Name = CheckNotFrozen(ref value);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Derived() : base()
        {
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Derived(Derived? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_Name = source.Name;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Derived(IDerived? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_Name = source.Name;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void CopyFrom(IDerived? source)
        {
            if (source is null) return;
            if (_isFrozen) ThrowIsReadonly();
            base.CopyFrom(source);
            field_Name = source.Name;
        }

        public virtual bool Equals(Derived? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!Name.ValueEquals(other.Name)) return false;
            return base.Equals(other);
        }

        public override bool Equals(object? obj) => obj is Derived other && Equals(other);

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(Name.CalcHashUnary());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }
    }


}