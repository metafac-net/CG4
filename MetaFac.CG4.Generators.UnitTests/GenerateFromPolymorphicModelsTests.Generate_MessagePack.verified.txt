// <auto-generated />
#region Auto-generated
//--------------------------------------------------------------------------------
// Warning: This file was automatically generated. Changes to this file may
// cause incorrect behavior and will be lost when this file is regenerated.
//
// This file was generated using MetaFac.CG4 tools and user supplied metadata.
//
// To download and install the tool, the .NET CLI command is:
// dotnet tool install --global MetaFac.CG4.CLI
//
// For more information about using this tool, the help command is:
// mfcg4 g2c --help
//--------------------------------------------------------------------------------
#endregion
#nullable enable
using MetaFac.Mutability;
using MessagePack;
using MetaFac.CG4.Runtime;
using MetaFac.CG4.Runtime.MessagePack;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Runtime.CompilerServices;
using Generated.Contracts;

namespace Generated.MessagePack
{


    public abstract class EntityBase : IFreezable, IEntityBase, IEquatable<EntityBase>, ICopyFrom<EntityBase>
    {
        public static EntityBase Empty => throw new NotSupportedException();
        public const int ClassTag = 0;

        [MethodImpl(MethodImplOptions.NoInlining)]
        private static void ThrowIsReadonly()
        {
            throw new InvalidOperationException("Cannot set properties when frozen");
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        protected ref T CheckNotFrozen<T>(ref T value)
        {
            if (_isFrozen) ThrowIsReadonly();
            return ref value;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        protected void CheckNotFrozen()
        {
            if (_isFrozen) ThrowIsReadonly();
        }

        public EntityBase() { }
        public EntityBase(EntityBase source) { }
        public void CopyFrom(EntityBase source)
        {
            CheckNotFrozen();
        }
        public EntityBase(IEntityBase source) { }
        protected abstract int OnGetEntityTag();
        public int GetEntityTag() => OnGetEntityTag();

        protected volatile bool _isFrozen = false;
        public bool IsFreezable() => true;
        public bool IsFrozen() => _isFrozen;
        protected virtual void OnFreeze() { }
        public void Freeze()
        {
            if (_isFrozen) return;
            OnFreeze();
            _isFrozen = true;
        }
        public bool TryFreeze()
        {
            if (_isFrozen) return false;
            OnFreeze();
            _isFrozen = true;
            return true;
        }

        public bool Equals(EntityBase? other) => true;
        public override bool Equals(object? obj) => obj is EntityBase other && this.Equals(other);
        public override int GetHashCode() => 0;
    }


    [Union(Int32Node.ClassTag, typeof(Int32Node))]
    [Union(StringNode.ClassTag, typeof(StringNode))]
    [Union(BooleanNode.ClassTag, typeof(BooleanNode))]
    public abstract partial class ValueNode
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ValueNode? CreateFrom(IValueNode? source)
        {
            if (source is null) return null;
            int classTag = source.GetEntityTag();
            switch (classTag)
            {
                case Int32Node.ClassTag: return Int32Node.CreateFrom((IInt32Node)source);
                case StringNode.ClassTag: return StringNode.CreateFrom((IStringNode)source);
                case BooleanNode.ClassTag: return BooleanNode.CreateFrom((IBooleanNode)source);
                default:
                    throw new ArgumentOutOfRangeException(nameof(classTag), classTag, null);
            }
        }
    }
    [MessagePackObject]
    public partial class ValueNode : EntityBase, IValueNode, IEquatable<ValueNode>, ICopyFrom<ValueNode>
    {
        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        public new const int ClassTag = 1;
        protected override int OnGetEntityTag() => ClassTag;

        // ---------- private fields ----------
        private Int64 field_Id;
        private String? field_Name;

        // ---------- accessors ----------
        [Key(1)]
        public Int64 Id
        {
            get => field_Id;
            set => field_Id = CheckNotFrozen(ref value);
        }
        [Key(2)]
        public String? Name
        {
            get => field_Name;
            set => field_Name = CheckNotFrozen(ref value);
        }

        // ---------- IValueNode methods ----------
        Int64 IValueNode.Id => field_Id.ToExternal();
        String? IValueNode.Name => field_Name;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ValueNode()
        {
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ValueNode(ValueNode source) : base(source)
        {
            field_Id = source.field_Id;
            field_Name = source.field_Name;
        }

        public void CopyFrom(ValueNode source)
        {
            base.CopyFrom(source);
            field_Id = source.field_Id;
            field_Name = source.field_Name;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ValueNode(IValueNode source) : base(source)
        {
            field_Id = source.Id.ToInternal();
            field_Name = source.Name;
        }

        public bool Equals(ValueNode? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!field_Id.ValueEquals(other.field_Id)) return false;
            if (!field_Name.ValueEquals(other.field_Name)) return false;
            return base.Equals(other);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator ==(ValueNode left, ValueNode right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator !=(ValueNode left, ValueNode right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override bool Equals(object? obj)
        {
            return obj is ValueNode other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(field_Id.CalcHashUnary());
            hc.Add(field_Name.CalcHashUnary());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }

    public partial class Int32Node
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Int32Node? CreateFrom(IInt32Node? source)
        {
            if (source is null) return null;
            return new Int32Node(source);
        }

        private static Int32Node CreateEmpty()
        {
            var empty = new Int32Node();
            empty.Freeze();
            return empty;
        }
        private static readonly Int32Node _empty = CreateEmpty();
        public static new Int32Node Empty => _empty;

    }
    [MessagePackObject]
    public partial class Int32Node : ValueNode, IInt32Node, IEquatable<Int32Node>, ICopyFrom<Int32Node>
    {
        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        public new const int ClassTag = 2;
        protected override int OnGetEntityTag() => ClassTag;

        // ---------- private fields ----------
        private Int32 field_IntValue;

        // ---------- accessors ----------
        [Key(1)]
        public Int32 IntValue
        {
            get => field_IntValue;
            set => field_IntValue = CheckNotFrozen(ref value);
        }

        // ---------- IInt32Node methods ----------
        Int32 IInt32Node.IntValue => field_IntValue.ToExternal();

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Int32Node()
        {
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Int32Node(Int32Node source) : base(source)
        {
            field_IntValue = source.field_IntValue;
        }

        public void CopyFrom(Int32Node source)
        {
            base.CopyFrom(source);
            field_IntValue = source.field_IntValue;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Int32Node(IInt32Node source) : base(source)
        {
            field_IntValue = source.IntValue.ToInternal();
        }

        public bool Equals(Int32Node? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!field_IntValue.ValueEquals(other.field_IntValue)) return false;
            return base.Equals(other);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator ==(Int32Node left, Int32Node right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator !=(Int32Node left, Int32Node right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override bool Equals(object? obj)
        {
            return obj is Int32Node other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(field_IntValue.CalcHashUnary());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }

    public partial class StringNode
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static StringNode? CreateFrom(IStringNode? source)
        {
            if (source is null) return null;
            return new StringNode(source);
        }

        private static StringNode CreateEmpty()
        {
            var empty = new StringNode();
            empty.Freeze();
            return empty;
        }
        private static readonly StringNode _empty = CreateEmpty();
        public static new StringNode Empty => _empty;

    }
    [MessagePackObject]
    public partial class StringNode : ValueNode, IStringNode, IEquatable<StringNode>, ICopyFrom<StringNode>
    {
        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        public new const int ClassTag = 3;
        protected override int OnGetEntityTag() => ClassTag;

        // ---------- private fields ----------
        private String? field_StrValue;

        // ---------- accessors ----------
        [Key(1)]
        public String? StrValue
        {
            get => field_StrValue;
            set => field_StrValue = CheckNotFrozen(ref value);
        }

        // ---------- IStringNode methods ----------
        String? IStringNode.StrValue => field_StrValue;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public StringNode()
        {
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public StringNode(StringNode source) : base(source)
        {
            field_StrValue = source.field_StrValue;
        }

        public void CopyFrom(StringNode source)
        {
            base.CopyFrom(source);
            field_StrValue = source.field_StrValue;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public StringNode(IStringNode source) : base(source)
        {
            field_StrValue = source.StrValue;
        }

        public bool Equals(StringNode? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!field_StrValue.ValueEquals(other.field_StrValue)) return false;
            return base.Equals(other);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator ==(StringNode left, StringNode right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator !=(StringNode left, StringNode right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override bool Equals(object? obj)
        {
            return obj is StringNode other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(field_StrValue.CalcHashUnary());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }

    public partial class BooleanNode
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static BooleanNode? CreateFrom(IBooleanNode? source)
        {
            if (source is null) return null;
            return new BooleanNode(source);
        }

        private static BooleanNode CreateEmpty()
        {
            var empty = new BooleanNode();
            empty.Freeze();
            return empty;
        }
        private static readonly BooleanNode _empty = CreateEmpty();
        public static new BooleanNode Empty => _empty;

    }
    [MessagePackObject]
    public partial class BooleanNode : ValueNode, IBooleanNode, IEquatable<BooleanNode>, ICopyFrom<BooleanNode>
    {
        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        public new const int ClassTag = 4;
        protected override int OnGetEntityTag() => ClassTag;

        // ---------- private fields ----------
        private Boolean field_BoolValue;

        // ---------- accessors ----------
        [Key(1)]
        public Boolean BoolValue
        {
            get => field_BoolValue;
            set => field_BoolValue = CheckNotFrozen(ref value);
        }

        // ---------- IBooleanNode methods ----------
        Boolean IBooleanNode.BoolValue => field_BoolValue.ToExternal();

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public BooleanNode()
        {
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public BooleanNode(BooleanNode source) : base(source)
        {
            field_BoolValue = source.field_BoolValue;
        }

        public void CopyFrom(BooleanNode source)
        {
            base.CopyFrom(source);
            field_BoolValue = source.field_BoolValue;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public BooleanNode(IBooleanNode source) : base(source)
        {
            field_BoolValue = source.BoolValue.ToInternal();
        }

        public bool Equals(BooleanNode? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!field_BoolValue.ValueEquals(other.field_BoolValue)) return false;
            return base.Equals(other);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator ==(BooleanNode left, BooleanNode right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator !=(BooleanNode left, BooleanNode right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override bool Equals(object? obj)
        {
            return obj is BooleanNode other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(field_BoolValue.CalcHashUnary());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }

    public partial class Tree
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Tree? CreateFrom(ITree? source)
        {
            if (source is null) return null;
            return new Tree(source);
        }

        private static Tree CreateEmpty()
        {
            var empty = new Tree();
            empty.Freeze();
            return empty;
        }
        private static readonly Tree _empty = CreateEmpty();
        public static new Tree Empty => _empty;

    }
    [MessagePackObject]
    public partial class Tree : EntityBase, ITree, IEquatable<Tree>, ICopyFrom<Tree>
    {
        protected override void OnFreeze()
        {
            field_Left?.Freeze();
            field_Right?.Freeze();
            field_Value?.Freeze();
            base.OnFreeze();
        }

        public new const int ClassTag = 10;
        protected override int OnGetEntityTag() => ClassTag;

        // ---------- private fields ----------
        private Tree? field_Left;
        private Tree? field_Right;
        private ValueNode? field_Value;

        // ---------- accessors ----------
        [Key(1)]
        public Tree? Left
        {
            get => field_Left;
            set => field_Left = CheckNotFrozen(ref value);
        }
        [Key(2)]
        public Tree? Right
        {
            get => field_Right;
            set => field_Right = CheckNotFrozen(ref value);
        }
        [Key(3)]
        public ValueNode? Value
        {
            get => field_Value;
            set => field_Value = CheckNotFrozen(ref value);
        }

        // ---------- ITree methods ----------
        ITree? ITree.Left => field_Left;
        ITree? ITree.Right => field_Right;
        IValueNode? ITree.Value => field_Value;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Tree()
        {
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Tree(Tree source) : base(source)
        {
            field_Left = source.field_Left;
            field_Right = source.field_Right;
            field_Value = source.field_Value;
        }

        public void CopyFrom(Tree source)
        {
            base.CopyFrom(source);
            field_Left = source.field_Left;
            field_Right = source.field_Right;
            field_Value = source.field_Value;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Tree(ITree source) : base(source)
        {
            field_Left = Tree.CreateFrom(source.Left);
            field_Right = Tree.CreateFrom(source.Right);
            field_Value = ValueNode.CreateFrom(source.Value);
        }

        public bool Equals(Tree? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!field_Left.ValueEquals(other.field_Left)) return false;
            if (!field_Right.ValueEquals(other.field_Right)) return false;
            if (!field_Value.ValueEquals(other.field_Value)) return false;
            return base.Equals(other);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator ==(Tree left, Tree right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator !=(Tree left, Tree right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override bool Equals(object? obj)
        {
            return obj is Tree other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(field_Left.CalcHashUnary());
            hc.Add(field_Right.CalcHashUnary());
            hc.Add(field_Value.CalcHashUnary());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }


}