#region Notices
// <auto-generated>
// Warning: This file was automatically generated. Changes to this file may
// cause incorrect behavior and will be lost when this file is regenerated.
// </auto-generated>
// <copyright>
//     Copyright (c) 2023 MetaFac
// </copyright>
// <information>
// This file was generated using MetaFac.CG4 tools and user supplied metadata.
// Generator: MessagePack.2.8
// Metadata : MetaFac.CG4.Generators.UnitTests(.Indexes)
// </information>
#endregion
#nullable enable
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
#pragma warning disable CS8019 // Unnecessary using directive
#pragma warning disable CS8019 // Unnecessary using directive
using MetaFac.Memory;
using MetaFac.Mutability;
using MessagePack;
using MetaFac.CG4.Runtime;
using MetaFac.CG4.Runtime.MessagePack;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Numerics;
using System.Runtime.CompilerServices;
using Generated.Contracts;

namespace Generated.MessagePack
{


    public abstract class EntityBase : IFreezable, IEntityBase, IEquatable<EntityBase>, ICopyFrom<EntityBase>
    {
        public static EntityBase Empty => throw new NotSupportedException();
        public const int EntityTag = 0;

        [MethodImpl(MethodImplOptions.NoInlining)]
        private static void ThrowIsReadonly()
        {
            throw new InvalidOperationException("Cannot set properties when frozen");
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        protected ref T CheckNotFrozen<T>(ref T value)
        {
            if (_isFrozen) ThrowIsReadonly();
            return ref value;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        protected void CheckNotFrozen()
        {
            if (_isFrozen) ThrowIsReadonly();
        }

        public EntityBase() { }
        public EntityBase(EntityBase source) { }
        public void CopyFrom(EntityBase source) => CheckNotFrozen();
        public EntityBase(IEntityBase source) { }
        protected abstract int OnGetEntityTag();
        public int GetEntityTag() => OnGetEntityTag();

        protected volatile bool _isFrozen = false;
        public bool IsFreezable() => true;
        public bool IsFrozen() => _isFrozen;
        protected virtual void OnFreeze() { }
        public void Freeze()
        {
            if (_isFrozen) return;
            OnFreeze();
            _isFrozen = true;
        }
        public bool TryFreeze()
        {
            if (_isFrozen) return false;
            OnFreeze();
            _isFrozen = true;
            return true;
        }

        public bool Equals(EntityBase? other) => true;
        public override bool Equals(object? obj) => obj is EntityBase other && this.Equals(other);
        public override int GetHashCode() => 0;
    }


    public sealed class IndexTypes_Factory : IEntityFactory<IIndexTypes, IndexTypes>
    {
        private static readonly IndexTypes_Factory _instance = new IndexTypes_Factory();
        public static IndexTypes_Factory Instance => _instance;

        public IndexTypes? CreateFrom(IIndexTypes? source)
        {
            if (source is null) return null;
            if (source is IndexTypes sibling && sibling.IsFrozen()) return sibling;
            return new IndexTypes(source);
        }

        private static readonly IndexTypes _empty = new IndexTypes().Frozen();
        public IndexTypes Empty => _empty;
    }
    [MessagePackObject]
    public partial class IndexTypes : EntityBase, IIndexTypes, IEquatable<IndexTypes>, ICopyFrom<IndexTypes>
    {
        protected override void OnFreeze()
        {
            base.OnFreeze();
        }

        public new const int EntityTag = 1;
        protected override int OnGetEntityTag() => EntityTag;

        // ---------- private fields ----------
        private ImmutableDictionary<String, Int64>? field_Index1;
        private ImmutableDictionary<Byte, Int64>? field_Index2;
        private ImmutableDictionary<MyCustomEnum, Int64>? field_Index3;

        // ---------- accessors ----------
        [Key(1)]
        public ImmutableDictionary<String, Int64>? Index1
        {
            get => field_Index1;
            set => field_Index1 = CheckNotFrozen(ref value);
        }
        [Key(2)]
        public ImmutableDictionary<Byte, Int64>? Index2
        {
            get => field_Index2;
            set => field_Index2 = CheckNotFrozen(ref value);
        }
        [Key(3)]
        public ImmutableDictionary<MyCustomEnum, Int64>? Index3
        {
            get => field_Index3;
            set => field_Index3 = CheckNotFrozen(ref value);
        }

        // ---------- IIndexTypes methods ----------
        IReadOnlyDictionary<String, Int64>? IIndexTypes.Index1
            => field_Index1 is null ? null
            : new DictionaryFacade<String, Int64, Int64>(field_Index1, (x) => x.ToExternal());
        IReadOnlyDictionary<Byte, Int64>? IIndexTypes.Index2
            => field_Index2 is null ? null
            : new DictionaryFacade<Byte, Int64, Int64>(field_Index2, (x) => x.ToExternal());
        IReadOnlyDictionary<MyCustomEnum, Int64>? IIndexTypes.Index3
            => field_Index3 is null ? null
            : new DictionaryFacade<MyCustomEnum, Int64, Int64>(field_Index3, (x) => x.ToExternal());

        public IndexTypes()
        {
        }

        public IndexTypes(IndexTypes source) : base(source)
        {
            field_Index1 = source.field_Index1;
            field_Index2 = source.field_Index2;
            field_Index3 = source.field_Index3;
        }

        public void CopyFrom(IndexTypes source)
        {
            base.CopyFrom(source);
            field_Index1 = source.field_Index1;
            field_Index2 = source.field_Index2;
            field_Index3 = source.field_Index3;
        }

        public IndexTypes(IIndexTypes source) : base(source)
        {
            field_Index1 = source.Index1 is null
                ? null
                : ImmutableDictionary<String, Int64>.Empty.AddRange(source.Index1.Select(
                    kvp => new KeyValuePair<String, Int64>(kvp.Key, kvp.Value.ToInternal())));
            field_Index2 = source.Index2 is null
                ? null
                : ImmutableDictionary<Byte, Int64>.Empty.AddRange(source.Index2.Select(
                    kvp => new KeyValuePair<Byte, Int64>(kvp.Key, kvp.Value.ToInternal())));
            field_Index3 = source.Index3 is null
                ? null
                : ImmutableDictionary<MyCustomEnum, Int64>.Empty.AddRange(source.Index3.Select(
                    kvp => new KeyValuePair<MyCustomEnum, Int64>(kvp.Key, kvp.Value.ToInternal())));
        }

        public bool Equals(IndexTypes? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!field_Index1.IndexEquals(other.field_Index1)) return false;
            if (!field_Index2.IndexEquals(other.field_Index2)) return false;
            if (!field_Index3.IndexEquals(other.field_Index3)) return false;
            return base.Equals(other);
        }

        public static bool operator ==(IndexTypes left, IndexTypes right)
        {
            if (left is null) return (right is null);
            return left.Equals(right);
        }

        public static bool operator !=(IndexTypes left, IndexTypes right)
        {
            if (left is null) return !(right is null);
            return !left.Equals(right);
        }

        public override bool Equals(object? obj)
        {
            return obj is IndexTypes other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(field_Index1.CalcHashIndex());
            hc.Add(field_Index2.CalcHashIndex());
            hc.Add(field_Index3.CalcHashIndex());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (!_isFrozen) return CalcHashCode();
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }


}