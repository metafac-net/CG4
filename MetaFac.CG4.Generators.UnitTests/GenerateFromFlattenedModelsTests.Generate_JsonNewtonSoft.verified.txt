#region Notices
// <auto-generated>
// Warning: This file was automatically generated. Changes to this file may
// cause incorrect behavior and will be lost when this file is regenerated.
// </auto-generated>
// <copyright>
//     Copyright (c) 2023 MetaFac
// </copyright>
// <information>
// This file was generated using MetaFac.CG4 tools and user supplied metadata.
// Generator: JsonNewtonSoft.1.4
// Metadata : MetaFac.CG4.Generators.UnitTests(.FlattenedModels)
// </information>
#endregion
#nullable enable
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
#pragma warning disable CS8019 // Unnecessary using directive
using MetaFac.Mutability;
using MetaFac.CG4.Runtime;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Runtime.CompilerServices;
using Generated.Contracts;
using MetaFac.Memory;

namespace Generated.JsonNewtonSoft
{


    public abstract class EntityBase : IFreezable, IEntityBase
    {
        public static EntityBase Empty => throw new NotSupportedException();
        public const int EntityTag = 0;
        public EntityBase() { }
        public EntityBase(EntityBase? source) { }
        public EntityBase(IEntityBase? source) { }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void CopyFrom(IEntityBase? source) { }
        protected abstract int OnGetEntityTag();
        public int GetEntityTag() => OnGetEntityTag();
        public virtual bool Equals(EntityBase? other) => true;
        public override int GetHashCode() => 0;

        public bool IsFreezable() => false;
        public bool IsFrozen() => false;
        public void Freeze() { }
        public bool TryFreeze() => true;
    }


    public partial class BuiltinTypes
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static BuiltinTypes? CreateFrom(IBuiltinTypes? source)
        {
            if (source is null) return null;
            return new BuiltinTypes(source);
        }

        private static BuiltinTypes CreateEmpty()
        {
            var empty = new BuiltinTypes();
            empty.Freeze();
            return empty;
        }
        private static readonly BuiltinTypes _empty = CreateEmpty();
        public static new BuiltinTypes Empty => _empty;

    }
    public partial class BuiltinTypes : EntityBase, IBuiltinTypes, IEquatable<BuiltinTypes>
    {
        public new const int EntityTag = 1;
        protected override int OnGetEntityTag() => EntityTag;

        private ImmutableList<Boolean>? field_Bools;
        IReadOnlyList<Boolean>? IBuiltinTypes.Bools => field_Bools;
        public ImmutableList<Boolean>? Bools
        {
            get => field_Bools;
            set => field_Bools = value;
        }
        private ImmutableList<SByte>? field_SBytes;
        IReadOnlyList<SByte>? IBuiltinTypes.SBytes => field_SBytes;
        public ImmutableList<SByte>? SBytes
        {
            get => field_SBytes;
            set => field_SBytes = value;
        }
        private ImmutableList<Byte>? field_Bytes;
        IReadOnlyList<Byte>? IBuiltinTypes.Bytes => field_Bytes;
        public ImmutableList<Byte>? Bytes
        {
            get => field_Bytes;
            set => field_Bytes = value;
        }
        private ImmutableList<Int16>? field_Shorts;
        IReadOnlyList<Int16>? IBuiltinTypes.Shorts => field_Shorts;
        public ImmutableList<Int16>? Shorts
        {
            get => field_Shorts;
            set => field_Shorts = value;
        }
        private ImmutableList<UInt16>? field_UShorts;
        IReadOnlyList<UInt16>? IBuiltinTypes.UShorts => field_UShorts;
        public ImmutableList<UInt16>? UShorts
        {
            get => field_UShorts;
            set => field_UShorts = value;
        }
        private ImmutableList<Char>? field_Chars;
        IReadOnlyList<Char>? IBuiltinTypes.Chars => field_Chars;
        public ImmutableList<Char>? Chars
        {
            get => field_Chars;
            set => field_Chars = value;
        }
        private ImmutableList<Int32>? field_Ints;
        IReadOnlyList<Int32>? IBuiltinTypes.Ints => field_Ints;
        public ImmutableList<Int32>? Ints
        {
            get => field_Ints;
            set => field_Ints = value;
        }
        private ImmutableList<UInt32>? field_UInts;
        IReadOnlyList<UInt32>? IBuiltinTypes.UInts => field_UInts;
        public ImmutableList<UInt32>? UInts
        {
            get => field_UInts;
            set => field_UInts = value;
        }
        private ImmutableList<Single>? field_Floats;
        IReadOnlyList<Single>? IBuiltinTypes.Floats => field_Floats;
        public ImmutableList<Single>? Floats
        {
            get => field_Floats;
            set => field_Floats = value;
        }
        private ImmutableList<Int64>? field_Longs;
        IReadOnlyList<Int64>? IBuiltinTypes.Longs => field_Longs;
        public ImmutableList<Int64>? Longs
        {
            get => field_Longs;
            set => field_Longs = value;
        }
        private ImmutableList<UInt64>? field_ULongs;
        IReadOnlyList<UInt64>? IBuiltinTypes.ULongs => field_ULongs;
        public ImmutableList<UInt64>? ULongs
        {
            get => field_ULongs;
            set => field_ULongs = value;
        }
        private ImmutableList<Double>? field_Doubles;
        IReadOnlyList<Double>? IBuiltinTypes.Doubles => field_Doubles;
        public ImmutableList<Double>? Doubles
        {
            get => field_Doubles;
            set => field_Doubles = value;
        }
        private ImmutableList<DateTime>? field_DateTimes;
        IReadOnlyList<DateTime>? IBuiltinTypes.DateTimes => field_DateTimes;
        public ImmutableList<DateTime>? DateTimes
        {
            get => field_DateTimes;
            set => field_DateTimes = value;
        }
        private ImmutableList<TimeSpan>? field_TimeSpans;
        IReadOnlyList<TimeSpan>? IBuiltinTypes.TimeSpans => field_TimeSpans;
        public ImmutableList<TimeSpan>? TimeSpans
        {
            get => field_TimeSpans;
            set => field_TimeSpans = value;
        }
        private ImmutableList<Decimal>? field_Decimals;
        IReadOnlyList<Decimal>? IBuiltinTypes.Decimals => field_Decimals;
        public ImmutableList<Decimal>? Decimals
        {
            get => field_Decimals;
            set => field_Decimals = value;
        }
        private ImmutableList<DateTimeOffset>? field_DateTimeOffsets;
        IReadOnlyList<DateTimeOffset>? IBuiltinTypes.DateTimeOffsets => field_DateTimeOffsets;
        public ImmutableList<DateTimeOffset>? DateTimeOffsets
        {
            get => field_DateTimeOffsets;
            set => field_DateTimeOffsets = value;
        }
        private ImmutableList<Guid>? field_Guids;
        IReadOnlyList<Guid>? IBuiltinTypes.Guids => field_Guids;
        public ImmutableList<Guid>? Guids
        {
            get => field_Guids;
            set => field_Guids = value;
        }
        private ImmutableList<String?>? field_Strings;
        IReadOnlyList<String?>? IBuiltinTypes.Strings => field_Strings;
        public ImmutableList<String?>? Strings
        {
            get => field_Strings;
            set => field_Strings = value;
        }
        IReadOnlyList<Octets?>? IBuiltinTypes.Buffers => Buffers is null
            ? null
            : new List<Octets?>(Buffers.Select(x => x is null ? null : new Octets(x)));
        public byte[]?[]? Buffers { get; set; }
        private ImmutableList<LabApps.Units.Quantity>? field_Quantities;
        IReadOnlyList<LabApps.Units.Quantity>? IBuiltinTypes.Quantities => field_Quantities;
        public ImmutableList<LabApps.Units.Quantity>? Quantities
        {
            get => field_Quantities;
            set => field_Quantities = value;
        }
        private ImmutableList<System.DayOfWeek>? field_DaysOfWeek;
        IReadOnlyList<System.DayOfWeek>? IBuiltinTypes.DaysOfWeek => field_DaysOfWeek;
        public ImmutableList<System.DayOfWeek>? DaysOfWeek
        {
            get => field_DaysOfWeek;
            set => field_DaysOfWeek = value;
        }
        private ImmutableList<System.DateTimeKind>? field_MyDateTimeKinds;
        IReadOnlyList<System.DateTimeKind>? IBuiltinTypes.MyDateTimeKinds => field_MyDateTimeKinds;
        public ImmutableList<System.DateTimeKind>? MyDateTimeKinds
        {
            get => field_MyDateTimeKinds;
            set => field_MyDateTimeKinds = value;
        }
        private ImmutableList<MyCustomEnum>? field_MyCustomEnums;
        IReadOnlyList<MyCustomEnum>? IBuiltinTypes.MyCustomEnums => field_MyCustomEnums;
        public ImmutableList<MyCustomEnum>? MyCustomEnums
        {
            get => field_MyCustomEnums;
            set => field_MyCustomEnums = value;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public BuiltinTypes() : base()
        {
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public BuiltinTypes(BuiltinTypes? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_Bools = source.Bools;
            field_SBytes = source.SBytes;
            field_Bytes = source.Bytes;
            field_Shorts = source.Shorts;
            field_UShorts = source.UShorts;
            field_Chars = source.Chars;
            field_Ints = source.Ints;
            field_UInts = source.UInts;
            field_Floats = source.Floats;
            field_Longs = source.Longs;
            field_ULongs = source.ULongs;
            field_Doubles = source.Doubles;
            field_DateTimes = source.DateTimes;
            field_TimeSpans = source.TimeSpans;
            field_Decimals = source.Decimals;
            field_DateTimeOffsets = source.DateTimeOffsets;
            field_Guids = source.Guids;
            field_Strings = source.Strings;
            this.Buffers = source.Buffers;
            field_Quantities = source.Quantities;
            field_DaysOfWeek = source.DaysOfWeek;
            field_MyDateTimeKinds = source.MyDateTimeKinds;
            field_MyCustomEnums = source.MyCustomEnums;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public BuiltinTypes(IBuiltinTypes? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_Bools = source.Bools is null
                ? default
                : ImmutableList<Boolean>.Empty.AddRange(source.Bools);
            field_SBytes = source.SBytes is null
                ? default
                : ImmutableList<SByte>.Empty.AddRange(source.SBytes);
            field_Bytes = source.Bytes is null
                ? default
                : ImmutableList<Byte>.Empty.AddRange(source.Bytes);
            field_Shorts = source.Shorts is null
                ? default
                : ImmutableList<Int16>.Empty.AddRange(source.Shorts);
            field_UShorts = source.UShorts is null
                ? default
                : ImmutableList<UInt16>.Empty.AddRange(source.UShorts);
            field_Chars = source.Chars is null
                ? default
                : ImmutableList<Char>.Empty.AddRange(source.Chars);
            field_Ints = source.Ints is null
                ? default
                : ImmutableList<Int32>.Empty.AddRange(source.Ints);
            field_UInts = source.UInts is null
                ? default
                : ImmutableList<UInt32>.Empty.AddRange(source.UInts);
            field_Floats = source.Floats is null
                ? default
                : ImmutableList<Single>.Empty.AddRange(source.Floats);
            field_Longs = source.Longs is null
                ? default
                : ImmutableList<Int64>.Empty.AddRange(source.Longs);
            field_ULongs = source.ULongs is null
                ? default
                : ImmutableList<UInt64>.Empty.AddRange(source.ULongs);
            field_Doubles = source.Doubles is null
                ? default
                : ImmutableList<Double>.Empty.AddRange(source.Doubles);
            field_DateTimes = source.DateTimes is null
                ? default
                : ImmutableList<DateTime>.Empty.AddRange(source.DateTimes);
            field_TimeSpans = source.TimeSpans is null
                ? default
                : ImmutableList<TimeSpan>.Empty.AddRange(source.TimeSpans);
            field_Decimals = source.Decimals is null
                ? default
                : ImmutableList<Decimal>.Empty.AddRange(source.Decimals);
            field_DateTimeOffsets = source.DateTimeOffsets is null
                ? default
                : ImmutableList<DateTimeOffset>.Empty.AddRange(source.DateTimeOffsets);
            field_Guids = source.Guids is null
                ? default
                : ImmutableList<Guid>.Empty.AddRange(source.Guids);
            field_Strings = source.Strings is null
                ? default
                : ImmutableList<String?>.Empty.AddRange(source.Strings);
            this.Buffers = source.Buffers is null
                ? default
                : source.Buffers.Select(x => x is null ? null : x.Memory.ToArray()).ToArray();
            field_Quantities = source.Quantities is null
                ? default
                : ImmutableList<LabApps.Units.Quantity>.Empty.AddRange(source.Quantities);
            field_DaysOfWeek = source.DaysOfWeek is null
                ? default
                : ImmutableList<System.DayOfWeek>.Empty.AddRange(source.DaysOfWeek);
            field_MyDateTimeKinds = source.MyDateTimeKinds is null
                ? default
                : ImmutableList<System.DateTimeKind>.Empty.AddRange(source.MyDateTimeKinds);
            field_MyCustomEnums = source.MyCustomEnums is null
                ? default
                : ImmutableList<MyCustomEnum>.Empty.AddRange(source.MyCustomEnums);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void CopyFrom(IBuiltinTypes? source)
        {
            if (source is null) return;
            base.CopyFrom(source);
            field_Bools = source.Bools is null
                ? default
                : ImmutableList<Boolean>.Empty.AddRange(source.Bools);
            field_SBytes = source.SBytes is null
                ? default
                : ImmutableList<SByte>.Empty.AddRange(source.SBytes);
            field_Bytes = source.Bytes is null
                ? default
                : ImmutableList<Byte>.Empty.AddRange(source.Bytes);
            field_Shorts = source.Shorts is null
                ? default
                : ImmutableList<Int16>.Empty.AddRange(source.Shorts);
            field_UShorts = source.UShorts is null
                ? default
                : ImmutableList<UInt16>.Empty.AddRange(source.UShorts);
            field_Chars = source.Chars is null
                ? default
                : ImmutableList<Char>.Empty.AddRange(source.Chars);
            field_Ints = source.Ints is null
                ? default
                : ImmutableList<Int32>.Empty.AddRange(source.Ints);
            field_UInts = source.UInts is null
                ? default
                : ImmutableList<UInt32>.Empty.AddRange(source.UInts);
            field_Floats = source.Floats is null
                ? default
                : ImmutableList<Single>.Empty.AddRange(source.Floats);
            field_Longs = source.Longs is null
                ? default
                : ImmutableList<Int64>.Empty.AddRange(source.Longs);
            field_ULongs = source.ULongs is null
                ? default
                : ImmutableList<UInt64>.Empty.AddRange(source.ULongs);
            field_Doubles = source.Doubles is null
                ? default
                : ImmutableList<Double>.Empty.AddRange(source.Doubles);
            field_DateTimes = source.DateTimes is null
                ? default
                : ImmutableList<DateTime>.Empty.AddRange(source.DateTimes);
            field_TimeSpans = source.TimeSpans is null
                ? default
                : ImmutableList<TimeSpan>.Empty.AddRange(source.TimeSpans);
            field_Decimals = source.Decimals is null
                ? default
                : ImmutableList<Decimal>.Empty.AddRange(source.Decimals);
            field_DateTimeOffsets = source.DateTimeOffsets is null
                ? default
                : ImmutableList<DateTimeOffset>.Empty.AddRange(source.DateTimeOffsets);
            field_Guids = source.Guids is null
                ? default
                : ImmutableList<Guid>.Empty.AddRange(source.Guids);
            field_Strings = source.Strings is null
                ? default
                : ImmutableList<String?>.Empty.AddRange(source.Strings);
            this.Buffers = source.Buffers is null
                ? default
                : source.Buffers.Select(x => x is null ? null : x.Memory.ToArray()).ToArray();
            field_Quantities = source.Quantities is null
                ? default
                : ImmutableList<LabApps.Units.Quantity>.Empty.AddRange(source.Quantities);
            field_DaysOfWeek = source.DaysOfWeek is null
                ? default
                : ImmutableList<System.DayOfWeek>.Empty.AddRange(source.DaysOfWeek);
            field_MyDateTimeKinds = source.MyDateTimeKinds is null
                ? default
                : ImmutableList<System.DateTimeKind>.Empty.AddRange(source.MyDateTimeKinds);
            field_MyCustomEnums = source.MyCustomEnums is null
                ? default
                : ImmutableList<MyCustomEnum>.Empty.AddRange(source.MyCustomEnums);
        }

        public virtual bool Equals(BuiltinTypes? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!Bools.ArrayEquals(other.Bools, (a, b) => a == b)) return false;
            if (!SBytes.ArrayEquals(other.SBytes, (a, b) => a == b)) return false;
            if (!Bytes.ArrayEquals(other.Bytes, (a, b) => a == b)) return false;
            if (!Shorts.ArrayEquals(other.Shorts, (a, b) => a == b)) return false;
            if (!UShorts.ArrayEquals(other.UShorts, (a, b) => a == b)) return false;
            if (!Chars.ArrayEquals(other.Chars, (a, b) => a == b)) return false;
            if (!Ints.ArrayEquals(other.Ints, (a, b) => a == b)) return false;
            if (!UInts.ArrayEquals(other.UInts, (a, b) => a == b)) return false;
            if (!Floats.ArrayEquals(other.Floats, (a, b) => a == b)) return false;
            if (!Longs.ArrayEquals(other.Longs, (a, b) => a == b)) return false;
            if (!ULongs.ArrayEquals(other.ULongs, (a, b) => a == b)) return false;
            if (!Doubles.ArrayEquals(other.Doubles, (a, b) => a == b)) return false;
            if (!DateTimes.ArrayEquals(other.DateTimes, (a, b) => a == b)) return false;
            if (!TimeSpans.ArrayEquals(other.TimeSpans, (a, b) => a == b)) return false;
            if (!Decimals.ArrayEquals(other.Decimals, (a, b) => a == b)) return false;
            if (!DateTimeOffsets.ArrayEquals(other.DateTimeOffsets, (a, b) => a == b)) return false;
            if (!Guids.ArrayEquals(other.Guids, (a, b) => a == b)) return false;
            if (!Strings.ArrayEquals(other.Strings)) return false;
            if (!Buffers.ArrayEquals(other.Buffers)) return false;
            if (!Quantities.ArrayEquals(other.Quantities, (a, b) => a == b)) return false;
            if (!DaysOfWeek.ArrayEquals(other.DaysOfWeek, (a, b) => a == b)) return false;
            if (!MyDateTimeKinds.ArrayEquals(other.MyDateTimeKinds, (a, b) => a == b)) return false;
            if (!MyCustomEnums.ArrayEquals(other.MyCustomEnums, (a, b) => a == b)) return false;
            return base.Equals(other);
        }

        public override bool Equals(object? obj) => obj is BuiltinTypes other && Equals(other);

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(Bools.CalcHashArray());
            hc.Add(SBytes.CalcHashArray());
            hc.Add(Bytes.CalcHashArray());
            hc.Add(Shorts.CalcHashArray());
            hc.Add(UShorts.CalcHashArray());
            hc.Add(Chars.CalcHashArray());
            hc.Add(Ints.CalcHashArray());
            hc.Add(UInts.CalcHashArray());
            hc.Add(Floats.CalcHashArray());
            hc.Add(Longs.CalcHashArray());
            hc.Add(ULongs.CalcHashArray());
            hc.Add(Doubles.CalcHashArray());
            hc.Add(DateTimes.CalcHashArray());
            hc.Add(TimeSpans.CalcHashArray());
            hc.Add(Decimals.CalcHashArray());
            hc.Add(DateTimeOffsets.CalcHashArray());
            hc.Add(Guids.CalcHashArray());
            hc.Add(Strings.CalcHashArray());
            hc.Add(Buffers.CalcHashArray());
            hc.Add(Quantities.CalcHashArray());
            hc.Add(DaysOfWeek.CalcHashArray());
            hc.Add(MyDateTimeKinds.CalcHashArray());
            hc.Add(MyCustomEnums.CalcHashArray());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }
    }


}