using FluentAssertions;
using MetaFac.CG4.Attributes;
using MetaFac.CG4.TestOrg.Schema;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using System;
using System.Linq;
using System.Reflection;
using Xunit;

namespace MetaFac.CG4.SourceGenerator.UnitTests
{
    public class CG4SourceGeneratorTests
    {
        private static Assembly GetAssemblyForType(Type type)
        {
            return Assembly.GetAssembly(typeof(Type)) ?? throw new ArgumentException("Could not get assembly for type.", nameof(type));
        }
        private static Compilation CreateCompilation(string source)
        {
            Assembly assm1 = GetAssemblyForType(typeof(Attribute)); // System.Private.CoreLib
            Assembly assm2 = Assembly.Load("System.Runtime, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

            return CSharpCompilation.Create("compilation",
                        new[] { CSharpSyntaxTree.ParseText(source) },
                        new[]
                        {
                            MetadataReference.CreateFromFile(assm1.Location),
                            MetadataReference.CreateFromFile(assm2.Location),
                            MetadataReference.CreateFromFile(typeof(EntityAttribute).GetTypeInfo().Assembly.Location),
                            MetadataReference.CreateFromFile(typeof(IPerson).GetTypeInfo().Assembly.Location),
                        },
                        new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary));
        }

        [Fact]
        public void MinimalTest()
        {
            var source =
                """
                using MetaFac.CG4.Attributes;
                using MetaFac.CG4.TestOrg.Schema;

                namespace MetaFac.CG4.TestOrg.Models
                {
                    [CG4Generate("Contracts", typeof(IPerson))]
                    internal static partial class InterfaceModels { }
                }
                """;

            // Create the 'input' compilation that the generator will act on
            Compilation inputCompilation = CreateCompilation(source);

            // directly create an instance of the generator
            // (Note: in the compiler this is loaded from an assembly, and created via reflection at runtime)
            var generator = new CG4SourceGenerator();

            // Create the driver that will control the generation, passing in our generator
            GeneratorDriver driver = CSharpGeneratorDriver.Create(generator);

            // Run the generation pass
            // (Note: the generator driver itself is immutable, and all calls return an updated version of the driver that you should use for subsequent calls)
            driver = driver.RunGeneratorsAndUpdateCompilation(inputCompilation, out var outputCompilation, out var diagnostics);

            // We can now assert things about the resulting compilation:
            diagnostics.Should().BeEmpty(); // there were no diagnostics created by the generators
            outputCompilation.SyntaxTrees.Should().HaveCount(2); // we have two syntax trees, the original 'user' provided one, and the one added by the generator
            outputCompilation.GetDiagnostics().Should().BeEmpty(); // verify the compilation with the added source has no diagnostics

            // Or we can look at the results directly:
            GeneratorDriverRunResult runResult = driver.GetRunResult();

            // The runResult contains the combined results of all generators passed to the driver
            runResult.GeneratedTrees.Length.Should().Be(1);
            runResult.Diagnostics.Should().BeEmpty();

            // Or you can access the individual results on a by-generator basis
            GeneratorRunResult generatorResult = runResult.Results[0];
            generatorResult.Diagnostics.Should().BeEmpty();
            generatorResult.GeneratedSources.Length.Should().Be(1);
            generatorResult.Exception.Should().BeNull();

            // custom generation checks
            var outputSource1 = generatorResult.GeneratedSources[0];
            outputSource1.HintName.Should().Be("Generated.Contracts.g.cs");
            string[] expectedOutput =
                """
                // <auto-generated>
                // Debug: TargetNamespace: MetaFac.CG4.TestOrg.Models
                // </auto-generated>

                """
                .Split(Environment.NewLine)
                .ToArray();
            string[] actualOutput = outputSource1.SourceText.Lines
                .Select(tl => tl.ToString())
                .ToArray();
            actualOutput.Should().BeEquivalentTo(expectedOutput);
        }
    }
}