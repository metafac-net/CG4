#region Notices
// <auto-generated>
// Warning: This file was automatically generated. Changes to this file may
// cause incorrect behavior and will be lost when this file is regenerated.
// </auto-generated>
// <information>
// This file was generated using MetaFac.CG4 tools and user supplied metadata.
// Generator: JsonNewtonSoft.2.0
// Metadata : MetaFac.CG4.TestOrg.Schema(.BasicTypes)
// </information>
#endregion
#nullable enable
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
#pragma warning disable CS8019 // Unnecessary using directive
using MetaFac.Mutability;
using MetaFac.CG4.Runtime;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Runtime.CompilerServices;
using MetaFac.CG4.TestOrg.Models.BasicTypes.Contracts;
using MetaFac.Memory;

namespace MetaFac.CG4.TestOrg.Models.BasicTypes.JsonNewtonSoft
{


    public abstract class EntityBase : IFreezable, IEntityBase
    {
        public static EntityBase Empty => throw new NotSupportedException();
        public const int EntityTag = 0;
        public EntityBase() { }
        public EntityBase(EntityBase? source) { }
        public EntityBase(IEntityBase? source) { }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void CopyFrom(IEntityBase? source) { }
        protected abstract int OnGetEntityTag();
        public int GetEntityTag() => OnGetEntityTag();
        public virtual bool Equals(EntityBase? other) => true;
        public override int GetHashCode() => 0;

        public bool IsFreezable() => false;
        public bool IsFrozen() => false;
        public void Freeze() { }
        public bool TryFreeze() => true;
    }


    public partial class Basic_bool
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Basic_bool? CreateFrom(IBasic_bool? source)
        {
            if (source is null) return null;
            return new Basic_bool(source);
        }

        private static Basic_bool CreateEmpty()
        {
            var empty = new Basic_bool();
            empty.Freeze();
            return empty;
        }
        private static readonly Basic_bool _empty = CreateEmpty();
        public static new Basic_bool Empty => _empty;

    }
    public partial class Basic_bool : EntityBase, IBasic_bool, IEquatable<Basic_bool>
    {
        public new const int EntityTag = 1;
        protected override int OnGetEntityTag() => EntityTag;

        private Boolean field_ScalarRequired;
        Boolean IBasic_bool.ScalarRequired => field_ScalarRequired;
        public Boolean ScalarRequired
        {
            get => field_ScalarRequired;
            set => field_ScalarRequired = value;
        }
        private Boolean? field_ScalarOptional;
        Boolean? IBasic_bool.ScalarOptional => field_ScalarOptional;
        public Boolean? ScalarOptional
        {
            get => field_ScalarOptional;
            set => field_ScalarOptional = value;
        }
        private ImmutableList<Boolean>? field_VectorRequired;
        IReadOnlyList<Boolean>? IBasic_bool.VectorRequired => field_VectorRequired;
        public ImmutableList<Boolean>? VectorRequired
        {
            get => field_VectorRequired;
            set => field_VectorRequired = value;
        }
        private ImmutableList<Boolean?>? field_VectorOptional;
        IReadOnlyList<Boolean?>? IBasic_bool.VectorOptional => field_VectorOptional;
        public ImmutableList<Boolean?>? VectorOptional
        {
            get => field_VectorOptional;
            set => field_VectorOptional = value;
        }
        private ImmutableDictionary<String, Boolean>? field_MapRequired;
        IReadOnlyDictionary<String, Boolean>? IBasic_bool.MapRequired => MapRequired;
        public ImmutableDictionary<String, Boolean>? MapRequired
        {
            get => field_MapRequired;
            set => field_MapRequired = value;
        }
        private ImmutableDictionary<String, Boolean?>? field_MapOptional;
        IReadOnlyDictionary<String, Boolean?>? IBasic_bool.MapOptional => field_MapOptional;
        public ImmutableDictionary<String, Boolean?>? MapOptional
        {
            get => field_MapOptional;
            set => field_MapOptional = value;
        }
        private ImmutableDictionary<Boolean, String?>? field_MapKey;
        IReadOnlyDictionary<Boolean, String?>? IBasic_bool.MapKey => field_MapKey;
        public ImmutableDictionary<Boolean, String?>? MapKey
        {
            get => field_MapKey;
            set => field_MapKey = value;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Basic_bool() : base()
        {
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Basic_bool(Basic_bool? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired;
            field_VectorOptional = source.VectorOptional;
            field_MapRequired = source.MapRequired;
            field_MapOptional = source.MapOptional;
            field_MapKey = source.MapKey;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Basic_bool(IBasic_bool? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<Boolean>.Empty.AddRange(source.VectorRequired);
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<Boolean?>.Empty.AddRange(source.VectorOptional);
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, Boolean>.Empty.AddRange(source.MapRequired);
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, Boolean?>.Empty.AddRange(source.MapOptional);
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<Boolean, String?>.Empty.AddRange(source.MapKey);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void CopyFrom(IBasic_bool? source)
        {
            if (source is null) return;
            base.CopyFrom(source);
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<Boolean>.Empty.AddRange(source.VectorRequired);
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<Boolean?>.Empty.AddRange(source.VectorOptional);
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, Boolean>.Empty.AddRange(source.MapRequired);
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, Boolean?>.Empty.AddRange(source.MapOptional);
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<Boolean, String?>.Empty.AddRange(source.MapKey);
        }

        public virtual bool Equals(Basic_bool? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (ScalarRequired != other.ScalarRequired) return false;
            if (ScalarOptional != other.ScalarOptional) return false;
            if (!VectorRequired.ArrayEquals(other.VectorRequired, (a, b) => a == b)) return false;
            if (!VectorOptional.ArrayEquals(other.VectorOptional, (a, b) => a == b)) return false;
            if (!MapRequired.IndexEquals(other.MapRequired, (a, b) => a == b)) return false;
            if (!MapOptional.IndexEquals(other.MapOptional, (a, b) => a == b)) return false;
            if (!MapKey.IndexEquals(other.MapKey)) return false;
            return base.Equals(other);
        }

        public override bool Equals(object? obj) => obj is Basic_bool other && Equals(other);

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(ScalarRequired.CalcHashUnary());
            hc.Add(ScalarOptional.CalcHashUnary());
            hc.Add(VectorRequired.CalcHashArray());
            hc.Add(VectorOptional.CalcHashArray());
            hc.Add(MapRequired.CalcHashIndex());
            hc.Add(MapOptional.CalcHashIndex());
            hc.Add(MapKey.CalcHashIndex());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }
    }

    public partial class Basic_decimal
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Basic_decimal? CreateFrom(IBasic_decimal? source)
        {
            if (source is null) return null;
            return new Basic_decimal(source);
        }

        private static Basic_decimal CreateEmpty()
        {
            var empty = new Basic_decimal();
            empty.Freeze();
            return empty;
        }
        private static readonly Basic_decimal _empty = CreateEmpty();
        public static new Basic_decimal Empty => _empty;

    }
    public partial class Basic_decimal : EntityBase, IBasic_decimal, IEquatable<Basic_decimal>
    {
        public new const int EntityTag = 17;
        protected override int OnGetEntityTag() => EntityTag;

        private Decimal field_ScalarRequired;
        Decimal IBasic_decimal.ScalarRequired => field_ScalarRequired;
        public Decimal ScalarRequired
        {
            get => field_ScalarRequired;
            set => field_ScalarRequired = value;
        }
        private Decimal? field_ScalarOptional;
        Decimal? IBasic_decimal.ScalarOptional => field_ScalarOptional;
        public Decimal? ScalarOptional
        {
            get => field_ScalarOptional;
            set => field_ScalarOptional = value;
        }
        private ImmutableList<Decimal>? field_VectorRequired;
        IReadOnlyList<Decimal>? IBasic_decimal.VectorRequired => field_VectorRequired;
        public ImmutableList<Decimal>? VectorRequired
        {
            get => field_VectorRequired;
            set => field_VectorRequired = value;
        }
        private ImmutableList<Decimal?>? field_VectorOptional;
        IReadOnlyList<Decimal?>? IBasic_decimal.VectorOptional => field_VectorOptional;
        public ImmutableList<Decimal?>? VectorOptional
        {
            get => field_VectorOptional;
            set => field_VectorOptional = value;
        }
        private ImmutableDictionary<String, Decimal>? field_MapRequired;
        IReadOnlyDictionary<String, Decimal>? IBasic_decimal.MapRequired => MapRequired;
        public ImmutableDictionary<String, Decimal>? MapRequired
        {
            get => field_MapRequired;
            set => field_MapRequired = value;
        }
        private ImmutableDictionary<String, Decimal?>? field_MapOptional;
        IReadOnlyDictionary<String, Decimal?>? IBasic_decimal.MapOptional => field_MapOptional;
        public ImmutableDictionary<String, Decimal?>? MapOptional
        {
            get => field_MapOptional;
            set => field_MapOptional = value;
        }
        private ImmutableDictionary<Decimal, String?>? field_MapKey;
        IReadOnlyDictionary<Decimal, String?>? IBasic_decimal.MapKey => field_MapKey;
        public ImmutableDictionary<Decimal, String?>? MapKey
        {
            get => field_MapKey;
            set => field_MapKey = value;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Basic_decimal() : base()
        {
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Basic_decimal(Basic_decimal? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired;
            field_VectorOptional = source.VectorOptional;
            field_MapRequired = source.MapRequired;
            field_MapOptional = source.MapOptional;
            field_MapKey = source.MapKey;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Basic_decimal(IBasic_decimal? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<Decimal>.Empty.AddRange(source.VectorRequired);
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<Decimal?>.Empty.AddRange(source.VectorOptional);
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, Decimal>.Empty.AddRange(source.MapRequired);
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, Decimal?>.Empty.AddRange(source.MapOptional);
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<Decimal, String?>.Empty.AddRange(source.MapKey);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void CopyFrom(IBasic_decimal? source)
        {
            if (source is null) return;
            base.CopyFrom(source);
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<Decimal>.Empty.AddRange(source.VectorRequired);
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<Decimal?>.Empty.AddRange(source.VectorOptional);
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, Decimal>.Empty.AddRange(source.MapRequired);
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, Decimal?>.Empty.AddRange(source.MapOptional);
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<Decimal, String?>.Empty.AddRange(source.MapKey);
        }

        public virtual bool Equals(Basic_decimal? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (ScalarRequired != other.ScalarRequired) return false;
            if (ScalarOptional != other.ScalarOptional) return false;
            if (!VectorRequired.ArrayEquals(other.VectorRequired, (a, b) => a == b)) return false;
            if (!VectorOptional.ArrayEquals(other.VectorOptional, (a, b) => a == b)) return false;
            if (!MapRequired.IndexEquals(other.MapRequired, (a, b) => a == b)) return false;
            if (!MapOptional.IndexEquals(other.MapOptional, (a, b) => a == b)) return false;
            if (!MapKey.IndexEquals(other.MapKey)) return false;
            return base.Equals(other);
        }

        public override bool Equals(object? obj) => obj is Basic_decimal other && Equals(other);

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(ScalarRequired.CalcHashUnary());
            hc.Add(ScalarOptional.CalcHashUnary());
            hc.Add(VectorRequired.CalcHashArray());
            hc.Add(VectorOptional.CalcHashArray());
            hc.Add(MapRequired.CalcHashIndex());
            hc.Add(MapOptional.CalcHashIndex());
            hc.Add(MapKey.CalcHashIndex());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }
    }

    public partial class Basic_DateTimeOffset
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Basic_DateTimeOffset? CreateFrom(IBasic_DateTimeOffset? source)
        {
            if (source is null) return null;
            return new Basic_DateTimeOffset(source);
        }

        private static Basic_DateTimeOffset CreateEmpty()
        {
            var empty = new Basic_DateTimeOffset();
            empty.Freeze();
            return empty;
        }
        private static readonly Basic_DateTimeOffset _empty = CreateEmpty();
        public static new Basic_DateTimeOffset Empty => _empty;

    }
    public partial class Basic_DateTimeOffset : EntityBase, IBasic_DateTimeOffset, IEquatable<Basic_DateTimeOffset>
    {
        public new const int EntityTag = 18;
        protected override int OnGetEntityTag() => EntityTag;

        private DateTimeOffset field_ScalarRequired;
        DateTimeOffset IBasic_DateTimeOffset.ScalarRequired => field_ScalarRequired;
        public DateTimeOffset ScalarRequired
        {
            get => field_ScalarRequired;
            set => field_ScalarRequired = value;
        }
        private DateTimeOffset? field_ScalarOptional;
        DateTimeOffset? IBasic_DateTimeOffset.ScalarOptional => field_ScalarOptional;
        public DateTimeOffset? ScalarOptional
        {
            get => field_ScalarOptional;
            set => field_ScalarOptional = value;
        }
        private ImmutableList<DateTimeOffset>? field_VectorRequired;
        IReadOnlyList<DateTimeOffset>? IBasic_DateTimeOffset.VectorRequired => field_VectorRequired;
        public ImmutableList<DateTimeOffset>? VectorRequired
        {
            get => field_VectorRequired;
            set => field_VectorRequired = value;
        }
        private ImmutableList<DateTimeOffset?>? field_VectorOptional;
        IReadOnlyList<DateTimeOffset?>? IBasic_DateTimeOffset.VectorOptional => field_VectorOptional;
        public ImmutableList<DateTimeOffset?>? VectorOptional
        {
            get => field_VectorOptional;
            set => field_VectorOptional = value;
        }
        private ImmutableDictionary<String, DateTimeOffset>? field_MapRequired;
        IReadOnlyDictionary<String, DateTimeOffset>? IBasic_DateTimeOffset.MapRequired => MapRequired;
        public ImmutableDictionary<String, DateTimeOffset>? MapRequired
        {
            get => field_MapRequired;
            set => field_MapRequired = value;
        }
        private ImmutableDictionary<String, DateTimeOffset?>? field_MapOptional;
        IReadOnlyDictionary<String, DateTimeOffset?>? IBasic_DateTimeOffset.MapOptional => field_MapOptional;
        public ImmutableDictionary<String, DateTimeOffset?>? MapOptional
        {
            get => field_MapOptional;
            set => field_MapOptional = value;
        }
        private ImmutableDictionary<DateTimeOffset, String?>? field_MapKey;
        IReadOnlyDictionary<DateTimeOffset, String?>? IBasic_DateTimeOffset.MapKey => field_MapKey;
        public ImmutableDictionary<DateTimeOffset, String?>? MapKey
        {
            get => field_MapKey;
            set => field_MapKey = value;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Basic_DateTimeOffset() : base()
        {
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Basic_DateTimeOffset(Basic_DateTimeOffset? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired;
            field_VectorOptional = source.VectorOptional;
            field_MapRequired = source.MapRequired;
            field_MapOptional = source.MapOptional;
            field_MapKey = source.MapKey;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Basic_DateTimeOffset(IBasic_DateTimeOffset? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<DateTimeOffset>.Empty.AddRange(source.VectorRequired);
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<DateTimeOffset?>.Empty.AddRange(source.VectorOptional);
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, DateTimeOffset>.Empty.AddRange(source.MapRequired);
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, DateTimeOffset?>.Empty.AddRange(source.MapOptional);
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<DateTimeOffset, String?>.Empty.AddRange(source.MapKey);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void CopyFrom(IBasic_DateTimeOffset? source)
        {
            if (source is null) return;
            base.CopyFrom(source);
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<DateTimeOffset>.Empty.AddRange(source.VectorRequired);
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<DateTimeOffset?>.Empty.AddRange(source.VectorOptional);
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, DateTimeOffset>.Empty.AddRange(source.MapRequired);
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, DateTimeOffset?>.Empty.AddRange(source.MapOptional);
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<DateTimeOffset, String?>.Empty.AddRange(source.MapKey);
        }

        public virtual bool Equals(Basic_DateTimeOffset? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (ScalarRequired != other.ScalarRequired) return false;
            if (ScalarOptional != other.ScalarOptional) return false;
            if (!VectorRequired.ArrayEquals(other.VectorRequired, (a, b) => a == b)) return false;
            if (!VectorOptional.ArrayEquals(other.VectorOptional, (a, b) => a == b)) return false;
            if (!MapRequired.IndexEquals(other.MapRequired, (a, b) => a == b)) return false;
            if (!MapOptional.IndexEquals(other.MapOptional, (a, b) => a == b)) return false;
            if (!MapKey.IndexEquals(other.MapKey)) return false;
            return base.Equals(other);
        }

        public override bool Equals(object? obj) => obj is Basic_DateTimeOffset other && Equals(other);

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(ScalarRequired.CalcHashUnary());
            hc.Add(ScalarOptional.CalcHashUnary());
            hc.Add(VectorRequired.CalcHashArray());
            hc.Add(VectorOptional.CalcHashArray());
            hc.Add(MapRequired.CalcHashIndex());
            hc.Add(MapOptional.CalcHashIndex());
            hc.Add(MapKey.CalcHashIndex());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }
    }

    public partial class Basic_Guid
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Basic_Guid? CreateFrom(IBasic_Guid? source)
        {
            if (source is null) return null;
            return new Basic_Guid(source);
        }

        private static Basic_Guid CreateEmpty()
        {
            var empty = new Basic_Guid();
            empty.Freeze();
            return empty;
        }
        private static readonly Basic_Guid _empty = CreateEmpty();
        public static new Basic_Guid Empty => _empty;

    }
    public partial class Basic_Guid : EntityBase, IBasic_Guid, IEquatable<Basic_Guid>
    {
        public new const int EntityTag = 19;
        protected override int OnGetEntityTag() => EntityTag;

        private Guid field_ScalarRequired;
        Guid IBasic_Guid.ScalarRequired => field_ScalarRequired;
        public Guid ScalarRequired
        {
            get => field_ScalarRequired;
            set => field_ScalarRequired = value;
        }
        private Guid? field_ScalarOptional;
        Guid? IBasic_Guid.ScalarOptional => field_ScalarOptional;
        public Guid? ScalarOptional
        {
            get => field_ScalarOptional;
            set => field_ScalarOptional = value;
        }
        private ImmutableList<Guid>? field_VectorRequired;
        IReadOnlyList<Guid>? IBasic_Guid.VectorRequired => field_VectorRequired;
        public ImmutableList<Guid>? VectorRequired
        {
            get => field_VectorRequired;
            set => field_VectorRequired = value;
        }
        private ImmutableList<Guid?>? field_VectorOptional;
        IReadOnlyList<Guid?>? IBasic_Guid.VectorOptional => field_VectorOptional;
        public ImmutableList<Guid?>? VectorOptional
        {
            get => field_VectorOptional;
            set => field_VectorOptional = value;
        }
        private ImmutableDictionary<String, Guid>? field_MapRequired;
        IReadOnlyDictionary<String, Guid>? IBasic_Guid.MapRequired => MapRequired;
        public ImmutableDictionary<String, Guid>? MapRequired
        {
            get => field_MapRequired;
            set => field_MapRequired = value;
        }
        private ImmutableDictionary<String, Guid?>? field_MapOptional;
        IReadOnlyDictionary<String, Guid?>? IBasic_Guid.MapOptional => field_MapOptional;
        public ImmutableDictionary<String, Guid?>? MapOptional
        {
            get => field_MapOptional;
            set => field_MapOptional = value;
        }
        private ImmutableDictionary<Guid, String?>? field_MapKey;
        IReadOnlyDictionary<Guid, String?>? IBasic_Guid.MapKey => field_MapKey;
        public ImmutableDictionary<Guid, String?>? MapKey
        {
            get => field_MapKey;
            set => field_MapKey = value;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Basic_Guid() : base()
        {
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Basic_Guid(Basic_Guid? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired;
            field_VectorOptional = source.VectorOptional;
            field_MapRequired = source.MapRequired;
            field_MapOptional = source.MapOptional;
            field_MapKey = source.MapKey;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Basic_Guid(IBasic_Guid? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<Guid>.Empty.AddRange(source.VectorRequired);
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<Guid?>.Empty.AddRange(source.VectorOptional);
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, Guid>.Empty.AddRange(source.MapRequired);
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, Guid?>.Empty.AddRange(source.MapOptional);
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<Guid, String?>.Empty.AddRange(source.MapKey);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void CopyFrom(IBasic_Guid? source)
        {
            if (source is null) return;
            base.CopyFrom(source);
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<Guid>.Empty.AddRange(source.VectorRequired);
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<Guid?>.Empty.AddRange(source.VectorOptional);
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, Guid>.Empty.AddRange(source.MapRequired);
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, Guid?>.Empty.AddRange(source.MapOptional);
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<Guid, String?>.Empty.AddRange(source.MapKey);
        }

        public virtual bool Equals(Basic_Guid? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (ScalarRequired != other.ScalarRequired) return false;
            if (ScalarOptional != other.ScalarOptional) return false;
            if (!VectorRequired.ArrayEquals(other.VectorRequired, (a, b) => a == b)) return false;
            if (!VectorOptional.ArrayEquals(other.VectorOptional, (a, b) => a == b)) return false;
            if (!MapRequired.IndexEquals(other.MapRequired, (a, b) => a == b)) return false;
            if (!MapOptional.IndexEquals(other.MapOptional, (a, b) => a == b)) return false;
            if (!MapKey.IndexEquals(other.MapKey)) return false;
            return base.Equals(other);
        }

        public override bool Equals(object? obj) => obj is Basic_Guid other && Equals(other);

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(ScalarRequired.CalcHashUnary());
            hc.Add(ScalarOptional.CalcHashUnary());
            hc.Add(VectorRequired.CalcHashArray());
            hc.Add(VectorOptional.CalcHashArray());
            hc.Add(MapRequired.CalcHashIndex());
            hc.Add(MapOptional.CalcHashIndex());
            hc.Add(MapKey.CalcHashIndex());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }
    }

    public partial class Basic_DayOfWeek
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Basic_DayOfWeek? CreateFrom(IBasic_DayOfWeek? source)
        {
            if (source is null) return null;
            return new Basic_DayOfWeek(source);
        }

        private static Basic_DayOfWeek CreateEmpty()
        {
            var empty = new Basic_DayOfWeek();
            empty.Freeze();
            return empty;
        }
        private static readonly Basic_DayOfWeek _empty = CreateEmpty();
        public static new Basic_DayOfWeek Empty => _empty;

    }
    public partial class Basic_DayOfWeek : EntityBase, IBasic_DayOfWeek, IEquatable<Basic_DayOfWeek>
    {
        public new const int EntityTag = 20;
        protected override int OnGetEntityTag() => EntityTag;

        private System.DayOfWeek field_ScalarRequired;
        System.DayOfWeek IBasic_DayOfWeek.ScalarRequired => field_ScalarRequired;
        public System.DayOfWeek ScalarRequired
        {
            get => field_ScalarRequired;
            set => field_ScalarRequired = value;
        }
        private System.DayOfWeek? field_ScalarOptional;
        System.DayOfWeek? IBasic_DayOfWeek.ScalarOptional => field_ScalarOptional;
        public System.DayOfWeek? ScalarOptional
        {
            get => field_ScalarOptional;
            set => field_ScalarOptional = value;
        }
        private ImmutableList<System.DayOfWeek>? field_VectorRequired;
        IReadOnlyList<System.DayOfWeek>? IBasic_DayOfWeek.VectorRequired => field_VectorRequired;
        public ImmutableList<System.DayOfWeek>? VectorRequired
        {
            get => field_VectorRequired;
            set => field_VectorRequired = value;
        }
        private ImmutableList<System.DayOfWeek?>? field_VectorOptional;
        IReadOnlyList<System.DayOfWeek?>? IBasic_DayOfWeek.VectorOptional => field_VectorOptional;
        public ImmutableList<System.DayOfWeek?>? VectorOptional
        {
            get => field_VectorOptional;
            set => field_VectorOptional = value;
        }
        private ImmutableDictionary<String, System.DayOfWeek>? field_MapRequired;
        IReadOnlyDictionary<String, System.DayOfWeek>? IBasic_DayOfWeek.MapRequired => MapRequired;
        public ImmutableDictionary<String, System.DayOfWeek>? MapRequired
        {
            get => field_MapRequired;
            set => field_MapRequired = value;
        }
        private ImmutableDictionary<String, System.DayOfWeek?>? field_MapOptional;
        IReadOnlyDictionary<String, System.DayOfWeek?>? IBasic_DayOfWeek.MapOptional => field_MapOptional;
        public ImmutableDictionary<String, System.DayOfWeek?>? MapOptional
        {
            get => field_MapOptional;
            set => field_MapOptional = value;
        }
        private ImmutableDictionary<System.DayOfWeek, String?>? field_MapKey;
        IReadOnlyDictionary<System.DayOfWeek, String?>? IBasic_DayOfWeek.MapKey => field_MapKey;
        public ImmutableDictionary<System.DayOfWeek, String?>? MapKey
        {
            get => field_MapKey;
            set => field_MapKey = value;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Basic_DayOfWeek() : base()
        {
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Basic_DayOfWeek(Basic_DayOfWeek? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired;
            field_VectorOptional = source.VectorOptional;
            field_MapRequired = source.MapRequired;
            field_MapOptional = source.MapOptional;
            field_MapKey = source.MapKey;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Basic_DayOfWeek(IBasic_DayOfWeek? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<System.DayOfWeek>.Empty.AddRange(source.VectorRequired);
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<System.DayOfWeek?>.Empty.AddRange(source.VectorOptional);
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, System.DayOfWeek>.Empty.AddRange(source.MapRequired);
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, System.DayOfWeek?>.Empty.AddRange(source.MapOptional);
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<System.DayOfWeek, String?>.Empty.AddRange(source.MapKey);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void CopyFrom(IBasic_DayOfWeek? source)
        {
            if (source is null) return;
            base.CopyFrom(source);
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<System.DayOfWeek>.Empty.AddRange(source.VectorRequired);
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<System.DayOfWeek?>.Empty.AddRange(source.VectorOptional);
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, System.DayOfWeek>.Empty.AddRange(source.MapRequired);
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, System.DayOfWeek?>.Empty.AddRange(source.MapOptional);
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<System.DayOfWeek, String?>.Empty.AddRange(source.MapKey);
        }

        public virtual bool Equals(Basic_DayOfWeek? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (ScalarRequired != other.ScalarRequired) return false;
            if (ScalarOptional != other.ScalarOptional) return false;
            if (!VectorRequired.ArrayEquals(other.VectorRequired, (a, b) => a == b)) return false;
            if (!VectorOptional.ArrayEquals(other.VectorOptional, (a, b) => a == b)) return false;
            if (!MapRequired.IndexEquals(other.MapRequired, (a, b) => a == b)) return false;
            if (!MapOptional.IndexEquals(other.MapOptional, (a, b) => a == b)) return false;
            if (!MapKey.IndexEquals(other.MapKey)) return false;
            return base.Equals(other);
        }

        public override bool Equals(object? obj) => obj is Basic_DayOfWeek other && Equals(other);

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(ScalarRequired.CalcHashUnary());
            hc.Add(ScalarOptional.CalcHashUnary());
            hc.Add(VectorRequired.CalcHashArray());
            hc.Add(VectorOptional.CalcHashArray());
            hc.Add(MapRequired.CalcHashIndex());
            hc.Add(MapOptional.CalcHashIndex());
            hc.Add(MapKey.CalcHashIndex());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }
    }

    public partial class Basic_MyCustomEnum
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Basic_MyCustomEnum? CreateFrom(IBasic_MyCustomEnum? source)
        {
            if (source is null) return null;
            return new Basic_MyCustomEnum(source);
        }

        private static Basic_MyCustomEnum CreateEmpty()
        {
            var empty = new Basic_MyCustomEnum();
            empty.Freeze();
            return empty;
        }
        private static readonly Basic_MyCustomEnum _empty = CreateEmpty();
        public static new Basic_MyCustomEnum Empty => _empty;

    }
    public partial class Basic_MyCustomEnum : EntityBase, IBasic_MyCustomEnum, IEquatable<Basic_MyCustomEnum>
    {
        public new const int EntityTag = 21;
        protected override int OnGetEntityTag() => EntityTag;

        private MyCustomEnum field_ScalarRequired;
        MyCustomEnum IBasic_MyCustomEnum.ScalarRequired => field_ScalarRequired;
        public MyCustomEnum ScalarRequired
        {
            get => field_ScalarRequired;
            set => field_ScalarRequired = value;
        }
        private MyCustomEnum? field_ScalarOptional;
        MyCustomEnum? IBasic_MyCustomEnum.ScalarOptional => field_ScalarOptional;
        public MyCustomEnum? ScalarOptional
        {
            get => field_ScalarOptional;
            set => field_ScalarOptional = value;
        }
        private ImmutableList<MyCustomEnum>? field_VectorRequired;
        IReadOnlyList<MyCustomEnum>? IBasic_MyCustomEnum.VectorRequired => field_VectorRequired;
        public ImmutableList<MyCustomEnum>? VectorRequired
        {
            get => field_VectorRequired;
            set => field_VectorRequired = value;
        }
        private ImmutableList<MyCustomEnum?>? field_VectorOptional;
        IReadOnlyList<MyCustomEnum?>? IBasic_MyCustomEnum.VectorOptional => field_VectorOptional;
        public ImmutableList<MyCustomEnum?>? VectorOptional
        {
            get => field_VectorOptional;
            set => field_VectorOptional = value;
        }
        private ImmutableDictionary<String, MyCustomEnum>? field_MapRequired;
        IReadOnlyDictionary<String, MyCustomEnum>? IBasic_MyCustomEnum.MapRequired => MapRequired;
        public ImmutableDictionary<String, MyCustomEnum>? MapRequired
        {
            get => field_MapRequired;
            set => field_MapRequired = value;
        }
        private ImmutableDictionary<String, MyCustomEnum?>? field_MapOptional;
        IReadOnlyDictionary<String, MyCustomEnum?>? IBasic_MyCustomEnum.MapOptional => field_MapOptional;
        public ImmutableDictionary<String, MyCustomEnum?>? MapOptional
        {
            get => field_MapOptional;
            set => field_MapOptional = value;
        }
        private ImmutableDictionary<MyCustomEnum, String?>? field_MapKey;
        IReadOnlyDictionary<MyCustomEnum, String?>? IBasic_MyCustomEnum.MapKey => field_MapKey;
        public ImmutableDictionary<MyCustomEnum, String?>? MapKey
        {
            get => field_MapKey;
            set => field_MapKey = value;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Basic_MyCustomEnum() : base()
        {
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Basic_MyCustomEnum(Basic_MyCustomEnum? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired;
            field_VectorOptional = source.VectorOptional;
            field_MapRequired = source.MapRequired;
            field_MapOptional = source.MapOptional;
            field_MapKey = source.MapKey;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Basic_MyCustomEnum(IBasic_MyCustomEnum? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<MyCustomEnum>.Empty.AddRange(source.VectorRequired);
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<MyCustomEnum?>.Empty.AddRange(source.VectorOptional);
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, MyCustomEnum>.Empty.AddRange(source.MapRequired);
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, MyCustomEnum?>.Empty.AddRange(source.MapOptional);
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<MyCustomEnum, String?>.Empty.AddRange(source.MapKey);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void CopyFrom(IBasic_MyCustomEnum? source)
        {
            if (source is null) return;
            base.CopyFrom(source);
            field_ScalarRequired = source.ScalarRequired;
            field_ScalarOptional = source.ScalarOptional;
            field_VectorRequired = source.VectorRequired is null
                ? default
                : ImmutableList<MyCustomEnum>.Empty.AddRange(source.VectorRequired);
            field_VectorOptional = source.VectorOptional is null
                ? default
                : ImmutableList<MyCustomEnum?>.Empty.AddRange(source.VectorOptional);
            field_MapRequired = source.MapRequired is null
                ? default
                : ImmutableDictionary<String, MyCustomEnum>.Empty.AddRange(source.MapRequired);
            field_MapOptional = source.MapOptional is null
                ? default
                : ImmutableDictionary<String, MyCustomEnum?>.Empty.AddRange(source.MapOptional);
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<MyCustomEnum, String?>.Empty.AddRange(source.MapKey);
        }

        public virtual bool Equals(Basic_MyCustomEnum? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (ScalarRequired != other.ScalarRequired) return false;
            if (ScalarOptional != other.ScalarOptional) return false;
            if (!VectorRequired.ArrayEquals(other.VectorRequired, (a, b) => a == b)) return false;
            if (!VectorOptional.ArrayEquals(other.VectorOptional, (a, b) => a == b)) return false;
            if (!MapRequired.IndexEquals(other.MapRequired, (a, b) => a == b)) return false;
            if (!MapOptional.IndexEquals(other.MapOptional, (a, b) => a == b)) return false;
            if (!MapKey.IndexEquals(other.MapKey)) return false;
            return base.Equals(other);
        }

        public override bool Equals(object? obj) => obj is Basic_MyCustomEnum other && Equals(other);

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(ScalarRequired.CalcHashUnary());
            hc.Add(ScalarOptional.CalcHashUnary());
            hc.Add(VectorRequired.CalcHashArray());
            hc.Add(VectorOptional.CalcHashArray());
            hc.Add(MapRequired.CalcHashIndex());
            hc.Add(MapOptional.CalcHashIndex());
            hc.Add(MapKey.CalcHashIndex());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }
    }

    public partial class Basic_string
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Basic_string? CreateFrom(IBasic_string? source)
        {
            if (source is null) return null;
            return new Basic_string(source);
        }

        private static Basic_string CreateEmpty()
        {
            var empty = new Basic_string();
            empty.Freeze();
            return empty;
        }
        private static readonly Basic_string _empty = CreateEmpty();
        public static new Basic_string Empty => _empty;

    }
    public partial class Basic_string : EntityBase, IBasic_string, IEquatable<Basic_string>
    {
        public new const int EntityTag = 30;
        protected override int OnGetEntityTag() => EntityTag;

        private String? field_Scalar;
        String? IBasic_string.Scalar => field_Scalar;
        public String? Scalar
        {
            get => field_Scalar;
            set => field_Scalar = value;
        }
        private ImmutableList<String?>? field_Vector;
        IReadOnlyList<String?>? IBasic_string.Vector => field_Vector;
        public ImmutableList<String?>? Vector
        {
            get => field_Vector;
            set => field_Vector = value;
        }
        private ImmutableDictionary<String, String?>? field_MapValue;
        IReadOnlyDictionary<String, String?>? IBasic_string.MapValue => field_MapValue;
        public ImmutableDictionary<String, String?>? MapValue
        {
            get => field_MapValue;
            set => field_MapValue = value;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Basic_string() : base()
        {
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Basic_string(Basic_string? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_Scalar = source.Scalar;
            field_Vector = source.Vector;
            field_MapValue = source.MapValue;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Basic_string(IBasic_string? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            field_Scalar = source.Scalar;
            field_Vector = source.Vector is null
                ? default
                : ImmutableList<String?>.Empty.AddRange(source.Vector);
            field_MapValue = source.MapValue is null
                ? default
                : ImmutableDictionary<String, String?>.Empty.AddRange(source.MapValue);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void CopyFrom(IBasic_string? source)
        {
            if (source is null) return;
            base.CopyFrom(source);
            field_Scalar = source.Scalar;
            field_Vector = source.Vector is null
                ? default
                : ImmutableList<String?>.Empty.AddRange(source.Vector);
            field_MapValue = source.MapValue is null
                ? default
                : ImmutableDictionary<String, String?>.Empty.AddRange(source.MapValue);
        }

        public virtual bool Equals(Basic_string? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!Scalar.ValueEquals(other.Scalar)) return false;
            if (!Vector.ArrayEquals(other.Vector)) return false;
            if (!MapValue.IndexEquals(other.MapValue)) return false;
            return base.Equals(other);
        }

        public override bool Equals(object? obj) => obj is Basic_string other && Equals(other);

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(Scalar.CalcHashUnary());
            hc.Add(Vector.CalcHashArray());
            hc.Add(MapValue.CalcHashIndex());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }
    }

    public partial class Basic_Octets
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Basic_Octets? CreateFrom(IBasic_Octets? source)
        {
            if (source is null) return null;
            return new Basic_Octets(source);
        }

        private static Basic_Octets CreateEmpty()
        {
            var empty = new Basic_Octets();
            empty.Freeze();
            return empty;
        }
        private static readonly Basic_Octets _empty = CreateEmpty();
        public static new Basic_Octets Empty => _empty;

    }
    public partial class Basic_Octets : EntityBase, IBasic_Octets, IEquatable<Basic_Octets>
    {
        public new const int EntityTag = 31;
        protected override int OnGetEntityTag() => EntityTag;

        Octets? IBasic_Octets.Scalar => Scalar is null ? null : new Octets(Scalar);
        public byte[]? Scalar { get; set; }
        IReadOnlyList<Octets?>? IBasic_Octets.Vector => Vector is null
            ? null
            : new List<Octets?>(Vector.Select(x => x is null ? null : new Octets(x)));
        public byte[]?[]? Vector { get; set; }
        IReadOnlyDictionary<String, Octets?>? IBasic_Octets.MapValue => MapValue is null
            ? null
            : MapValue.ToDictionary(x => x.Key, x => x.Value is null ? null : new Octets(x.Value));
        public Dictionary<String, byte[]?>? MapValue { get; set; }
        private ImmutableDictionary<Octets, String?>? field_MapKey;
        IReadOnlyDictionary<Octets, String?>? IBasic_Octets.MapKey => field_MapKey;
        public ImmutableDictionary<Octets, String?>? MapKey
        {
            get => field_MapKey;
            set => field_MapKey = value;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Basic_Octets() : base()
        {
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Basic_Octets(Basic_Octets? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            this.Scalar = source.Scalar;
            this.Vector = source.Vector;
            this.MapValue = source.MapValue;
            field_MapKey = source.MapKey;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Basic_Octets(IBasic_Octets? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            this.Scalar = source.Scalar is null
                ? default
                : source.Scalar.Memory.ToArray();
            this.Vector = source.Vector is null
                ? default
                : source.Vector.Select(x => x is null ? null : x.Memory.ToArray()).ToArray();
            this.MapValue = source.MapValue is null
                ? default
                : source.MapValue.ToDictionary(x => x.Key, x => x.Value is null ? null : x.Value.Memory.ToArray());
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<Octets, String?>.Empty.AddRange(source.MapKey);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void CopyFrom(IBasic_Octets? source)
        {
            if (source is null) return;
            base.CopyFrom(source);
            this.Scalar = source.Scalar is null
                ? default
                : source.Scalar.Memory.ToArray();
            this.Vector = source.Vector is null
                ? default
                : source.Vector.Select(x => x is null ? null : x.Memory.ToArray()).ToArray();
            this.MapValue = source.MapValue is null
                ? default
                : source.MapValue.ToDictionary(x => x.Key, x => x.Value is null ? null : x.Value.Memory.ToArray());
            field_MapKey = source.MapKey is null
                ? default
                : ImmutableDictionary<Octets, String?>.Empty.AddRange(source.MapKey);
        }

        public virtual bool Equals(Basic_Octets? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
            if (!Scalar.ValueEquals(other.Scalar)) return false;
            if (!Vector.ArrayEquals(other.Vector)) return false;
            if (!MapValue.IndexEquals(other.MapValue)) return false;
            if (!MapKey.IndexEquals(other.MapKey)) return false;
            return base.Equals(other);
        }

        public override bool Equals(object? obj) => obj is Basic_Octets other && Equals(other);

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
            hc.Add(Scalar.CalcHashUnary());
            hc.Add(Vector.CalcHashArray());
            hc.Add(MapValue.CalcHashIndex());
            hc.Add(MapKey.CalcHashIndex());
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }
    }


}
