@page "/j2c"
@using MetaFac.CG4.ModelBuilding;
@using MetaFac.CG4.Models;

<PageTitle>J2C</PageTitle>

<h1>J2C</h1>

<p>This page demonstrates code generation from CG4 models expressed in JSON.</p>

<div>
    <textarea rows="@JsonRows" cols="100" @bind-value="JsonMetadata" @bind-value:event="oninput" />
</div>

<div>
    <button class="btn btn-primary" @onclick="Generate">Generate</button>
</div>

<div>
    <textarea rows="@CodeRows" cols="100" @bind-value="GeneratedCode" @bind-value:event="oninput" />
</div>

@code {
    static readonly char[] splitChars = new char[] { '\n', '\r' };

    private int JsonRows;
    string _json = "{ }";
    protected string JsonMetadata
    {
        get => _json;
        set
        {
            _json = value; 
            JsonRows = Math.Max(2, value.Split(splitChars, StringSplitOptions.RemoveEmptyEntries).Length);
        }
    }

    private int CodeRows;
    string _code = "";
    protected string GeneratedCode
    {
        get => _code;
        set
        {
            _code = value; 
            CodeRows = Math.Max(2, value.Split(splitChars, StringSplitOptions.RemoveEmptyEntries).Length);
        }
    }

    protected override Task OnInitializedAsync()
    {
        ModelContainer metadata
            = ModelBuilder.Create()
            .AddModelDef("Model1", null)
                .AddEntity("Entity1", null)
            .Build();

        JsonMetadata = metadata.ToJson(true);

        GeneratedCode = "// edit the model above and then generate";

        return Task.CompletedTask;
    }

    private void Generate()
    {
        // parse model and generate code
        var metadata = ModelContainer.FromJson(JsonMetadata)
            .SetToken("Metadata", "WebUI")
            .SetToken("Namespace", "MyOrganization.Generated")
            .SetToken("CopyrightInfo", "Copyright (c) 2023 MyOrganization Inc.");
        var generator = new Generator.Contracts.Generator();
        var sourceLines = generator.Generate(metadata);
        GeneratedCode = string.Join(Environment.NewLine, sourceLines);
    }
}

