//------------------------------------------------------------------------------
//   Warning: This code was automatically generated.
//   Changes to this file may cause incorrect behavior
//   and will be lost when this file is regenerated.
//------------------------------------------------------------------------------
//
// |metacode:version=0.1|
            // |metacode:template_begin|
//>>            Define("BooleanFieldType", "Boolean");
//>>            Define("SByteFieldType", "SByte");
//>>            Define("ByteFieldType", "Byte");
//>>            Define("Int16FieldType", "Int16");
//>>            Define("UInt16FieldType", "UInt16");
//>>            Define("CharFieldType", "Char");
//>>            Define("Int32FieldType", "Int32");
//>>            Define("UInt32FieldType", "UInt32");
//>>            Define("SingleFieldType", "Single");
//>>            Define("Int64FieldType", "Int64");
//>>            Define("UInt64FieldType", "UInt64");
//>>            Define("DoubleFieldType", "Double");
//>>            Define("DateTimeFieldType", "DateTime");
//>>            Define("TimeSpanFieldType", "TimeSpan");
//>>            Define("DateTimeZoneFieldType", "DateTimeOffset");
//>>            Define("DecimalFieldType", "Decimal");
//>>            Define("GuidFieldType", "Guid");
//>>            Define("StringFieldType", "String");
//>>            Define("BinaryFieldType", "byte[]");
//>>            Define("ExternalBoolean", "T_BooleanFieldType_");
//>>            Define("ExternalSByte", "T_SByteFieldType_");
//>>            Define("ExternalByte", "T_ByteFieldType_");
//>>            Define("ExternalInt16", "T_Int16FieldType_");
//>>            Define("ExternalUInt16", "T_UInt16FieldType_");
//>>            Define("ExternalChar", "T_CharFieldType_");
//>>            Define("ExternalInt32", "T_Int32FieldType_");
//>>            Define("ExternalUInt32", "T_UInt32FieldType_");
//>>            Define("ExternalSingle", "T_SingleFieldType_");
//>>            Define("ExternalInt64", "T_Int64FieldType_");
//>>            Define("ExternalUInt64", "T_UInt64FieldType_");
//>>            Define("ExternalDouble", "T_DoubleFieldType_");
//>>            Define("ExternalDateTime", "T_DateTimeFieldType_");
//>>            Define("ExternalTimeSpan", "T_TimeSpanFieldType_");
//>>            Define("ExternalDateTimeOffset", "T_DateTimeZoneFieldType_");
//>>            Define("ExternalDecimal", "T_DecimalFieldType_");
//>>            Define("ExternalGuid", "T_GuidFieldType_");
//>>            Define("ExternalString", "T_StringFieldType_");
//>>            Define("ExternalBinaryFieldType", "T_BinaryFieldType_");
//>>            Define("BinaryFieldType", "ReadOnlyMemory<byte>");
//>>            Define("BaseClassName", "EntityBase");
// <auto-generated />
#region Auto-generated
//--------------------------------------------------------------------------------
// Warning: This file was automatically generated. Changes to this file may
// cause incorrect behavior and will be lost when this file is regenerated.
//
// This file was generated using MetaFac.CG4 tools and user supplied metadata.
//
// To download and install the tool, the .NET CLI command is:
// dotnet tool install --global MetaFac.CG4.CLI
//
// For more information about using this tool, the help command is:
// mfcg4 g2c --help
//--------------------------------------------------------------------------------
#endregion
#nullable enable
using MetaFac.Mutability;
using MetaFac.CG4.Runtime;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Runtime.CompilerServices;
using T_Namespace_.Contracts;

namespace T_Namespace_.RecordsV2
{
//>>            using (Ignored())
//>>            {
    using T_ExternalOtherType_ = System.Int64;
    using T_IndexType_ = System.String;
//>>            }

//>>            using (Ignored())
//>>            {
    public record T_ModelType_ : EntityBase, IT_ModelType_
    {
        public static T_ModelType_? CreateFrom(IT_ModelType_? source)
        {
            if (source is null) return null;
            if (source is T_ModelType_ concrete) return concrete;
            return new T_ModelType_(source);
        }

        protected override int OnGetEntityTag() => 0;

        public int TestData { get; init; }

        public T_ModelType_() { }
        public T_ModelType_(int testData)
        {
            TestData = testData;
        }
        public T_ModelType_(IT_ModelType_ source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
            TestData = source.TestData;
        }
    }
//>>            }

    public abstract record EntityBase : IFreezable, IEntityBase
    {
        public EntityBase() { }
        public EntityBase(EntityBase? source) { }
        public EntityBase(IEntityBase? source) { }
        public const int ClassTag = 0;
        protected abstract int OnGetEntityTag();
        public int GetEntityTag() => OnGetEntityTag();
        public virtual bool Equals(EntityBase? other) => true;
        public override int GetHashCode() => 0;
        public static EntityBase Empty => throw new NotSupportedException();
        public bool IsFreezable() => false;
        public bool IsFrozen() => true;
        public void Freeze() { }
        public bool TryFreeze() => false;
    }

//>>            using (Ignored())
//>>            {
    public record T_BaseClassName_ : EntityBase, IT_BaseClassName_
    {
        public T_BaseClassName_() { }
        public T_BaseClassName_(T_BaseClassName_? source) : base(source) { }
        public T_BaseClassName_(IT_BaseClassName_? source) : base(source) { }
        public new const int ClassTag = 0;
        protected override int OnGetEntityTag() => ClassTag;
        public virtual bool Equals(T_BaseClassName_? other) => true;
        public override int GetHashCode() => 0;
        private static T_BaseClassName_ _empty => new T_BaseClassName_();
        public static new T_BaseClassName_ Empty => _empty;
    }
//>>            }

//>>            foreach (var cd in outerScope.ClassDefs)
//>>            {
//>>                using (NewScope(cd))
//>>                {
//>>                    if (cd.IsAbstract)
//>>                    {
    public abstract partial record T_ClassName2_
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static T_ClassName_? CreateFrom(IT_ClassName_? source)
        {
            if (source is null) return null;
            int classTag = source.GetEntityTag();
            switch (classTag)
            {
//>>                        foreach (var derived in cd.AllDerivedClasses)
//>>                        {
//>>                            using (NewScope(derived))
//>>                            {
                case T_ClassName_.ClassTag: return T_ClassName_.CreateFrom((IT_ClassName_)source);
//>>                            }
//>>                        }
                default:
                    throw new InvalidOperationException($"Unable to create {typeof(T_ClassName_)} from {source.GetType().Name}");
            }
        }

    }
//>>                    }
//>>                    else
//>>                    {
    public partial record T_ClassName_
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static T_ClassName_? CreateFrom(IT_ClassName_? source)
        {
            if (source is null) return null;
            if (source is T_ClassName_ thisClass) return thisClass;
            return new T_ClassName_(source);
        }

        private static readonly T_ClassName_ _empty = new T_ClassName_();
        public static new T_ClassName_ Empty => _empty;

    }
//>>                    }
    public partial record T_ClassName_ : T_BaseClassName_, IT_ClassName_
    {
//>>                    using (Ignored())
//>>                    {
        private const int T_ClassTag_ = 99;
//>>                    }
        public new const int ClassTag = T_ClassTag_;
        protected override int OnGetEntityTag() => ClassTag;

//>>                    foreach (var fd in cd.FieldDefs)
//>>                    {
//>>                        using (NewScope(fd))
//>>                        {
//>>                            var fieldInfo = new FieldInfo(fd, _engine.Current);
//>>                            switch (fieldInfo.Kind)
//>>                            {
//>>                                case FieldKind.UnaryModel:
        public T_ModelType_? T_UnaryModelFieldName_ { get; init; }
        IT_ModelType_? IT_ClassName_.T_UnaryModelFieldName_ => T_UnaryModelFieldName_;
//>>                                    break;
//>>                                case FieldKind.ArrayModel:
        public ImmutableList<T_ModelType_?>? T_ArrayModelFieldName_ { get; init; }
        IReadOnlyList<IT_ModelType_?>? IT_ClassName_.T_ArrayModelFieldName_ => T_ArrayModelFieldName_;
//>>                                    break;
//>>                                case FieldKind.IndexModel:
        public ImmutableDictionary<T_IndexType_, T_ModelType_?>? T_IndexModelFieldName_ { get; init; }
        IReadOnlyDictionary<T_IndexType_, IT_ModelType_?>? IT_ClassName_.T_IndexModelFieldName_
            => T_IndexModelFieldName_ is null ? null
            : new DictionaryFacade<T_IndexType_, IT_ModelType_?, T_ModelType_?>(T_IndexModelFieldName_, (x) => x);
//>>                                    break;
//>>                                case FieldKind.UnaryMaybe:
        public T_ExternalOtherType_? T_UnaryMaybeFieldName_ { get; init; }
        T_ExternalOtherType_? IT_ClassName_.T_UnaryMaybeFieldName_ => T_UnaryMaybeFieldName_;
//>>                                    break;
//>>                                case FieldKind.ArrayMaybe:
        public ImmutableList<T_ExternalOtherType_?>? T_ArrayMaybeFieldName_ { get; init; }
        IReadOnlyList<T_ExternalOtherType_?>? IT_ClassName_.T_ArrayMaybeFieldName_ => T_ArrayMaybeFieldName_;
//>>                                    break;
//>>                                case FieldKind.IndexMaybe:
        public ImmutableDictionary<T_IndexType_, T_ExternalOtherType_?>? T_IndexMaybeFieldName_ { get; init; }
        IReadOnlyDictionary<T_IndexType_, T_ExternalOtherType_?>? IT_ClassName_.T_IndexMaybeFieldName_ => T_IndexMaybeFieldName_;
//>>                                    break;
//>>                                case FieldKind.UnaryOther:
        public T_ExternalOtherType_ T_UnaryOtherFieldName_ { get; init; }
        T_ExternalOtherType_ IT_ClassName_.T_UnaryOtherFieldName_ => T_UnaryOtherFieldName_;
//>>                                    break;
//>>                                case FieldKind.ArrayOther:
        public ImmutableList<T_ExternalOtherType_>? T_ArrayOtherFieldName_ { get; init; }
        IReadOnlyList<T_ExternalOtherType_>? IT_ClassName_.T_ArrayOtherFieldName_ => T_ArrayOtherFieldName_;
//>>                                    break;
//>>                                case FieldKind.IndexOther:
        public ImmutableDictionary<T_IndexType_, T_ExternalOtherType_>? T_IndexOtherFieldName_ { get; init; }
        IReadOnlyDictionary<T_IndexType_, T_ExternalOtherType_>? IT_ClassName_.T_IndexOtherFieldName_ => T_IndexOtherFieldName_;
//>>                                    break;
//>>                                case FieldKind.UnaryBuffer:
        public ReadOnlyMemory<byte> T_UnaryBufferFieldName_ { get; init; }
        ReadOnlyMemory<byte> IT_ClassName_.T_UnaryBufferFieldName_ => T_UnaryBufferFieldName_;
//>>                                    break;
//>>                                case FieldKind.ArrayBuffer:
        public ImmutableList<ReadOnlyMemory<byte>>? T_ArrayBufferFieldName_ { get; init; }
        IReadOnlyList<ReadOnlyMemory<byte>>? IT_ClassName_.T_ArrayBufferFieldName_ => T_ArrayBufferFieldName_ is null
            ? null
            : new ListFacade<ReadOnlyMemory<byte>, ReadOnlyMemory<byte>>(T_ArrayBufferFieldName_, (x) => x);
//>>                                    break;
//>>                                case FieldKind.IndexBuffer:
        public ImmutableDictionary<T_IndexType_, ReadOnlyMemory<byte>>? T_IndexBufferFieldName_ { get; init; }
        IReadOnlyDictionary<T_IndexType_, ReadOnlyMemory<byte>>? IT_ClassName_.T_IndexBufferFieldName_ => T_IndexBufferFieldName_ is null
            ? null
            : new DictionaryFacade<T_IndexType_, ReadOnlyMemory<byte>, ReadOnlyMemory<byte>>(T_IndexBufferFieldName_, (x) => x);
//>>                                    break;
//>>                                case FieldKind.UnaryString:
        public String? T_UnaryStringFieldName_ { get; init; }
        String? IT_ClassName_.T_UnaryStringFieldName_ => T_UnaryStringFieldName_;
//>>                                    break;
//>>                                case FieldKind.ArrayString:
        public ImmutableList<String?>? T_ArrayStringFieldName_ { get; init; }
        IReadOnlyList<String?>? IT_ClassName_.T_ArrayStringFieldName_ => T_ArrayStringFieldName_;
//>>                                    break;
//>>                                case FieldKind.IndexString:
        public ImmutableDictionary<T_IndexType_, String?>? T_IndexStringFieldName_ { get; init; }
        IReadOnlyDictionary<T_IndexType_, String?>? IT_ClassName_.T_IndexStringFieldName_ => T_IndexStringFieldName_;
//>>                                    break;
//>>                                default: break;
//>>                            }
//>>                        }
//>>                    }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public T_ClassName_() : base()
        {
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public T_ClassName_(T_ClassName_? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
//>>                    foreach (var fd in cd.FieldDefs)
//>>                    {
//>>                        using (NewScope(fd))
//>>                        {
//>>                            var fieldInfo = new FieldInfo(fd, _engine.Current);
//>>                            switch (fieldInfo.Kind)
//>>                            {
//>>                                case FieldKind.UnaryModel:
            T_UnaryModelFieldName_ = source.T_UnaryModelFieldName_;
//>>                                    break;
//>>                                case FieldKind.ArrayModel:
            T_ArrayModelFieldName_ = source.T_ArrayModelFieldName_;
//>>                                    break;
//>>                                case FieldKind.IndexModel:
            T_IndexModelFieldName_ = source.T_IndexModelFieldName_;
//>>                                    break;
//>>                                case FieldKind.UnaryMaybe:
            T_UnaryMaybeFieldName_ = source.T_UnaryMaybeFieldName_;
//>>                                    break;
//>>                                case FieldKind.ArrayMaybe:
            T_ArrayMaybeFieldName_ = source.T_ArrayMaybeFieldName_;
//>>                                    break;
//>>                                case FieldKind.IndexMaybe:
            T_IndexMaybeFieldName_ = source.T_IndexMaybeFieldName_;
//>>                                    break;
//>>                                case FieldKind.UnaryOther:
            T_UnaryOtherFieldName_ = source.T_UnaryOtherFieldName_;
//>>                                    break;
//>>                                case FieldKind.ArrayOther:
            T_ArrayOtherFieldName_ = source.T_ArrayOtherFieldName_;
//>>                                    break;
//>>                                case FieldKind.IndexOther:
            T_IndexOtherFieldName_ = source.T_IndexOtherFieldName_;
//>>                                    break;
//>>                                case FieldKind.UnaryBuffer:
            T_UnaryBufferFieldName_ = source.T_UnaryBufferFieldName_;
//>>                                    break;
//>>                                case FieldKind.ArrayBuffer:
            T_ArrayBufferFieldName_ = source.T_ArrayBufferFieldName_;
//>>                                    break;
//>>                                case FieldKind.IndexBuffer:
            T_IndexBufferFieldName_ = source.T_IndexBufferFieldName_;
//>>                                    break;
//>>                                case FieldKind.UnaryString:
            T_UnaryStringFieldName_ = source.T_UnaryStringFieldName_;
//>>                                    break;
//>>                                case FieldKind.ArrayString:
            T_ArrayStringFieldName_ = source.T_ArrayStringFieldName_;
//>>                                    break;
//>>                                case FieldKind.IndexString:
            T_IndexStringFieldName_ = source.T_IndexStringFieldName_;
//>>                                    break;
//>>                                default: break;
//>>                            }
//>>                        }
//>>                    }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public T_ClassName_(IT_ClassName_? source) : base(source)
        {
            if (source is null) throw new ArgumentNullException(nameof(source));
//>>                    foreach (var fd in cd.FieldDefs)
//>>                    {
//>>                        using (NewScope(fd))
//>>                        {
//>>                            var fieldInfo = new FieldInfo(fd, _engine.Current);
//>>                            switch (fieldInfo.Kind)
//>>                            {
//>>                                case FieldKind.UnaryModel:
            T_UnaryModelFieldName_ = T_ModelType_.CreateFrom(source.T_UnaryModelFieldName_);
//>>                                    break;
//>>                                case FieldKind.ArrayModel:
            T_ArrayModelFieldName_ = source.T_ArrayModelFieldName_ is null
                ? default
                : ImmutableList<T_ModelType_?>.Empty.AddRange(source.T_ArrayModelFieldName_.Select(x => T_ModelType_.CreateFrom(x)));
//>>                                    break;
//>>                                case FieldKind.IndexModel:
            T_IndexModelFieldName_ = source.T_IndexModelFieldName_ is null
                ? default
                : ImmutableDictionary<T_IndexType_, T_ModelType_?>.Empty.AddRange(
                    source.T_IndexModelFieldName_.Select(x => new KeyValuePair<T_IndexType_, T_ModelType_?>(x.Key, T_ModelType_.CreateFrom(x.Value))));
//>>                                    break;
//>>                                case FieldKind.UnaryMaybe:
            T_UnaryMaybeFieldName_ = source.T_UnaryMaybeFieldName_;
//>>                                    break;
//>>                                case FieldKind.ArrayMaybe:
            T_ArrayMaybeFieldName_ = source.T_ArrayMaybeFieldName_ is null
                ? default
                : ImmutableList<T_ExternalOtherType_?>.Empty.AddRange(source.T_ArrayMaybeFieldName_);
//>>                                    break;
//>>                                case FieldKind.IndexMaybe:
            T_IndexMaybeFieldName_ = source.T_IndexMaybeFieldName_ is null
                ? default
                : ImmutableDictionary<T_IndexType_, T_ExternalOtherType_?>.Empty.AddRange(source.T_IndexMaybeFieldName_);
//>>                                    break;
//>>                                case FieldKind.UnaryOther:
            T_UnaryOtherFieldName_ = source.T_UnaryOtherFieldName_;
//>>                                    break;
//>>                                case FieldKind.ArrayOther:
            T_ArrayOtherFieldName_ = source.T_ArrayOtherFieldName_ is null
                ? default
                : ImmutableList<T_ExternalOtherType_>.Empty.AddRange(source.T_ArrayOtherFieldName_);
//>>                                    break;
//>>                                case FieldKind.IndexOther:
            T_IndexOtherFieldName_ = source.T_IndexOtherFieldName_ is null
                ? default
                : ImmutableDictionary<T_IndexType_, T_ExternalOtherType_>.Empty.AddRange(source.T_IndexOtherFieldName_);
//>>                                    break;
//>>                                case FieldKind.UnaryBuffer:
            T_UnaryBufferFieldName_ = source.T_UnaryBufferFieldName_;
//>>                                    break;
//>>                                case FieldKind.ArrayBuffer:
            T_ArrayBufferFieldName_ = source.T_ArrayBufferFieldName_ is null
                ? default
                : ImmutableList<ReadOnlyMemory<byte>>.Empty.AddRange(source.T_ArrayBufferFieldName_
                    .Select(x => (ReadOnlyMemory<byte>)x));
//>>                                    break;
//>>                                case FieldKind.IndexBuffer:
            T_IndexBufferFieldName_ = source.T_IndexBufferFieldName_ is null
                ? default
                : ImmutableDictionary<T_IndexType_, ReadOnlyMemory<byte>>.Empty.AddRange(source.T_IndexBufferFieldName_
                    .Select(x => new KeyValuePair<T_IndexType_, ReadOnlyMemory<byte>>(x.Key, x.Value)));
//>>                                    break;
//>>                                case FieldKind.UnaryString:
            T_UnaryStringFieldName_ = source.T_UnaryStringFieldName_;
//>>                                    break;
//>>                                case FieldKind.ArrayString:
            T_ArrayStringFieldName_ = source.T_ArrayStringFieldName_ is null
                ? default
                : ImmutableList<String?>.Empty.AddRange(source.T_ArrayStringFieldName_);
//>>                                    break;
//>>                                case FieldKind.IndexString:
            T_IndexStringFieldName_ = source.T_IndexStringFieldName_ is null
                ? default
                : ImmutableDictionary<T_IndexType_, String?>.Empty.AddRange(source.T_IndexStringFieldName_);
//>>                                    break;
//>>                                default: break;
//>>                            }
//>>                        }
//>>                    }
        }

        public virtual bool Equals(T_ClassName_? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(other, this)) return true;
//>>                    foreach (var fd in cd.FieldDefs)
//>>                    {
//>>                        using (NewScope(fd))
//>>                        {
//>>                            var fieldInfo = new FieldInfo(fd, _engine.Current);
//>>                            switch (fieldInfo.Kind)
//>>                            {
//>>                                case FieldKind.UnaryModel:
            if (!T_UnaryModelFieldName_.ValueEquals(other.T_UnaryModelFieldName_)) return false;
//>>                                    break;
//>>                                case FieldKind.ArrayModel:
            if (!T_ArrayModelFieldName_.ArrayEquals(other.T_ArrayModelFieldName_)) return false;
//>>                                    break;
//>>                                case FieldKind.IndexModel:
            if (!T_IndexModelFieldName_.IndexEquals(other.T_IndexModelFieldName_)) return false;
//>>                                    break;
//>>                                case FieldKind.UnaryMaybe:
            if (!T_UnaryMaybeFieldName_.ValueEquals(other.T_UnaryMaybeFieldName_)) return false;
//>>                                    break;
//>>                                case FieldKind.ArrayMaybe:
            if (!T_ArrayMaybeFieldName_.ArrayEquals(other.T_ArrayMaybeFieldName_)) return false;
//>>                                    break;
//>>                                case FieldKind.IndexMaybe:
            if (!T_IndexMaybeFieldName_.IndexEquals(other.T_IndexMaybeFieldName_)) return false;
//>>                                    break;
//>>                                case FieldKind.UnaryOther:
            if (!T_UnaryOtherFieldName_.ValueEquals(other.T_UnaryOtherFieldName_)) return false;
//>>                                    break;
//>>                                case FieldKind.ArrayOther:
            if (!T_ArrayOtherFieldName_.ArrayEquals(other.T_ArrayOtherFieldName_)) return false;
//>>                                    break;
//>>                                case FieldKind.IndexOther:
            if (!T_IndexOtherFieldName_.IndexEquals(other.T_IndexOtherFieldName_)) return false;
//>>                                    break;
//>>                                case FieldKind.UnaryBuffer:
            if (!T_UnaryBufferFieldName_.ValueEquals(other.T_UnaryBufferFieldName_)) return false;
//>>                                    break;
//>>                                case FieldKind.ArrayBuffer:
            if (!T_ArrayBufferFieldName_.ArrayEquals(other.T_ArrayBufferFieldName_)) return false;
//>>                                    break;
//>>                                case FieldKind.IndexBuffer:
            if (!T_IndexBufferFieldName_.IndexEquals(other.T_IndexBufferFieldName_)) return false;
//>>                                    break;
//>>                                case FieldKind.UnaryString:
            if (!T_UnaryStringFieldName_.ValueEquals(other.T_UnaryStringFieldName_)) return false;
//>>                                    break;
//>>                                case FieldKind.ArrayString:
            if (!T_ArrayStringFieldName_.ArrayEquals(other.T_ArrayStringFieldName_)) return false;
//>>                                    break;
//>>                                case FieldKind.IndexString:
            if (!T_IndexStringFieldName_.IndexEquals(other.T_IndexStringFieldName_)) return false;
//>>                                    break;
//>>                                default: break;
//>>                            }
//>>                        }
//>>                    }
            return base.Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode hc = new HashCode();
//>>                    foreach (var fd in cd.FieldDefs)
//>>                    {
//>>                        using (NewScope(fd))
//>>                        {
//>>                            var fieldInfo = new FieldInfo(fd, _engine.Current);
//>>                            switch (fieldInfo.Kind)
//>>                            {
//>>                                case FieldKind.UnaryModel:
            hc.Add(T_UnaryModelFieldName_.CalcHashUnary());
//>>                                    break;
//>>                                case FieldKind.ArrayModel:
            hc.Add(T_ArrayModelFieldName_.CalcHashArray());
//>>                                    break;
//>>                                case FieldKind.IndexModel:
            hc.Add(T_IndexModelFieldName_.CalcHashIndex());
//>>                                    break;
//>>                                case FieldKind.UnaryMaybe:
            hc.Add(T_UnaryMaybeFieldName_.CalcHashUnary());
//>>                                    break;
//>>                                case FieldKind.ArrayMaybe:
            hc.Add(T_ArrayMaybeFieldName_.CalcHashArray());
//>>                                    break;
//>>                                case FieldKind.IndexMaybe:
            hc.Add(T_IndexMaybeFieldName_.CalcHashIndex());
//>>                                    break;
//>>                                case FieldKind.UnaryOther:
            hc.Add(T_UnaryOtherFieldName_.CalcHashUnary());
//>>                                    break;
//>>                                case FieldKind.ArrayOther:
            hc.Add(T_ArrayOtherFieldName_.CalcHashArray());
//>>                                    break;
//>>                                case FieldKind.IndexOther:
            hc.Add(T_IndexOtherFieldName_.CalcHashIndex());
//>>                                    break;
//>>                                case FieldKind.UnaryBuffer:
            hc.Add(T_UnaryBufferFieldName_.CalcHashUnary());
//>>                                    break;
//>>                                case FieldKind.ArrayBuffer:
            hc.Add(T_ArrayBufferFieldName_.CalcHashArray());
//>>                                    break;
//>>                                case FieldKind.IndexBuffer:
            hc.Add(T_IndexBufferFieldName_.CalcHashIndex());
//>>                                    break;
//>>                                case FieldKind.UnaryString:
            hc.Add(T_UnaryStringFieldName_.CalcHashUnary());
//>>                                    break;
//>>                                case FieldKind.ArrayString:
            hc.Add(T_ArrayStringFieldName_.CalcHashArray());
//>>                                    break;
//>>                                case FieldKind.IndexString:
            hc.Add(T_IndexStringFieldName_.CalcHashIndex());
//>>                                    break;
//>>                                default: break;
//>>                            }
//>>                        }
//>>                    }
            hc.Add(base.GetHashCode());
            return hc.ToHashCode();
        }

        private int? _hashCode = null;
        public override int GetHashCode()
        {
            if (_hashCode is null)
                _hashCode = CalcHashCode();
            return _hashCode.Value;
        }
    }

//>>                }
//>>            }

//>>            using (Ignored())
//>>            {
    public record T_SuperClassName_ : T_ClassName_, IT_SuperClassName_
    {
        public T_SuperClassName_() { }
        public T_SuperClassName_(T_SuperClassName_? source) : base(source) { }
        public T_SuperClassName_(IT_SuperClassName_? source) : base(source) { }
        public virtual bool Equals(T_SuperClassName_? other) => true;
        public override int GetHashCode() => 0;
    }
//>>            }

}
// |metacode:template_end|
